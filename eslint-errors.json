[{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\BadgeNotification.tsx","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·name={badge.icone·as·keyof·typeof·Ionicons.glyphMap}·size={32}·color={badge.couleur}` with `⏎··················name={badge.icone·as·keyof·typeof·Ionicons.glyphMap}⏎··················size={32}⏎··················color={badge.couleur}⏎···············`","line":145,"column":26,"nodeType":null,"messageId":"replace","endLine":145,"endColumn":111,"fix":{"range":[3985,4070],"text":"\n                  name={badge.icone as keyof typeof Ionicons.glyphMap}\n                  size={32}\n                  color={badge.couleur}\n               "}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '100%' }","line":174,"column":19,"nodeType":"ObjectExpression","endLine":177,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useCallback } from 'react';\nimport { View, Text, StyleSheet, Animated, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport * as Haptics from 'expo-haptics';\n\n// Dimensions removed as width was not used\n\ninterface BadgeNotificationProps {\n  visible: boolean;\n  badge: {\n    nom: string;\n    description: string;\n    icone: string;\n    couleur: string;\n    points?: number;\n  } | null;\n  onClose: () => void;\n}\n\nexport const BadgeNotification: React.FC<BadgeNotificationProps> = ({\n  visible,\n  badge,\n  onClose,\n}) => {\n  const { colors, isDark } = useTheme();\n  const translateY = useRef(new Animated.Value(-200)).current;\n  const opacity = useRef(new Animated.Value(0)).current;\n  const scale = useRef(new Animated.Value(0.8)).current;\n\n  const handleClose = useCallback(() => {\n    // Animation de sortie\n    Animated.parallel([\n      Animated.timing(translateY, {\n        toValue: -200,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 300,\n        useNativeDriver: true,\n      }),\n    ]).start(() => {\n      onClose();\n    });\n  }, [translateY, opacity, onClose]);\n\n  useEffect(() => {\n    if (visible && badge) {\n      // Haptic feedback pour nouveau badge\n      void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n\n      // Animation d'entrée\n      Animated.parallel([\n        Animated.spring(translateY, {\n          toValue: 0,\n          useNativeDriver: true,\n          tension: 65,\n          friction: 11,\n        }),\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n        Animated.spring(scale, {\n          toValue: 1,\n          useNativeDriver: true,\n          tension: 65,\n          friction: 11,\n        }),\n      ]).start();\n\n      // Auto-fermeture après 5 secondes\n      const timer = setTimeout(() => {\n        handleClose();\n      }, 5000);\n\n      return () => clearTimeout(timer);\n    } else {\n      // Animation de sortie\n      Animated.parallel([\n        Animated.timing(translateY, {\n          toValue: -200,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n        Animated.timing(opacity, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n        Animated.timing(scale, {\n          toValue: 0.8,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    }\n  }, [visible, badge, handleClose, opacity, scale, translateY]);\n\n  if (!badge) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        {\n          transform: [{ translateY }, { scale }],\n          opacity,\n        },\n      ]}\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableOpacity activeOpacity={0.9} onPress={handleClose}>\n        <LinearGradient\n          colors={isDark ? ['#1F2937', '#111827'] : ['#FFFFFF', '#F9FAFB']}\n          style={[styles.notification, shadows.lg]}\n        >\n          {/* Particules d'effet */}\n          <View style={styles.particles}>\n            {[...Array(6)].map((_, i) => (\n              <View\n                key={i}\n                style={[\n                  styles.particle,\n                  {\n                    backgroundColor: badge.couleur,\n                    transform: [{ rotate: `${i * 60}deg` }, { translateX: 30 }],\n                  },\n                ]}\n              />\n            ))}\n          </View>\n\n          {/* Contenu */}\n          <View style={styles.content}>\n            <View style={styles.header}>\n              <View style={[styles.iconContainer, { backgroundColor: badge.couleur + '20' }]}>\n                <Ionicons name={badge.icone as keyof typeof Ionicons.glyphMap} size={32} color={badge.couleur} />\n              </View>\n              <View style={styles.textContainer}>\n                <Text style={[styles.title, { color: colors.text }]}>Nouveau badge débloqué !</Text>\n                <Text style={[styles.badgeName, { color: badge.couleur }]}>{badge.nom}</Text>\n              </View>\n              <TouchableOpacity onPress={handleClose} style={styles.closeButton}>\n                <Ionicons name=\"close\" size={24} color={colors.textSecondary} />\n              </TouchableOpacity>\n            </View>\n\n            <Text style={[styles.description, { color: colors.textSecondary }]}>\n              {badge.description}\n            </Text>\n\n            {badge.points && badge.points > 0 && (\n              <View style={[styles.pointsContainer, { backgroundColor: colors.primary + '10' }]}>\n                <Ionicons name=\"star\" size={16} color={colors.primary} />\n                <Text style={[styles.pointsText, { color: colors.primary }]}>\n                  +{badge.points} points\n                </Text>\n              </View>\n            )}\n\n            {/* Barre de progression pour l'auto-fermeture */}\n            <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\n              <Animated.View\n                style={[\n                  styles.progressFill,\n                  {\n                    backgroundColor: badge.couleur,\n                    width: '100%',\n                  },\n                ]}\n              />\n            </View>\n          </View>\n        </LinearGradient>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 60,\n    left: spacing.lg,\n    right: spacing.lg,\n    zIndex: 9999,\n  },\n  notification: {\n    borderRadius: borderRadius.xl,\n    overflow: 'hidden',\n  },\n  particles: {\n    position: 'absolute',\n    top: '50%',\n    left: 60,\n    width: 60,\n    height: 60,\n  },\n  particle: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    borderRadius: 2,\n    opacity: 0.3,\n  },\n  content: {\n    padding: spacing.lg,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.sm,\n  },\n  iconContainer: {\n    width: 56,\n    height: 56,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: spacing.md,\n  },\n  textContainer: {\n    flex: 1,\n  },\n  title: {\n    fontSize: typography.caption.fontSize,\n    marginBottom: 2,\n  },\n  badgeName: {\n    fontSize: typography.h3.fontSize,\n    fontWeight: 'bold',\n  },\n  closeButton: {\n    padding: spacing.xs,\n  },\n  description: {\n    fontSize: typography.body.fontSize,\n    marginBottom: spacing.sm,\n  },\n  pointsContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    alignSelf: 'flex-start',\n    paddingHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n    borderRadius: borderRadius.full,\n    gap: spacing.xs,\n    marginBottom: spacing.sm,\n  },\n  pointsText: {\n    fontSize: typography.caption.fontSize,\n    fontWeight: 'bold',\n  },\n  progressBar: {\n    height: 2,\n    borderRadius: 1,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    animationDuration: '5s',\n    animationTimingFunction: 'linear',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\BubbleTabBar.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: \"isFocused ? '#fff' : colors.text\" }","line":185,"column":50,"nodeType":"ObjectExpression","endLine":185,"endColumn":93},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: \"isFocused ? '#fff' : colors.text\" }","line":185,"column":50,"nodeType":"ObjectExpression","endLine":185,"endColumn":93},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'transparent' }","line":194,"column":14,"nodeType":"ObjectExpression","endLine":201,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { View, TouchableOpacity, StyleSheet, Dimensions } from 'react-native';\nimport { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n  withTiming,\n  interpolate,\n} from 'react-native-reanimated';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { shadows } from '../styles/theme';\n\nconst { width } = Dimensions.get('window');\nconst TAB_BAR_WIDTH = width - 40;\nconst TAB_WIDTH = TAB_BAR_WIDTH / 4;\n\nconst BubbleTabBar: React.FC<BottomTabBarProps> = ({ state, descriptors, navigation }) => {\n  const insets = useSafeAreaInsets();\n  const { colors } = useTheme();\n  const translateX = useSharedValue(state.index * TAB_WIDTH);\n\n  useEffect(() => {\n    translateX.value = withSpring(state.index * TAB_WIDTH, {\n      damping: 15,\n      stiffness: 100,\n    });\n  }, [state.index, translateX]);\n\n  const animatedBubbleStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: translateX.value }],\n    };\n  });\n\n  const getIconName = (routeName: string, isFocused: boolean): keyof typeof Ionicons.glyphMap => {\n    switch (routeName) {\n      case 'Home':\n        return isFocused ? 'home' : 'home-outline';\n      case 'Revision':\n        return isFocused ? 'book' : 'book-outline';\n      case 'Progress':\n        return isFocused ? 'stats-chart' : 'stats-chart-outline';\n      case 'Ranking':\n        return isFocused ? 'trophy' : 'trophy-outline';\n      default:\n        return 'help-outline';\n    }\n  };\n\n  const getLabel = (routeName: string): string => {\n    switch (routeName) {\n      case 'Home':\n        return 'Accueil';\n      case 'Revision':\n        return 'Révision';\n      case 'Progress':\n        return 'Progrès';\n      case 'Ranking':\n        return 'Classement';\n      default:\n        return routeName;\n    }\n  };\n\n  return (\n    <View style={[styles.container, { paddingBottom: insets.bottom }]}>\n      <View\n        style={[\n          styles.tabBar,\n          {\n            backgroundColor: colors.surface,\n            borderWidth: StyleSheet.hairlineWidth,\n            borderColor: colors.border,\n          },\n          shadows.lg,\n        ]}\n      >\n        <Animated.View\n          style={[styles.bubble, animatedBubbleStyle, { backgroundColor: colors.primary }]}\n        />\n\n        {state.routes.map((route, index) => {\n          const { options } = descriptors[route.key];\n          const isFocused = state.index === index;\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!isFocused && !event.defaultPrevented) {\n              navigation.navigate(route.name);\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          return (\n            <TouchableOpacity\n              key={index}\n              accessibilityRole=\"button\"\n              accessibilityState={isFocused ? { selected: true } : {}}\n              accessibilityLabel={options.tabBarAccessibilityLabel}\n              testID={options.tabBarTestID}\n              onPress={onPress}\n              onLongPress={onLongPress}\n              style={styles.tab}\n              activeOpacity={0.7}\n            >\n              <TabIcon\n                routeName={route.name}\n                isFocused={isFocused}\n                iconName={getIconName(route.name, isFocused)}\n                label={getLabel(route.name)}\n                colors={colors}\n              />\n            </TouchableOpacity>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\ninterface TabIconProps {\n  routeName: string;\n  isFocused: boolean;\n  iconName: keyof typeof Ionicons.glyphMap;\n  label: string;\n  colors: {\n    surface: string;\n    border: string;\n    primary: string;\n    text: string;\n    textSecondary: string;\n  };\n}\n\nconst TabIcon: React.FC<TabIconProps> = ({ isFocused, iconName, label, colors }) => {\n  const scaleValue = useSharedValue(isFocused ? 1 : 0.9);\n  const opacityValue = useSharedValue(isFocused ? 1 : 0.6);\n\n  useEffect(() => {\n    scaleValue.value = withSpring(isFocused ? 1 : 0.9, {\n      damping: 15,\n      stiffness: 150,\n    });\n    opacityValue.value = withTiming(isFocused ? 1 : 0.6, { duration: 200 });\n  }, [isFocused, opacityValue, scaleValue]);\n\n  const animatedIconStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ scale: scaleValue.value }],\n      opacity: opacityValue.value,\n    };\n  });\n\n  const animatedTextStyle = useAnimatedStyle(() => {\n    return {\n      opacity: opacityValue.value,\n      transform: [\n        {\n          scale: interpolate(scaleValue.value, [0.9, 1], [0.85, 1]),\n        },\n      ],\n    };\n  });\n\n  return (\n    <View style={styles.iconContainer}>\n      <Animated.View style={animatedIconStyle}>\n        <Ionicons name={iconName} size={24} color={isFocused ? '#fff' : colors.text} />\n      </Animated.View>\n      <Animated.Text\n        style={[styles.label, animatedTextStyle, { color: isFocused ? '#fff' : colors.text }]}\n      >\n        {label}\n      </Animated.Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n  },\n  tabBar: {\n    flexDirection: 'row',\n    width: TAB_BAR_WIDTH,\n    height: 65,\n    borderRadius: 35,\n    marginBottom: 20,\n    position: 'relative',\n    overflow: 'hidden',\n    opacity: 0.98,\n  },\n  bubble: {\n    position: 'absolute',\n    width: TAB_WIDTH - 10,\n    height: 50,\n    borderRadius: 25,\n    top: 7.5,\n    left: 5,\n  },\n  tab: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1,\n  },\n  iconContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 4,\n  },\n  label: {\n    fontSize: 10,\n    fontWeight: '600',\n    letterSpacing: 0.3,\n  },\n});\n\nexport default BubbleTabBar;\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\ButtonContainer.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderTopWidth: 'hasBorder ? StyleSheet.hairlineWidth : 0' }","line":29,"column":9,"nodeType":"ObjectExpression","endLine":36,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, ViewStyle } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { spacing } from '../styles/theme';\n\ninterface ButtonContainerProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n  backgroundColor?: string;\n  borderColor?: string;\n  hasBorder?: boolean;\n}\n\nexport const ButtonContainer: React.FC<ButtonContainerProps> = ({\n  children,\n  style,\n  backgroundColor,\n  borderColor,\n  hasBorder = true,\n}) => {\n  const insets = useSafeAreaInsets();\n\n  // Calcul dynamique : insets.bottom + padding minimal, avec minimum de 90px\n  const dynamicPaddingBottom = Math.max(insets.bottom + spacing.lg + 10, 90);\n\n  return (\n    <View\n      style={[\n        {\n          paddingHorizontal: spacing.lg,\n          paddingTop: spacing.sm,\n          paddingBottom: dynamicPaddingBottom,\n          borderTopWidth: hasBorder ? StyleSheet.hairlineWidth : 0,\n          borderTopColor: borderColor,\n          backgroundColor,\n        },\n        style,\n      ]}\n    >\n      {children}\n    </View>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\ThemeChart.tsx","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":186,"column":4,"nodeType":null,"messageId":"insert","endLine":186,"endColumn":4,"fix":{"range":[4717,4717],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport Svg, { Circle, G } from 'react-native-svg';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { typography, spacing } from '../styles/theme';\nimport Animated, {\n  useAnimatedProps,\n  withTiming,\n  useSharedValue,\n  withDelay,\n  FadeInRight,\n} from 'react-native-reanimated';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\ninterface ThemeChartProps {\n  data: {\n    name: string;\n    value: number;\n    color: string;\n    percentage: number;\n  }[];\n  size?: number;\n  strokeWidth?: number;\n}\n\n// Composant séparé pour chaque segment du graphique\ninterface ChartSegmentProps {\n  segment: {\n    name: string;\n    color: string;\n    percentage: number;\n    startAngle: number;\n    angle: number;\n  };\n  index: number;\n  size: number;\n  radius: number;\n  circumference: number;\n  strokeWidth: number;\n}\n\nconst ChartSegment: React.FC<ChartSegmentProps> = ({\n  segment,\n  index,\n  size,\n  radius,\n  circumference,\n  strokeWidth,\n}) => {\n  const progress = useSharedValue(0);\n\n  useEffect(() => {\n    progress.value = withDelay(\n      index * 200,\n      withTiming(segment.percentage / 100, { duration: 1000 })\n    );\n  }, [index, segment.percentage, progress]);\n\n  const animatedProps = useAnimatedProps(() => {\n    const strokeLength = (segment.angle / 360) * circumference;\n    return {\n      strokeDashoffset: circumference - strokeLength * progress.value,\n    };\n  });\n\n  return (\n    <AnimatedCircle\n      cx={size / 2}\n      cy={size / 2}\n      r={radius}\n      stroke={segment.color}\n      strokeWidth={strokeWidth}\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeDasharray={`${(segment.angle / 360) * circumference} ${circumference}`}\n      animatedProps={animatedProps}\n      rotation={segment.startAngle}\n      origin={`${size / 2}, ${size / 2}`}\n    />\n  );\n};\n\nexport const ThemeChart: React.FC<ThemeChartProps> = ({ data, size = 200, strokeWidth = 30 }) => {\n  const { colors } = useTheme();\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  // Calculer les angles pour chaque segment\n  let currentAngle = -90; // Commencer en haut\n  const segments = data.map(item => {\n    const angle = (item.percentage / 100) * 360;\n    const segment = {\n      ...item,\n      startAngle: currentAngle,\n      endAngle: currentAngle + angle,\n      angle,\n    };\n    currentAngle += angle;\n    return segment;\n  });\n\n  return (\n    <View style={styles.container}>\n      <Svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <G rotation=\"-90\" origin={`${size / 2}, ${size / 2}`}>\n          {segments.map((segment, index) => (\n            <ChartSegment\n              key={segment.name}\n              segment={segment}\n              index={index}\n              size={size}\n              radius={radius}\n              circumference={circumference}\n              strokeWidth={strokeWidth}\n            />\n          ))}\n        </G>\n      </Svg>\n\n      {/* Centre du graphique */}\n      <View style={[styles.centerContent, { width: size, height: size }]}>\n        <Text style={[styles.centerTitle, { color: colors.text }]}>Répartition</Text>\n        <Text style={[styles.centerSubtitle, { color: colors.textSecondary }]}>par thème</Text>\n      </View>\n\n      {/* Légende */}\n      <View style={styles.legend}>\n        {data.map((item, index) => (\n          <Animated.View\n            key={item.name}\n            entering={FadeInRight.duration(500).delay(1000 + index * 100)}\n            style={styles.legendItem}\n          >\n            <View style={[styles.legendDot, { backgroundColor: item.color }]} />\n            <Text style={[styles.legendText, { color: colors.text }]}>{item.name}</Text>\n            <Text style={[styles.legendValue, { color: colors.textSecondary }]}>\n              {item.percentage.toFixed(0)}%\n            </Text>\n          </Animated.View>\n        ))}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  centerContent: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  centerTitle: {\n    ...typography.bodyBold,\n  },\n  centerSubtitle: {\n    ...typography.small,\n    marginTop: spacing.xs,\n  },\n  legend: {\n    marginTop: spacing.lg,\n    width: '100%',\n  },\n  legendItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.sm,\n  },\n  legendDot: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: spacing.sm,\n  },\n  legendText: {\n    ...typography.caption,\n    flex: 1,\n  },\n  legendValue: {\n    ...typography.caption,\n    fontWeight: '600',\n  },\n});","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\Timer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'animatedValue'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [animatedValue, duration]","fix":{"range":[748,758],"text":"[animatedValue, duration]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet, Animated } from 'react-native';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { typography } from '../styles/theme';\n\ninterface TimerProps {\n  duration: number; // en secondes\n  onTimeUp: () => void;\n  isPaused: boolean;\n  onTick?: (remainingTime: number) => void;\n}\n\nexport const Timer: React.FC<TimerProps> = ({ duration, onTimeUp, isPaused, onTick }) => {\n  const { colors } = useTheme();\n  const [timeLeft, setTimeLeft] = useState(duration);\n  const animatedValue = useRef(new Animated.Value(1)).current;\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    setTimeLeft(duration);\n    animatedValue.setValue(1);\n  }, [duration]);\n\n  // Appeler onTick dans un useEffect séparé pour éviter les mises à jour pendant le rendu\n  useEffect(() => {\n    if (onTick && timeLeft < duration) {\n      onTick(timeLeft);\n    }\n  }, [timeLeft, onTick, duration]);\n\n  useEffect(() => {\n    if (!isPaused && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          const newTime = prev - 1;\n\n          if (newTime <= 0) {\n            onTimeUp();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n\n      // Animation de la barre de progression\n      Animated.timing(animatedValue, {\n        toValue: 0,\n        duration: timeLeft * 1000,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      animatedValue.stopAnimation();\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isPaused, timeLeft, onTimeUp, animatedValue]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getTimerColor = () => {\n    const percentage = (timeLeft / duration) * 100;\n    if (percentage > 50) {\n      return colors.success;\n    }\n    if (percentage > 25) {\n      return '#F59E0B';\n    }\n    return colors.error;\n  };\n\n  const progressWidth = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0%', '100%'],\n  });\n\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.timeText, { color: getTimerColor() }]}>{formatTime(timeLeft)}</Text>\n      <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\n        <Animated.View\n          style={[\n            styles.progressFill,\n            {\n              width: progressWidth,\n              backgroundColor: getTimerColor(),\n            },\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  timeText: {\n    ...typography.h3,\n    fontVariant: ['tabular-nums'],\n    marginBottom: 8,\n  },\n  progressBar: {\n    width: 120,\n    height: 4,\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    borderRadius: 2,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\progress\\HistoryTab.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unused-vars').","line":3,"column":3,"severity":1,"nodeType":null,"fix":{"range":[63,124],"text":" "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchSessions' function makes the dependencies of useEffect Hook (at line 45) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fetchSessions' in its own useCallback() Hook.","line":47,"column":9,"nodeType":"VariableDeclarator","endLine":76,"endColumn":4},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFFFFF' }","line":212,"column":34,"nodeType":"ObjectExpression","endLine":212,"endColumn":54},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":212,"column":34,"nodeType":"ObjectExpression","endLine":212,"endColumn":54},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#10B981' }","line":222,"column":37,"nodeType":"ObjectExpression","endLine":222,"endColumn":67},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#10B981' }","line":222,"column":37,"nodeType":"ObjectExpression","endLine":222,"endColumn":67},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFFFFF' }","line":229,"column":38,"nodeType":"ObjectExpression","endLine":229,"endColumn":58},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":229,"column":38,"nodeType":"ObjectExpression","endLine":229,"endColumn":58},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#EF4444' }","line":239,"column":36,"nodeType":"ObjectExpression","endLine":239,"endColumn":66},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#EF4444' }","line":239,"column":36,"nodeType":"ObjectExpression","endLine":239,"endColumn":66},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFFFFF' }","line":246,"column":37,"nodeType":"ObjectExpression","endLine":246,"endColumn":57},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":246,"column":37,"nodeType":"ObjectExpression","endLine":246,"endColumn":57},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":464,"column":17,"nodeType":"ObjectExpression","endLine":468,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":512,"column":21,"nodeType":"ObjectExpression","endLine":516,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  Modal,\n  // ActivityIndicator removed - not used\n} from 'react-native';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport Animated, { FadeInDown } from 'react-native-reanimated';\nimport { progressService, SessionDetailed } from '../../services/progressService';\nimport { shadows, borderRadius } from '../../styles/theme';\n\ninterface SessionData {\n  id: number;\n  created_at: string;\n  nombre_questions: number;\n  nombre_reponses_correctes: number;\n  temps_total: number;\n  themes: string[];\n  sous_themes: string[];\n  score: number;\n  type_session: string;\n  statut: string;\n  niveau_moyen: number;\n}\n\ninterface HistoryTabProps {\n  userId: string;\n}\n\nexport const HistoryTab: React.FC<HistoryTabProps> = ({ userId }) => {\n  const { colors } = useTheme();\n  const [sessions, setSessions] = useState<SessionData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedSession, setSelectedSession] = useState<SessionData | null>(null);\n  const [filter, setFilter] = useState<'all' | 'success' | 'failed'>('all');\n\n  useEffect(() => {\n    void fetchSessions();\n  }, [userId, fetchSessions]);\n\n  const fetchSessions = async () => {\n    if (!userId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const detailedSessions = await progressService.getUserSessionsDetailed(userId, 50);\n\n      const formattedSessions = detailedSessions.map((session: SessionDetailed) => ({\n        id: session.session_id,\n        created_at: session.created_at,\n        nombre_questions: session.nombre_questions,\n        nombre_reponses_correctes: session.nombre_reponses_correctes,\n        temps_total: session.temps_total,\n        themes: session.themes || [],\n        sous_themes: session.sous_themes || [],\n        score: Number(session.score),\n        type_session: session.type_session,\n        statut: session.statut,\n        niveau_moyen: Number(session.niveau_moyen),\n      }));\n\n      setSessions(formattedSessions);\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n\n    if (diffInHours < 1) {\n      return \"Il y a moins d'une heure\";\n    }\n    if (diffInHours < 24) {\n      return `Il y a ${diffInHours} heure${diffInHours > 1 ? 's' : ''}`;\n    }\n    if (diffInHours < 48) {\n      return 'Hier';\n    }\n    if (diffInHours < 168) {\n      return `Il y a ${Math.floor(diffInHours / 24)} jours`;\n    }\n\n    return date.toLocaleDateString('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,\n    });\n  };\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) {\n      return '#10B981';\n    }\n    if (score >= 60) {\n      return '#F59E0B';\n    }\n    return '#EF4444';\n  };\n\n  const filteredSessions = sessions.filter(session => {\n    if (filter === 'all') {\n      return true;\n    }\n    if (filter === 'success') {\n      return session.score >= 70;\n    }\n    if (filter === 'failed') {\n      return session.score < 70;\n    }\n    return true;\n  });\n\n  const renderSession = ({ item, index }: { item: SessionData; index: number }) => {\n    const scoreColor = getScoreColor(item.score);\n\n    return (\n      <Animated.View entering={FadeInDown.delay(index * 50)}>\n        <View style={[styles.sessionCard, { backgroundColor: colors.surface }, shadows.sm]}>\n          <TouchableOpacity onPress={() => setSelectedSession(item)} activeOpacity={0.7}>\n            <View style={styles.sessionHeader}>\n              <View style={styles.sessionInfo}>\n                <Text style={[styles.sessionDate, { color: colors.textSecondary }]}>\n                  {formatDate(item.created_at)}\n                </Text>\n                <View style={styles.themeTags}>\n                  {item.themes.slice(0, 2).map((theme, idx) => (\n                    <View\n                      key={idx}\n                      style={[styles.tag, { backgroundColor: colors.primary + '20' }]}\n                    >\n                      <Text style={[styles.tagText, { color: colors.primary }]}>{theme}</Text>\n                    </View>\n                  ))}\n                  {item.themes.length > 2 && (\n                    <Text style={[styles.moreThemes, { color: colors.textSecondary }]}>\n                      +{item.themes.length - 2}\n                    </Text>\n                  )}\n                </View>\n              </View>\n              <View style={[styles.scoreCircle, { backgroundColor: scoreColor + '20' }]}>\n                <Text style={[styles.scoreText, { color: scoreColor }]}>{item.score}%</Text>\n              </View>\n            </View>\n\n            <View style={styles.sessionStats}>\n              <View style={styles.statItem}>\n                <Ionicons name=\"help-circle-outline\" size={16} color={colors.textSecondary} />\n                <Text style={[styles.statText, { color: colors.text }]}>\n                  {item.nombre_reponses_correctes}/{item.nombre_questions}\n                </Text>\n              </View>\n              <View style={styles.statItem}>\n                <Ionicons name=\"time-outline\" size={16} color={colors.textSecondary} />\n                <Text style={[styles.statText, { color: colors.text }]}>\n                  {formatDuration(item.temps_total)}\n                </Text>\n              </View>\n              <View style={styles.statItem}>\n                <Ionicons name=\"options-outline\" size={16} color={colors.textSecondary} />\n                <Text style={[styles.statText, { color: colors.text }]}>{item.type_session}</Text>\n              </View>\n            </View>\n\n            {item.statut === 'abandonnee' && (\n              <View style={[styles.abandonedBadge, { backgroundColor: colors.error + '20' }]}>\n                <Text style={[styles.abandonedText, { color: colors.error }]}>\n                  Session abandonnée\n                </Text>\n              </View>\n            )}\n          </TouchableOpacity>\n        </View>\n      </Animated.View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Filtres */}\n      <View style={styles.filterContainer}>\n        <TouchableOpacity\n          onPress={() => setFilter('all')}\n          style={[\n            styles.filterButton,\n            filter === 'all' && { backgroundColor: colors.primary },\n            filter !== 'all' && { backgroundColor: colors.surface },\n          ]}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              filter === 'all' ? { color: '#FFFFFF' } : { color: colors.text },\n            ]}\n          >\n            Toutes\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => setFilter('success')}\n          style={[\n            styles.filterButton,\n            filter === 'success' && { backgroundColor: '#10B981' },\n            filter !== 'success' && { backgroundColor: colors.surface },\n          ]}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              filter === 'success' ? { color: '#FFFFFF' } : { color: colors.text },\n            ]}\n          >\n            Réussies\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => setFilter('failed')}\n          style={[\n            styles.filterButton,\n            filter === 'failed' && { backgroundColor: '#EF4444' },\n            filter !== 'failed' && { backgroundColor: colors.surface },\n          ]}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              filter === 'failed' ? { color: '#FFFFFF' } : { color: colors.text },\n            ]}\n          >\n            Échouées\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Liste des sessions */}\n      <FlatList\n        data={filteredSessions}\n        renderItem={renderSession}\n        keyExtractor={item => item.id.toString()}\n        contentContainerStyle={styles.listContainer}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <Ionicons name=\"folder-open-outline\" size={64} color={colors.textSecondary} />\n            <Text style={[styles.emptyText, { color: colors.textSecondary }]}>\n              Aucune session trouvée\n            </Text>\n            <Text style={[styles.emptySubtext, { color: colors.textSecondary }]}>\n              Commencez un entraînement pour voir votre historique\n            </Text>\n          </View>\n        }\n      />\n\n      {/* Modal de détails */}\n      <Modal\n        visible={selectedSession !== null}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setSelectedSession(null)}\n      >\n        {selectedSession && (\n          <View style={styles.modalOverlay}>\n            <View style={[styles.modalContent, { backgroundColor: colors.surface }]}>\n              <View style={styles.modalHeader}>\n                <Text style={[styles.modalTitle, { color: colors.text }]}>\n                  Détails de la session\n                </Text>\n                <TouchableOpacity onPress={() => setSelectedSession(null)}>\n                  <Ionicons name=\"close\" size={24} color={colors.text} />\n                </TouchableOpacity>\n              </View>\n\n              <View style={styles.modalBody}>\n                <Text style={[styles.modalDate, { color: colors.textSecondary }]}>\n                  {new Date(selectedSession.created_at).toLocaleDateString('fr-FR', {\n                    weekday: 'long',\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                  })}\n                </Text>\n\n                <View style={styles.modalStats}>\n                  <View style={styles.modalStatItem}>\n                    <Text style={[styles.modalStatLabel, { color: colors.textSecondary }]}>\n                      Score final\n                    </Text>\n                    <Text\n                      style={[\n                        styles.modalStatValue,\n                        { color: getScoreColor(selectedSession.score) },\n                      ]}\n                    >\n                      {selectedSession.score}%\n                    </Text>\n                  </View>\n                  <View style={styles.modalStatItem}>\n                    <Text style={[styles.modalStatLabel, { color: colors.textSecondary }]}>\n                      Questions\n                    </Text>\n                    <Text style={[styles.modalStatValue, { color: colors.text }]}>\n                      {selectedSession.nombre_questions}\n                    </Text>\n                  </View>\n                  <View style={styles.modalStatItem}>\n                    <Text style={[styles.modalStatLabel, { color: colors.textSecondary }]}>\n                      Durée\n                    </Text>\n                    <Text style={[styles.modalStatValue, { color: colors.text }]}>\n                      {formatDuration(selectedSession.temps_total)}\n                    </Text>\n                  </View>\n                </View>\n\n                <TouchableOpacity\n                  style={[styles.reviewButton, { backgroundColor: colors.primary }]}\n                  onPress={() => {\n                    setSelectedSession(null);\n                    // Navigation vers la révision\n                  }}\n                >\n                  <Text style={styles.reviewButtonText}>Revoir les questions</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        )}\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  filterContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    marginBottom: 16,\n    gap: 10,\n  },\n  filterButton: {\n    flex: 1,\n    paddingVertical: 8,\n    borderRadius: borderRadius.xl,\n    alignItems: 'center',\n  },\n  filterText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  listContainer: {\n    paddingHorizontal: 20,\n    paddingBottom: 120,\n  },\n  sessionCard: {\n    padding: 16,\n    borderRadius: borderRadius.lg,\n    marginBottom: 12,\n  },\n  sessionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  sessionInfo: {\n    flex: 1,\n  },\n  sessionDate: {\n    fontSize: 12,\n    marginBottom: 6,\n  },\n  themeTags: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 6,\n    alignItems: 'center',\n  },\n  tag: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: borderRadius.sm,\n  },\n  tagText: {\n    fontSize: 11,\n    fontWeight: '500',\n  },\n  moreThemes: {\n    fontSize: 11,\n    marginLeft: 4,\n  },\n  scoreCircle: {\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  scoreText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  sessionStats: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  statItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  statText: {\n    fontSize: 13,\n  },\n  abandonedBadge: {\n    marginTop: 8,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: borderRadius.sm,\n    alignSelf: 'flex-start',\n  },\n  abandonedText: {\n    fontSize: 11,\n    fontWeight: '600',\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    paddingVertical: 60,\n  },\n  emptyText: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginTop: 16,\n  },\n  emptySubtext: {\n    fontSize: 14,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-end',\n  },\n  modalContent: {\n    borderTopLeftRadius: borderRadius.xl,\n    borderTopRightRadius: borderRadius.xl,\n    padding: 24,\n    minHeight: 300,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  modalBody: {\n    gap: 20,\n  },\n  modalDate: {\n    fontSize: 14,\n  },\n  modalStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  modalStatItem: {\n    alignItems: 'center',\n  },\n  modalStatLabel: {\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  modalStatValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  reviewButton: {\n    paddingVertical: 14,\n    borderRadius: borderRadius.md,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  reviewButtonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\progress\\ObjectivesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAnimatedStyle' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useSharedValue' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withSpring' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'objectivesData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":57,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":57,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1508,1508],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1508,1508],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchObjectivesAndBadges'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchObjectivesAndBadges, userId]","fix":{"range":[1542,1550],"text":"[fetchObjectivesAndBadges, userId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3638,3641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3638,3641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#EF4444' }","line":188,"column":51,"nodeType":"ObjectExpression","endLine":188,"endColumn":71},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#EF4444' }","line":188,"column":51,"nodeType":"ObjectExpression","endLine":188,"endColumn":71},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: \"isActive ? '#EF4444' : colors.border\" }","line":205,"column":19,"nodeType":"ObjectExpression","endLine":207,"endColumn":20},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: \"isActive ? '#EF4444' : colors.border\" }","line":205,"column":19,"nodeType":"ObjectExpression","endLine":207,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7520,7523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7520,7523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: \"isCompleted ? '#10B981' : objective.color\" }","line":250,"column":27,"nodeType":"ObjectExpression","endLine":253,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: \"isCompleted ? '#10B981' : objective.color\" }","line":250,"column":27,"nodeType":"ObjectExpression","endLine":253,"endColumn":28},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'badge.earned ? 1 : 0.7' }","line":281,"column":19,"nodeType":"ObjectExpression","endLine":284,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10151,10154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10151,10154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 120 }","line":349,"column":20,"nodeType":"ObjectExpression","endLine":349,"endColumn":35}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n} from 'react-native';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Animated, {\r\n  FadeInDown,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withSpring,\r\n} from 'react-native-reanimated';\r\nimport Svg, { Circle } from 'react-native-svg';\r\nimport { shadows, borderRadius } from '../../styles/theme';\r\nimport { progressService, UserObjectives } from '../../services/progressService';\r\n\r\ninterface Badge {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  color: string;\r\n  earned: boolean;\r\n  progress: number;\r\n  maxProgress: number;\r\n  earnedDate?: string;\r\n}\r\n\r\ninterface DailyObjective {\r\n  id: string;\r\n  title: string;\r\n  current: number;\r\n  target: number;\r\n  icon: string;\r\n  color: string;\r\n}\r\n\r\ninterface ObjectivesTabProps {\r\n  userId: string;\r\n}\r\n\r\nexport const ObjectivesTab: React.FC<ObjectivesTabProps> = ({ userId }) => {\r\n  const { colors } = useTheme();\r\n  const [dailyObjectives, setDailyObjectives] = useState<DailyObjective[]>([]);\r\n  const [badges, setBadges] = useState<Badge[]>([]);\r\n  const [streak, setStreak] = useState(0);\r\n  const [bestStreak, setBestStreak] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [objectivesData, setObjectivesData] = useState<UserObjectives | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchObjectivesAndBadges();\r\n  }, [userId]);\r\n\r\n  const fetchObjectivesAndBadges = async () => {\r\n    if (!userId) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await progressService.getUserObjectivesAndBadges(userId);\r\n\r\n      if (data) {\r\n        setObjectivesData(data);\r\n\r\n        // Configuration des objectifs quotidiens\r\n        setDailyObjectives([\r\n          {\r\n            id: '1',\r\n            title: 'Questions du jour',\r\n            current: data.questions_aujourdhui,\r\n            target: data.objectif_quotidien || 20,\r\n            icon: 'help-circle',\r\n            color: '#3B82F6',\r\n          },\r\n          {\r\n            id: '2',\r\n            title: \"Temps d'étude\",\r\n            current: Math.floor(data.temps_aujourdhui / 60),\r\n            target: 30,\r\n            icon: 'time',\r\n            color: '#10B981',\r\n          },\r\n          {\r\n            id: '3',\r\n            title: 'Taux de réussite',\r\n            current: Math.round(data.taux_reussite_aujourdhui),\r\n            target: 80,\r\n            icon: 'checkmark-circle',\r\n            color: '#F59E0B',\r\n          },\r\n        ]);\r\n\r\n        // Configuration des badges\r\n        const badgesList: Badge[] = [];\r\n        Object.entries(data.badges_gagnes).forEach(([key, earned]) => {\r\n          const badgeInfo = progressService.getBadgeInfo(key);\r\n          badgesList.push({\r\n            id: key,\r\n            name: badgeInfo.name,\r\n            description: badgeInfo.description,\r\n            icon: badgeInfo.icon,\r\n            color: badgeInfo.color,\r\n            earned: earned,\r\n            progress: earned ? 1 : 0,\r\n            maxProgress: 1,\r\n            earnedDate: earned ? new Date().toISOString() : undefined,\r\n          });\r\n        });\r\n        setBadges(badgesList);\r\n\r\n        setStreak(data.serie_actuelle);\r\n        setBestStreak(data.meilleure_serie);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching objectives and badges:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const CircularProgress = ({ progress, max, radius = 30, strokeWidth = 4, color }: any) => {\r\n    const circumference = 2 * Math.PI * radius;\r\n    const percentage = (progress / max) * 100;\r\n    const strokeDashoffset = circumference - (percentage / 100) * circumference;\r\n\r\n    return (\r\n      <Svg width={radius * 2 + strokeWidth} height={radius * 2 + strokeWidth}>\r\n        <Circle\r\n          cx={radius + strokeWidth / 2}\r\n          cy={radius + strokeWidth / 2}\r\n          r={radius}\r\n          stroke={colors.border}\r\n          strokeWidth={strokeWidth}\r\n          fill=\"none\"\r\n        />\r\n        <Circle\r\n          cx={radius + strokeWidth / 2}\r\n          cy={radius + strokeWidth / 2}\r\n          r={radius}\r\n          stroke={color}\r\n          strokeWidth={strokeWidth}\r\n          fill=\"none\"\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={strokeDashoffset}\r\n          strokeLinecap=\"round\"\r\n          transform={`rotate(-90 ${radius + strokeWidth / 2} ${radius + strokeWidth / 2})`}\r\n        />\r\n      </Svg>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={[styles.container, styles.centerContent]}>\r\n        <ActivityIndicator size=\"large\" color={colors.primary} />\r\n        <Text style={[styles.loadingText, { color: colors.textSecondary }]}>\r\n          Chargement des objectifs...\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView\r\n      style={styles.container}\r\n      showsVerticalScrollIndicator={false}\r\n      contentContainerStyle={styles.scrollContent}\r\n    >\r\n      {/* Série actuelle */}\r\n      <Animated.View\r\n        entering={FadeInDown}\r\n        style={[styles.streakCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n      >\r\n        <View style={styles.streakHeader}>\r\n          <View style={[styles.streakIconContainer, { backgroundColor: '#EF4444' + '20' }]}>\r\n            <Ionicons name=\"flame\" size={32} color=\"#EF4444\" />\r\n          </View>\r\n          <View style={styles.streakInfo}>\r\n            <Text style={[styles.streakTitle, { color: colors.text }]}>Série en cours</Text>\r\n            <View style={styles.streakNumbers}>\r\n              <Text style={[styles.streakCurrent, { color: '#EF4444' }]}>{streak}</Text>\r\n              <Text style={[styles.streakDays, { color: colors.text }]}> jours</Text>\r\n            </View>\r\n            <Text style={[styles.streakBest, { color: colors.textSecondary }]}>\r\n              Record : {bestStreak} jours\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.weekIndicator}>\r\n          {[...Array(7)].map((_, index) => {\r\n            const isActive = index < streak;\r\n            return (\r\n              <View\r\n                key={index}\r\n                style={[\r\n                  styles.dayIndicator,\r\n                  {\r\n                    backgroundColor: isActive ? '#EF4444' : colors.border,\r\n                  },\r\n                ]}\r\n              />\r\n            );\r\n          })}\r\n        </View>\r\n      </Animated.View>\r\n\r\n      {/* Objectifs quotidiens */}\r\n      <View style={styles.section}>\r\n        <Text style={[styles.sectionTitle, { color: colors.text }]}>Objectifs du jour</Text>\r\n        <View style={styles.objectivesContainer}>\r\n          {dailyObjectives.map((objective, index) => {\r\n            const progress = (objective.current / objective.target) * 100;\r\n            const isCompleted = objective.current >= objective.target;\r\n\r\n            return (\r\n              <Animated.View key={objective.id} entering={FadeInDown.delay(index * 100)}>\r\n                <View\r\n                  style={[styles.objectiveCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n                >\r\n                  <View style={styles.objectiveHeader}>\r\n                    <View\r\n                      style={[styles.objectiveIcon, { backgroundColor: objective.color + '20' }]}\r\n                    >\r\n                      <Ionicons name={objective.icon as any} size={24} color={objective.color} />\r\n                    </View>\r\n                    {isCompleted && (\r\n                      <View style={styles.completedBadge}>\r\n                        <Ionicons name=\"checkmark-circle\" size={20} color=\"#10B981\" />\r\n                      </View>\r\n                    )}\r\n                  </View>\r\n\r\n                  <Text style={[styles.objectiveTitle, { color: colors.text }]}>\r\n                    {objective.title}\r\n                  </Text>\r\n\r\n                  <View style={styles.progressContainer}>\r\n                    <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\r\n                      <Animated.View\r\n                        style={[\r\n                          styles.progressFill,\r\n                          {\r\n                            backgroundColor: isCompleted ? '#10B981' : objective.color,\r\n                            width: `${Math.min(progress, 100)}%`,\r\n                          },\r\n                        ]}\r\n                      />\r\n                    </View>\r\n                    <Text style={[styles.progressText, { color: colors.textSecondary }]}>\r\n                      {objective.current}/{objective.target}\r\n                    </Text>\r\n                  </View>\r\n                </View>\r\n              </Animated.View>\r\n            );\r\n          })}\r\n        </View>\r\n      </View>\r\n\r\n      {/* Badges */}\r\n      <View style={styles.section}>\r\n        <Text style={[styles.sectionTitle, { color: colors.text }]}>Badges & Récompenses</Text>\r\n        <View style={styles.badgesGrid}>\r\n          {badges.map((badge, index) => (\r\n            <Animated.View\r\n              key={badge.id}\r\n              entering={FadeInDown.delay(100 + index * 50)}\r\n              style={styles.badgeWrapper}\r\n            >\r\n              <View\r\n                style={[\r\n                  styles.badgeCard,\r\n                  {\r\n                    backgroundColor: colors.surface,\r\n                    opacity: badge.earned ? 1 : 0.7,\r\n                  },\r\n                  shadows.sm,\r\n                ]}\r\n              >\r\n                <TouchableOpacity activeOpacity={0.8}>\r\n                  <View style={styles.badgeContent}>\r\n                    <View\r\n                      style={[\r\n                        styles.badgeIconContainer,\r\n                        {\r\n                          backgroundColor: badge.earned ? badge.color + '20' : colors.surface,\r\n                        },\r\n                      ]}\r\n                    >\r\n                      {badge.earned ? (\r\n                        <Ionicons name={badge.icon as any} size={32} color={badge.color} />\r\n                      ) : (\r\n                        <View style={styles.badgeProgressContainer}>\r\n                          <CircularProgress\r\n                            progress={badge.progress}\r\n                            max={badge.maxProgress}\r\n                            color={badge.color}\r\n                          />\r\n                          <Text style={[styles.badgeProgressText, { color: colors.text }]}>\r\n                            {Math.round((badge.progress / badge.maxProgress) * 100)}%\r\n                          </Text>\r\n                        </View>\r\n                      )}\r\n                    </View>\r\n\r\n                    <Text\r\n                      style={[\r\n                        styles.badgeName,\r\n                        { color: badge.earned ? colors.text : colors.textSecondary },\r\n                      ]}\r\n                      numberOfLines={1}\r\n                    >\r\n                      {badge.name}\r\n                    </Text>\r\n\r\n                    <Text\r\n                      style={[styles.badgeDescription, { color: colors.textSecondary }]}\r\n                      numberOfLines={2}\r\n                    >\r\n                      {badge.description}\r\n                    </Text>\r\n\r\n                    {badge.earned && badge.earnedDate && (\r\n                      <Text style={[styles.badgeDate, { color: badge.color }]}>✓ Obtenu</Text>\r\n                    )}\r\n\r\n                    {!badge.earned && (\r\n                      <Text style={[styles.badgeProgress, { color: colors.textSecondary }]}>\r\n                        {badge.progress}/{badge.maxProgress}\r\n                      </Text>\r\n                    )}\r\n                  </View>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </Animated.View>\r\n          ))}\r\n        </View>\r\n      </View>\r\n\r\n      {/* Espace pour la tabbar */}\r\n      <View style={{ height: 120 }} />\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  scrollContent: {\r\n    paddingBottom: 20,\r\n  },\r\n  streakCard: {\r\n    margin: 20,\r\n    padding: 20,\r\n    borderRadius: borderRadius.xl,\r\n  },\r\n  streakHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  streakIconContainer: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginRight: 16,\r\n  },\r\n  streakInfo: {\r\n    flex: 1,\r\n  },\r\n  streakTitle: {\r\n    fontSize: 14,\r\n    marginBottom: 4,\r\n  },\r\n  streakNumbers: {\r\n    flexDirection: 'row',\r\n    alignItems: 'baseline',\r\n  },\r\n  streakCurrent: {\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n  },\r\n  streakDays: {\r\n    fontSize: 18,\r\n  },\r\n  streakBest: {\r\n    fontSize: 12,\r\n    marginTop: 4,\r\n  },\r\n  weekIndicator: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    gap: 8,\r\n  },\r\n  dayIndicator: {\r\n    flex: 1,\r\n    height: 6,\r\n    borderRadius: borderRadius.xs,\r\n  },\r\n  section: {\r\n    marginBottom: 20,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    marginHorizontal: 20,\r\n    marginBottom: 16,\r\n  },\r\n  objectivesContainer: {\r\n    paddingHorizontal: 20,\r\n    gap: 12,\r\n  },\r\n  objectiveCard: {\r\n    padding: 16,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  objectiveHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 12,\r\n  },\r\n  objectiveIcon: {\r\n    width: 44,\r\n    height: 44,\r\n    borderRadius: 22,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  completedBadge: {\r\n    position: 'absolute',\r\n    right: 0,\r\n    top: 0,\r\n  },\r\n  objectiveTitle: {\r\n    fontSize: 16,\r\n    fontWeight: '500',\r\n    marginBottom: 12,\r\n  },\r\n  progressContainer: {\r\n    gap: 8,\r\n  },\r\n  progressBar: {\r\n    height: 8,\r\n    borderRadius: borderRadius.xs,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    borderRadius: borderRadius.xs,\r\n  },\r\n  progressText: {\r\n    fontSize: 12,\r\n    textAlign: 'right',\r\n  },\r\n  badgesGrid: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    paddingHorizontal: 15,\r\n    gap: 10,\r\n  },\r\n  badgeWrapper: {\r\n    width: '30%',\r\n  },\r\n  badgeCard: {\r\n    padding: 12,\r\n    borderRadius: borderRadius.lg,\r\n    alignItems: 'center',\r\n  },\r\n  badgeContent: {\r\n    alignItems: 'center',\r\n  },\r\n  badgeIconContainer: {\r\n    width: 64,\r\n    height: 64,\r\n    borderRadius: 32,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  badgeProgressContainer: {\r\n    position: 'relative',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  badgeProgressText: {\r\n    position: 'absolute',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n  badgeName: {\r\n    fontSize: 13,\r\n    fontWeight: '600',\r\n    marginBottom: 4,\r\n    textAlign: 'center',\r\n  },\r\n  badgeDescription: {\r\n    fontSize: 10,\r\n    textAlign: 'center',\r\n    lineHeight: 14,\r\n    marginBottom: 4,\r\n  },\r\n  badgeDate: {\r\n    fontSize: 11,\r\n    fontWeight: '600',\r\n  },\r\n  badgeProgress: {\r\n    fontSize: 11,\r\n  },\r\n  centerContent: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    marginTop: 12,\r\n    fontSize: 14,\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\progress\\OverviewTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2026,2029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2026,2029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'opacity' is assigned a value but never used. Allowed unused args must match /^_/u.","line":103,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'opacity' is assigned a value but never used. Allowed unused args must match /^_/u.","line":104,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":35}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, Dimensions, ScrollView } from 'react-native';\nimport { LineChart } from 'react-native-chart-kit';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport Animated, { FadeInDown } from 'react-native-reanimated';\nimport { shadows, borderRadius } from '../../styles/theme';\n\nconst { width } = Dimensions.get('window');\n\ninterface OverviewTabProps {\n  weeklyData: any;\n  totalStats: {\n    totalSessions: number;\n    totalQuestions: number;\n    averageScore: number;\n    totalTime: number;\n    streak: number;\n    bestScore: number;\n  };\n}\n\nexport const OverviewTab: React.FC<OverviewTabProps> = ({ weeklyData, totalStats }) => {\n  const { colors } = useTheme();\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}min`;\n    }\n    return `${mins} min`;\n  };\n\n  const quickStats = [\n    {\n      icon: 'trophy',\n      value: `${totalStats.bestScore}%`,\n      label: 'Meilleur score',\n      color: '#FFD700',\n    },\n    {\n      icon: 'flame',\n      value: `${totalStats.streak}`,\n      label: 'Jours consécutifs',\n      color: '#FF6B6B',\n    },\n    {\n      icon: 'trending-up',\n      value: `${totalStats.averageScore}%`,\n      label: 'Moyenne',\n      color: '#4ECDC4',\n    },\n  ];\n\n  return (\n    <ScrollView\n      style={styles.container}\n      showsVerticalScrollIndicator={false}\n      contentContainerStyle={styles.scrollContent}\n    >\n      {/* Quick Stats Row */}\n      <View style={styles.quickStatsRow}>\n        {quickStats.map((stat, index) => (\n          <Animated.View\n            key={stat.label}\n            entering={FadeInDown.delay(index * 100)}\n            style={[styles.quickStatCard, { backgroundColor: colors.surface }, shadows.sm]}\n          >\n            <View style={[styles.iconContainer, { backgroundColor: `${stat.color}15` }]}>\n              <Ionicons name={stat.icon as any} size={24} color={stat.color} />\n            </View>\n            <Text style={[styles.quickStatValue, { color: colors.text }]}>{stat.value}</Text>\n            <Text style={[styles.quickStatLabel, { color: colors.textSecondary }]}>\n              {stat.label}\n            </Text>\n          </Animated.View>\n        ))}\n      </View>\n\n      {/* Performance Chart */}\n      <Animated.View\n        entering={FadeInDown.delay(300)}\n        style={[styles.chartCard, { backgroundColor: colors.surface }, shadows.sm]}\n      >\n        <View style={styles.chartHeader}>\n          <Text style={[styles.chartTitle, { color: colors.text }]}>Performance hebdomadaire</Text>\n          <View style={[styles.badge, { backgroundColor: `${colors.primary}15` }]}>\n            <Text style={[styles.badgeText, { color: colors.primary }]}>7 derniers jours</Text>\n          </View>\n        </View>\n\n        {weeklyData.datasets[0].data.some((val: number) => val > 0) ? (\n          <LineChart\n            data={weeklyData}\n            width={width - 60}\n            height={200}\n            chartConfig={{\n              backgroundColor: colors.surface,\n              backgroundGradientFrom: colors.surface,\n              backgroundGradientTo: colors.surface,\n              decimalPlaces: 0,\n              color: (opacity = 1) => colors.primary,\n              labelColor: (opacity = 1) => colors.textSecondary,\n              style: {\n                borderRadius: 16,\n              },\n              propsForDots: {\n                r: '6',\n                strokeWidth: '2',\n                stroke: colors.primary,\n              },\n              propsForBackgroundLines: {\n                strokeDasharray: '5, 5',\n                stroke: colors.border,\n                strokeOpacity: 0.3,\n              },\n            }}\n            bezier\n            style={styles.chart}\n            withVerticalLabels={true}\n            withHorizontalLabels={true}\n            withInnerLines={true}\n            withOuterLines={false}\n            withVerticalLines={false}\n            withHorizontalLines={true}\n          />\n        ) : (\n          <View style={styles.noDataContainer}>\n            <Ionicons name=\"bar-chart-outline\" size={48} color={colors.textSecondary} />\n            <Text style={[styles.noDataText, { color: colors.textSecondary }]}>\n              Pas encore de données cette semaine\n            </Text>\n            <Text style={[styles.noDataSubtext, { color: colors.textSecondary }]}>\n              Commencez un entraînement pour voir vos progrès\n            </Text>\n          </View>\n        )}\n      </Animated.View>\n\n      {/* Main Stats Grid */}\n      <View style={styles.statsGrid}>\n        <Animated.View\n          entering={FadeInDown.delay(400)}\n          style={[styles.statCard, { backgroundColor: colors.surface }, shadows.sm]}\n        >\n          <Ionicons name=\"school-outline\" size={32} color={colors.primary} />\n          <Text style={[styles.statValue, { color: colors.text }]}>{totalStats.totalSessions}</Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Sessions totales</Text>\n        </Animated.View>\n\n        <Animated.View\n          entering={FadeInDown.delay(500)}\n          style={[styles.statCard, { backgroundColor: colors.surface }, shadows.sm]}\n        >\n          <Ionicons name=\"help-circle-outline\" size={32} color={colors.primary} />\n          <Text style={[styles.statValue, { color: colors.text }]}>\n            {totalStats.totalQuestions}\n          </Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>\n            Questions répondues\n          </Text>\n        </Animated.View>\n\n        <Animated.View\n          entering={FadeInDown.delay(600)}\n          style={[styles.statCard, { backgroundColor: colors.surface }, shadows.sm]}\n        >\n          <Ionicons name=\"checkmark-circle-outline\" size={32} color={colors.primary} />\n          <Text style={[styles.statValue, { color: colors.text }]}>{totalStats.averageScore}%</Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Taux de réussite</Text>\n        </Animated.View>\n\n        <Animated.View\n          entering={FadeInDown.delay(700)}\n          style={[styles.statCard, { backgroundColor: colors.surface }, shadows.sm]}\n        >\n          <Ionicons name=\"time-outline\" size={32} color={colors.primary} />\n          <Text style={[styles.statValue, { color: colors.text }]}>\n            {formatTime(totalStats.totalTime)}\n          </Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Temps total</Text>\n        </Animated.View>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    paddingBottom: 120,\n  },\n  quickStatsRow: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    marginBottom: 20,\n    marginTop: 10,\n    gap: 12,\n  },\n  quickStatCard: {\n    flex: 1,\n    padding: 12,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n  },\n  iconContainer: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  quickStatValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  quickStatLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n  },\n  chartCard: {\n    marginHorizontal: 20,\n    marginBottom: 20,\n    padding: 20,\n    borderRadius: borderRadius.xl,\n  },\n  chartHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: borderRadius.md,\n  },\n  badgeText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  chart: {\n    marginVertical: 8,\n    borderRadius: 16,\n  },\n  noDataContainer: {\n    height: 200,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  noDataText: {\n    fontSize: 16,\n    marginTop: 12,\n    fontWeight: '500',\n  },\n  noDataSubtext: {\n    fontSize: 14,\n    marginTop: 4,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 15,\n    gap: 10,\n  },\n  statCard: {\n    width: '47%',\n    padding: 20,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\progress\\SegmentedControl.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'translateX'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [selectedIndex, segments.length, containerWidth, translateX]","fix":{"range":[1094,1142],"text":"[selectedIndex, segments.length, containerWidth, translateX]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"isDark ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.03)'\",\n  borderColor: \"isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.06)'\"\n}","line":48,"column":11,"nodeType":"ObjectExpression","endLine":51,"endColumn":12},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: {\n  backgroundColor: \"isDark ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.03)'\",\n  borderColor: \"isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.06)'\"\n}","line":48,"column":11,"nodeType":"ObjectExpression","endLine":51,"endColumn":12},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  color: 'selectedIndex === index\\n' +\n    \"                      ? '#FFFFFF'\\n\" +\n    '                      : isDark\\n' +\n    '                        ? colors.text\\n' +\n    '                        : colors.textSecondary',\n  fontWeight: \"selectedIndex === index ? '600' : '400'\"\n}","line":74,"column":17,"nodeType":"ObjectExpression","endLine":82,"endColumn":18},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: {\n  color: 'selectedIndex === index\\n' +\n    \"                      ? '#FFFFFF'\\n\" +\n    '                      : isDark\\n' +\n    '                        ? colors.text\\n' +\n    '                        : colors.textSecondary'\n}","line":74,"column":17,"nodeType":"ObjectExpression","endLine":82,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, LayoutChangeEvent } from 'react-native';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\nimport { useTheme } from '../../contexts/ThemeContext';\n\ninterface SegmentedControlProps {\n  segments: string[];\n  selectedIndex: number;\n  onIndexChange: (index: number) => void;\n}\n\nconst SLIDER_PADDING = 3;\n\nexport const SegmentedControl: React.FC<SegmentedControlProps> = ({\n  segments,\n  selectedIndex,\n  onIndexChange,\n}) => {\n  const { colors, isDark } = useTheme();\n  const translateX = useSharedValue(0);\n  const [containerWidth, setContainerWidth] = useState(0);\n\n  const handleLayout = (event: LayoutChangeEvent) => {\n    setContainerWidth(event.nativeEvent.layout.width);\n  };\n\n  React.useEffect(() => {\n    if (containerWidth > 0) {\n      const segmentWidth = (containerWidth - SLIDER_PADDING * 2) / segments.length;\n      translateX.value = withSpring(selectedIndex * segmentWidth, {\n        damping: 20,\n        stiffness: 150,\n      });\n    }\n  }, [selectedIndex, segments.length, containerWidth]);\n\n  const sliderStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: translateX.value }],\n    width: containerWidth > 0 ? (containerWidth - SLIDER_PADDING * 2) / segments.length : 0,\n  }));\n\n  return (\n    <View style={styles.wrapper}>\n      <View\n        onLayout={handleLayout}\n        style={[\n          styles.container,\n          {\n            backgroundColor: isDark ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.03)',\n            borderColor: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.06)',\n          },\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.slider,\n            sliderStyle,\n            {\n              backgroundColor: colors.primary,\n              shadowColor: colors.primary,\n            },\n          ]}\n        />\n        {segments.map((segment, index) => (\n          <TouchableOpacity\n            key={segment}\n            style={styles.segment}\n            onPress={() => onIndexChange(index)}\n            activeOpacity={0.7}\n          >\n            <Text\n              style={[\n                styles.segmentText,\n                {\n                  color:\n                    selectedIndex === index\n                      ? '#FFFFFF'\n                      : isDark\n                        ? colors.text\n                        : colors.textSecondary,\n                  fontWeight: selectedIndex === index ? '600' : '400',\n                },\n              ]}\n            >\n              {segment}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    paddingHorizontal: 20,\n    marginVertical: 12,\n  },\n  container: {\n    height: 40,\n    borderRadius: 20,\n    flexDirection: 'row',\n    padding: SLIDER_PADDING,\n    position: 'relative',\n    borderWidth: 1,\n  },\n  slider: {\n    position: 'absolute',\n    height: 34,\n    borderRadius: 17,\n    top: SLIDER_PADDING,\n    left: SLIDER_PADDING,\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  segment: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1,\n  },\n  segmentText: {\n    fontSize: 13,\n    letterSpacing: 0.3,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\components\\progress\\SubjectsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedSubject' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":25},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":39,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":39,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1089,1089],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1089,1089],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchThemeStats'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchThemeStats, userId]","fix":{"range":[1113,1121],"text":"[fetchThemeStats, userId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6411,6414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6411,6414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":252,"column":36,"nodeType":"ObjectExpression","endLine":252,"endColumn":58},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 100 }","line":266,"column":20,"nodeType":"ObjectExpression","endLine":266,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport Animated, { FadeInDown } from 'react-native-reanimated';\nimport Svg, { Circle } from 'react-native-svg';\nimport { shadows, borderRadius } from '../../styles/theme';\nimport { progressService, ThemeStats } from '../../services/progressService';\n\ninterface SubjectData {\n  id: number;\n  name: string;\n  totalQuestions: number;\n  correctAnswers: number;\n  successRate: number;\n  lastPracticed: string;\n  icon: string;\n  color: string;\n}\n\ninterface SubjectsTabProps {\n  userId: string;\n}\n\nexport const SubjectsTab: React.FC<SubjectsTabProps> = ({ userId }) => {\n  const { colors } = useTheme();\n  const [subjects, setSubjects] = useState<SubjectData[]>([]);\n  const [selectedSubject, setSelectedSubject] = useState<SubjectData | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchThemeStats();\n  }, [userId]);\n\n  const fetchThemeStats = async () => {\n    if (!userId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const stats = await progressService.getUserStatsByTheme(userId);\n\n      const formattedSubjects = stats.map((stat: ThemeStats) => ({\n        id: stat.theme_id,\n        name: stat.theme_nom,\n        totalQuestions: stat.total_questions,\n        correctAnswers: stat.questions_correctes,\n        successRate: Number(stat.taux_reussite),\n        lastPracticed: progressService.formatTimeAgo(stat.derniere_session),\n        icon: progressService.getIconForTheme(stat.theme_nom),\n        color: stat.theme_couleur || '#3B82F6',\n      }));\n\n      setSubjects(formattedSubjects);\n    } catch (error) {\n      console.error('Error fetching theme stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const CircularProgress = ({ percentage, color }: { percentage: number; color: string }) => {\n    const radius = 35;\n    const strokeWidth = 6;\n    const circumference = 2 * Math.PI * radius;\n    const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n    return (\n      <Svg width={80} height={80}>\n        <Circle\n          cx={40}\n          cy={40}\n          r={radius}\n          stroke={colors.border}\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n        />\n        <Circle\n          cx={40}\n          cy={40}\n          r={radius}\n          stroke={color}\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          transform=\"rotate(-90 40 40)\"\n        />\n      </Svg>\n    );\n  };\n\n  const getPerformanceLevel = (rate: number) => {\n    if (rate >= 90) {\n      return { text: 'Excellent', color: '#10B981' };\n    }\n    if (rate >= 75) {\n      return { text: 'Bon', color: '#3B82F6' };\n    }\n    if (rate >= 60) {\n      return { text: 'Moyen', color: '#F59E0B' };\n    }\n    return { text: 'À améliorer', color: '#EF4444' };\n  };\n\n  if (loading) {\n    return (\n      <View style={[styles.container, styles.centerContent]}>\n        <ActivityIndicator size=\"large\" color={colors.primary} />\n        <Text style={[styles.loadingText, { color: colors.textSecondary }]}>\n          Chargement des statistiques...\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={styles.container}\n      showsVerticalScrollIndicator={false}\n      contentContainerStyle={styles.scrollContent}\n    >\n      {/* Résumé global */}\n      <View style={[styles.summaryCard, { backgroundColor: colors.surface }, shadows.sm]}>\n        <Text style={[styles.summaryTitle, { color: colors.text }]}>Performance Globale</Text>\n        <View style={styles.summaryStats}>\n          <View style={styles.summaryStatItem}>\n            <Text style={[styles.summaryStatValue, { color: colors.primary }]}>\n              {subjects.reduce((acc, s) => acc + s.totalQuestions, 0)}\n            </Text>\n            <Text style={[styles.summaryStatLabel, { color: colors.textSecondary }]}>\n              Questions totales\n            </Text>\n          </View>\n          <View style={styles.summaryStatItem}>\n            <Text style={[styles.summaryStatValue, { color: colors.primary }]}>\n              {subjects.length > 0\n                ? Math.round(subjects.reduce((acc, s) => acc + s.successRate, 0) / subjects.length)\n                : 0}\n              %\n            </Text>\n            <Text style={[styles.summaryStatLabel, { color: colors.textSecondary }]}>\n              Taux moyen\n            </Text>\n          </View>\n          <View style={styles.summaryStatItem}>\n            <Text style={[styles.summaryStatValue, { color: colors.primary }]}>\n              {subjects.length}\n            </Text>\n            <Text style={[styles.summaryStatLabel, { color: colors.textSecondary }]}>Matières</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Liste des matières */}\n      {subjects.length === 0 ? (\n        <View style={[styles.emptyState, { backgroundColor: colors.surface }, shadows.sm]}>\n          <Ionicons name=\"school-outline\" size={48} color={colors.textSecondary} />\n          <Text style={[styles.emptyStateText, { color: colors.textSecondary }]}>\n            Aucune donnée disponible\n          </Text>\n          <Text style={[styles.emptyStateSubtext, { color: colors.textSecondary }]}>\n            Commencez un entraînement pour voir vos statistiques\n          </Text>\n        </View>\n      ) : (\n        <View style={styles.subjectsGrid}>\n          {subjects.map((subject, index) => {\n            const performance = getPerformanceLevel(subject.successRate);\n            return (\n              <Animated.View\n                key={subject.id}\n                entering={FadeInDown.delay(index * 100)}\n                style={styles.subjectWrapper}\n              >\n                <View style={[styles.subjectCard, { backgroundColor: colors.surface }, shadows.sm]}>\n                  <TouchableOpacity onPress={() => setSelectedSubject(subject)} activeOpacity={0.7}>\n                    <View style={styles.subjectHeader}>\n                      <View style={[styles.iconCircle, { backgroundColor: subject.color + '20' }]}>\n                        <Ionicons name={subject.icon as any} size={24} color={subject.color} />\n                      </View>\n                      <View style={styles.progressContainer}>\n                        <CircularProgress percentage={subject.successRate} color={subject.color} />\n                        <Text style={[styles.percentageText, { color: colors.text }]}>\n                          {subject.successRate}%\n                        </Text>\n                      </View>\n                    </View>\n\n                    <Text style={[styles.subjectName, { color: colors.text }]} numberOfLines={1}>\n                      {subject.name}\n                    </Text>\n\n                    <View style={styles.subjectStats}>\n                      <View style={styles.statRow}>\n                        <Ionicons name=\"checkmark-circle\" size={16} color={colors.textSecondary} />\n                        <Text style={[styles.statText, { color: colors.textSecondary }]}>\n                          {subject.correctAnswers}/{subject.totalQuestions} réussies\n                        </Text>\n                      </View>\n                      <View style={styles.statRow}>\n                        <Ionicons name=\"time\" size={16} color={colors.textSecondary} />\n                        <Text style={[styles.statText, { color: colors.textSecondary }]}>\n                          {subject.lastPracticed}\n                        </Text>\n                      </View>\n                    </View>\n\n                    <View\n                      style={[\n                        styles.performanceBadge,\n                        { backgroundColor: performance.color + '20' },\n                      ]}\n                    >\n                      <Text style={[styles.performanceText, { color: performance.color }]}>\n                        {performance.text}\n                      </Text>\n                    </View>\n                  </TouchableOpacity>\n                </View>\n              </Animated.View>\n            );\n          })}\n        </View>\n      )}\n\n      {/* Recommandations */}\n      {subjects.length > 0 && (\n        <View style={[styles.recommendationCard, { backgroundColor: colors.surface }, shadows.sm]}>\n          <View style={styles.recommendationHeader}>\n            <Ionicons name=\"bulb\" size={24} color={colors.warning} />\n            <Text style={[styles.recommendationTitle, { color: colors.text }]}>Recommandation</Text>\n          </View>\n          <Text style={[styles.recommendationText, { color: colors.textSecondary }]}>\n            {subjects.filter(s => s.successRate < 70).length > 0 ? (\n              <>\n                Concentrez-vous sur{' '}\n                {subjects\n                  .filter(s => s.successRate < 70)\n                  .slice(0, 2)\n                  .map((s, i, arr) => (\n                    <Text key={s.id}>\n                      <Text style={{ fontWeight: 'bold' }}>{s.name}</Text>\n                      {i < arr.length - 1 ? ' et ' : ''}\n                    </Text>\n                  ))}{' '}\n                pour améliorer votre score global.\n              </>\n            ) : (\n              'Excellent travail ! Continuez à maintenir vos bonnes performances.'\n            )}\n          </Text>\n        </View>\n      )}\n\n      {/* Espace pour la tabbar */}\n      <View style={{ height: 100 }} />\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    paddingBottom: 20,\n  },\n  subjectWrapper: {\n    width: '47%',\n    marginBottom: 5,\n  },\n  summaryCard: {\n    margin: 20,\n    padding: 20,\n    borderRadius: borderRadius.xl,\n  },\n  summaryTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  summaryStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  summaryStatItem: {\n    alignItems: 'center',\n  },\n  summaryStatValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  summaryStatLabel: {\n    fontSize: 12,\n  },\n  subjectsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 15,\n    gap: 10,\n  },\n  subjectCard: {\n    padding: 16,\n    borderRadius: borderRadius.lg,\n  },\n  subjectHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  iconCircle: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  progressContainer: {\n    position: 'relative',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  percentageText: {\n    position: 'absolute',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  subjectName: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  subjectStats: {\n    gap: 4,\n    marginBottom: 8,\n  },\n  statRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  statText: {\n    fontSize: 12,\n  },\n  performanceBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: borderRadius.sm,\n    alignSelf: 'flex-start',\n  },\n  performanceText: {\n    fontSize: 11,\n    fontWeight: '600',\n  },\n  recommendationCard: {\n    margin: 20,\n    padding: 16,\n    borderRadius: borderRadius.lg,\n  },\n  recommendationHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  recommendationTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  recommendationText: {\n    fontSize: 14,\n    lineHeight: 20,\n  },\n  centerContent: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 14,\n  },\n  emptyState: {\n    margin: 20,\n    padding: 40,\n    borderRadius: borderRadius.xl,\n    alignItems: 'center',\n  },\n  emptyStateText: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\config\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":5,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":5,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[223,225],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":6,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":6,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[296,298],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport 'react-native-url-polyfill/auto';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Les clés Supabase sont manquantes. Vérifiez votre fichier .env.local');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\constants\\styleConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":26,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[986,986],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[986,986],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService, AuthUser, AuthError } from '../services/auth';\nimport { supabase } from '../config/supabase';\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  loading: boolean;\n  error: AuthError | null;\n  signUp: (email: string, password: string, username: string) => Promise<void>;\n  signIn: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  signInAsGuest: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  clearError: () => void;\n  refreshSession: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<AuthError | null>(null);\n\n  useEffect(() => {\n    checkCurrentUser();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session?.user) {\n        setUser({\n          id: session.user.id,\n          email: session.user.email!,\n          username: session.user.user_metadata?.username,\n        });\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  const checkCurrentUser = async () => {\n    try {\n      setLoading(true);\n      const currentUser = await authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (error) {\n      console.error('Error checking current user:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, username: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { user, error } = await authService.signUp(email, password, username);\n\n      if (error) {\n        setError(error);\n        throw new Error(error.message);\n      }\n\n      if (user) {\n        setUser(user);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { user, error } = await authService.signIn(email, password);\n\n      if (error) {\n        setError(error);\n        throw new Error(error.message);\n      }\n\n      if (user) {\n        setUser(user);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { error } = await authService.signOut();\n\n      if (error) {\n        setError(error);\n        throw new Error(error.message);\n      }\n\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signInAsGuest = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { user, error } = await authService.signInAsGuest();\n\n      if (error) {\n        setError(error);\n        throw new Error(error.message);\n      }\n\n      if (user) {\n        setUser(user);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { error } = await authService.resetPassword(email);\n\n      if (error) {\n        setError(error);\n        throw new Error(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshSession = async () => {\n    try {\n      const { error } = await authService.refreshSession();\n\n      if (error) {\n        console.error('Error refreshing session:', error);\n      }\n    } catch (error) {\n      console.error('Error refreshing session:', error);\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    signInAsGuest,\n    resetPassword,\n    clearError,\n    refreshSession,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\contexts\\ThemeContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[831,831],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[831,831],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useColorScheme } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { colors } from '../styles/theme';\n\ntype ThemeMode = 'light' | 'dark' | 'auto';\n\ninterface ThemeContextType {\n  themeMode: ThemeMode;\n  isDark: boolean;\n  colors: typeof colors.light;\n  setThemeMode: (mode: ThemeMode) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const systemColorScheme = useColorScheme();\n  const [themeMode, setThemeMode] = useState<ThemeMode>('auto');\n\n  const isDark = themeMode === 'auto' ? systemColorScheme === 'dark' : themeMode === 'dark';\n\n  useEffect(() => {\n    loadThemeMode();\n  }, []);\n\n  const loadThemeMode = async () => {\n    try {\n      const savedMode = await AsyncStorage.getItem('themeMode');\n      if (savedMode) {\n        setThemeMode(savedMode as ThemeMode);\n      }\n    } catch (error) {\n      console.error('Error loading theme mode:', error);\n    }\n  };\n\n  const handleSetThemeMode = async (mode: ThemeMode) => {\n    try {\n      await AsyncStorage.setItem('themeMode', mode);\n      setThemeMode(mode);\n    } catch (error) {\n      console.error('Error saving theme mode:', error);\n    }\n  };\n\n  const value = {\n    themeMode,\n    isDark,\n    colors: isDark ? colors.dark : colors.light,\n    setThemeMode: handleSetThemeMode,\n  };\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\hooks\\useBadgeNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\navigation\\AuthNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\navigation\\MainNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Ionicons' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrainingStackNavigator' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":122,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProfileStackNavigator' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":187,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'colors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":208,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport {\r\n  MainTabParamList,\r\n  HomeStackParamList,\r\n  RevisionStackParamList,\r\n  ProgressStackParamList,\r\n  RankingStackParamList,\r\n  TrainingStackParamList,\r\n  ProfileStackParamList,\r\n} from '../types/navigation';\r\nimport { HomeScreen } from '../screens/HomeScreen';\r\nimport { RevisionScreen } from '../screens/RevisionScreen';\r\nimport { RankingScreen } from '../screens/RankingScreen';\r\nimport { TrainingScreen } from '../screens/TrainingScreen';\r\nimport { TrainingConfigScreen } from '../screens/TrainingConfigScreen';\r\nimport { TrainingSessionScreen } from '../screens/TrainingSessionScreen';\r\nimport { SessionReportScreen } from '../screens/SessionReportScreen';\r\nimport { ReviewQuestionsScreen } from '../screens/ReviewQuestionsScreen';\r\nimport { RewardAnimationScreen } from '../screens/RewardAnimationScreen';\r\nimport { ProgressScreen } from '../screens/ProgressScreen';\r\nimport { ProfileCompleteScreen } from '../screens/ProfileCompleteScreen';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport BubbleTabBar from '../components/BubbleTabBar';\r\n\r\nconst Tab = createBottomTabNavigator<MainTabParamList>();\r\nconst HomeStack = createStackNavigator<HomeStackParamList>();\r\nconst RevisionStack = createStackNavigator<RevisionStackParamList>();\r\nconst ProgressStack = createStackNavigator<ProgressStackParamList>();\r\nconst RankingStack = createStackNavigator<RankingStackParamList>();\r\nconst TrainingStack = createStackNavigator<TrainingStackParamList>();\r\nconst ProfileStack = createStackNavigator<ProfileStackParamList>();\r\n\r\nconst HomeStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <HomeStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <HomeStack.Screen name=\"HomeScreen\" component={HomeScreen} options={{ headerShown: false }} />\r\n      <HomeStack.Screen\r\n        name=\"ProfileScreen\"\r\n        component={ProfileCompleteScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <HomeStack.Screen\r\n        name=\"TrainingConfig\"\r\n        component={TrainingConfigScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <HomeStack.Screen\r\n        name=\"TrainingSession\"\r\n        component={TrainingSessionScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <HomeStack.Screen\r\n        name=\"SessionReport\"\r\n        component={SessionReportScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <HomeStack.Screen\r\n        name=\"RewardAnimation\"\r\n        component={RewardAnimationScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <HomeStack.Screen\r\n        name=\"ReviewQuestions\"\r\n        component={ReviewQuestionsScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </HomeStack.Navigator>\r\n  );\r\n};\r\n\r\nconst RevisionStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <RevisionStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <RevisionStack.Screen\r\n        name=\"RevisionScreen\"\r\n        component={RevisionScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </RevisionStack.Navigator>\r\n  );\r\n};\r\n\r\nconst RankingStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <RankingStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <RankingStack.Screen\r\n        name=\"RankingScreen\"\r\n        component={RankingScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </RankingStack.Navigator>\r\n  );\r\n};\r\n\r\nconst TrainingStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <TrainingStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <TrainingStack.Screen\r\n        name=\"TrainingList\"\r\n        component={TrainingScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <TrainingStack.Screen\r\n        name=\"TrainingConfig\"\r\n        component={TrainingConfigScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <TrainingStack.Screen\r\n        name=\"TrainingSession\"\r\n        component={TrainingSessionScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <TrainingStack.Screen\r\n        name=\"SessionReport\"\r\n        component={SessionReportScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <TrainingStack.Screen\r\n        name=\"RewardAnimation\"\r\n        component={RewardAnimationScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <TrainingStack.Screen\r\n        name=\"ReviewQuestions\"\r\n        component={ReviewQuestionsScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </TrainingStack.Navigator>\r\n  );\r\n};\r\n\r\nconst ProgressStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <ProgressStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <ProgressStack.Screen\r\n        name=\"ProgressScreen\"\r\n        component={ProgressScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </ProgressStack.Navigator>\r\n  );\r\n};\r\n\r\nconst ProfileStackNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <ProfileStack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        headerTintColor: colors.text,\r\n        headerShadowVisible: false,\r\n      }}\r\n    >\r\n      <ProfileStack.Screen\r\n        name=\"ProfileScreen\"\r\n        component={ProfileCompleteScreen}\r\n        options={{ headerShown: false }}\r\n      />\r\n    </ProfileStack.Navigator>\r\n  );\r\n};\r\n\r\nexport const MainNavigator = () => {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <Tab.Navigator\r\n      tabBar={props => <BubbleTabBar {...props} />}\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <Tab.Screen name=\"Home\" component={HomeStackNavigator} />\r\n      <Tab.Screen name=\"Revision\" component={RevisionStackNavigator} />\r\n      <Tab.Screen name=\"Progress\" component={ProgressStackNavigator} />\r\n      <Tab.Screen name=\"Ranking\" component={RankingStackNavigator} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\navigation\\RootNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\navigation\\navigationTheme.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[104,107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[104,107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DefaultTheme } from '@react-navigation/native';\n\nexport const createNavigationTheme = (colors: any, isDark: boolean) => ({\n  ...DefaultTheme,\n  dark: isDark,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: colors.primary,\n    background: colors.background,\n    card: colors.surface,\n    text: colors.text,\n    border: colors.border,\n    notification: colors.primary,\n  },\n  fonts: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400' as const,\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500' as const,\n    },\n    bold: {\n      fontFamily: 'System',\n      fontWeight: '700' as const,\n    },\n    heavy: {\n      fontFamily: 'System',\n      fontWeight: '900' as const,\n    },\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\AuthScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":82},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":209,"column":21,"nodeType":"ObjectExpression","endLine":212,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { spacing, typography, borderRadius } from '../styles/theme';\nimport { AuthStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const AuthScreen: React.FC<AuthStackScreenProps<'SignIn'>> = ({ navigation }) => {\n  const { colors } = useTheme();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardView}\n      >\n        <ScrollView\n          contentContainerStyle={styles.scrollContent}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <View style={styles.logoContainer}>\n            <View style={[styles.logo, { backgroundColor: colors.primary }]}>\n              <Ionicons name=\"shield-checkmark\" size={48} color=\"#FFFFFF\" />\n            </View>\n            <Text style={[styles.appName, { color: colors.text }]}>CasqueEnMain</Text>\n            <Text style={[styles.tagline, { color: colors.textSecondary }]}>\n              Votre compagnon de formation\n            </Text>\n          </View>\n\n          <View style={styles.formContainer}>\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Email</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"mail-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"exemple@sdis.fr\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Mot de passe</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"lock-closed-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"••••••••\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry={!showPassword}\n                />\n                <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>\n                  <Ionicons\n                    name={showPassword ? 'eye-outline' : 'eye-off-outline'}\n                    size={20}\n                    color={colors.textSecondary}\n                  />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            <TouchableOpacity style={styles.forgotPassword}>\n              <Text style={[styles.forgotPasswordText, { color: colors.primary }]}>\n                Mot de passe oublié ?\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[styles.signInButton, { backgroundColor: colors.primary }]}\n              activeOpacity={0.8}\n            >\n              <Text style={styles.signInButtonText}>Se connecter</Text>\n            </TouchableOpacity>\n\n            <View style={styles.dividerContainer}>\n              <View style={[styles.divider, { backgroundColor: colors.border }]} />\n              <Text style={[styles.dividerText, { color: colors.textSecondary }]}>OU</Text>\n              <View style={[styles.divider, { backgroundColor: colors.border }]} />\n            </View>\n\n            <TouchableOpacity\n              style={[\n                styles.secondaryButton,\n                { backgroundColor: colors.surface, borderColor: colors.border },\n              ]}\n              activeOpacity={0.8}\n            >\n              <Ionicons name=\"finger-print\" size={20} color={colors.primary} />\n              <Text style={[styles.secondaryButtonText, { color: colors.text }]}>\n                Connexion biométrique\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.footer}>\n            <Text style={[styles.footerText, { color: colors.textSecondary }]}>\n              Pas encore de compte ?\n            </Text>\n            <TouchableOpacity>\n              <Text style={[styles.signUpLink, { color: colors.primary }]}>S'inscrire</Text>\n            </TouchableOpacity>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: spacing.lg,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    paddingTop: spacing.xxl,\n    paddingBottom: spacing.xl,\n  },\n  logo: {\n    width: 96,\n    height: 96,\n    borderRadius: borderRadius.xl,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.md,\n  },\n  appName: {\n    ...typography.h2,\n    marginBottom: spacing.xs,\n  },\n  tagline: {\n    ...typography.caption,\n  },\n  formContainer: {\n    flex: 1,\n  },\n  inputContainer: {\n    marginBottom: spacing.md,\n  },\n  label: {\n    ...typography.bodyBold,\n    marginBottom: spacing.sm,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  input: {\n    flex: 1,\n    ...typography.body,\n    marginHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n  },\n  forgotPassword: {\n    alignSelf: 'flex-end',\n    marginBottom: spacing.lg,\n  },\n  forgotPasswordText: {\n    ...typography.caption,\n  },\n  signInButton: {\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  signInButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n  },\n  dividerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  divider: {\n    flex: 1,\n    height: 1,\n  },\n  dividerText: {\n    ...typography.caption,\n    marginHorizontal: spacing.md,\n  },\n  secondaryButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  secondaryButtonText: {\n    ...typography.body,\n    marginLeft: spacing.sm,\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.xl,\n  },\n  footerText: {\n    ...typography.body,\n    marginRight: spacing.xs,\n  },\n  signUpLink: {\n    ...typography.bodyBold,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\BadgesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":36,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":36,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1379,1379],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1379,1379],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, user]","fix":{"range":[1404,1410],"text":"[loadData, user]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderBottomWidth: 2 }","line":76,"column":32,"nodeType":"ObjectExpression","endLine":76,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2690,2693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2690,2693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5505,5508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5505,5508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  color: \"selectedCategory === cat.key ? '#FFF' : colors.textSecondary\"\n}","line":164,"column":19,"nodeType":"ObjectExpression","endLine":164,"endColumn":90},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: {\n  color: \"selectedCategory === cat.key ? '#FFF' : colors.textSecondary\"\n}","line":164,"column":19,"nodeType":"ObjectExpression","endLine":164,"endColumn":90},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'badge.earned ? 1 : 0.6' }","line":185,"column":19,"nodeType":"ObjectExpression","endLine":188,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7011,7014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7011,7014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9116,9119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9116,9119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18461,18464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18461,18464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":849,"column":17,"nodeType":"ObjectExpression","endLine":855,"endColumn":4}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n  Modal,\r\n  Dimensions,\r\n} from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Animated, { FadeInDown, FadeIn } from 'react-native-reanimated';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { badgesService, Badge, Defi, Rang } from '../services/badgesService';\r\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\r\n\r\nconst { width } = Dimensions.get('window');\r\n\r\nexport const BadgesScreen = () => {\r\n  const { colors, isDark } = useTheme();\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedTab, setSelectedTab] = useState<'badges' | 'challenges' | 'rank'>('badges');\r\n  const [badges, setBadges] = useState<Badge[]>([]);\r\n  const [challenges, setChallenges] = useState<Defi[]>([]);\r\n  const [rank, setRank] = useState<Rang | null>(null);\r\n  const [selectedBadge, setSelectedBadge] = useState<Badge | null>(null);\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadData();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadData = async () => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const [badgesData, challengesData, rankData] = await Promise.all([\r\n        badgesService.getUserBadges(user.id),\r\n        badgesService.getUserChallenges(user.id),\r\n        badgesService.getUserRank(user.id),\r\n      ]);\r\n\r\n      setBadges(badgesData);\r\n      setChallenges(challengesData);\r\n      setRank(rankData);\r\n\r\n      // Vérifier les nouveaux badges\r\n      const result = await badgesService.checkAndAwardBadges(user.id);\r\n      if (result.new_badges.length > 0) {\r\n        // Recharger les badges si de nouveaux ont été attribués\r\n        const updatedBadges = await badgesService.getUserBadges(user.id);\r\n        setBadges(updatedBadges);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading badges data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderTabButton = (tab: 'badges' | 'challenges' | 'rank', title: string, icon: string) => (\r\n    <TouchableOpacity\r\n      onPress={() => setSelectedTab(tab)}\r\n      style={[\r\n        styles.tabButton,\r\n        selectedTab === tab && { borderBottomColor: colors.primary, borderBottomWidth: 2 },\r\n      ]}\r\n    >\r\n      <Ionicons\r\n        name={icon as any}\r\n        size={24}\r\n        color={selectedTab === tab ? colors.primary : colors.textSecondary}\r\n      />\r\n      <Text\r\n        style={[\r\n          styles.tabButtonText,\r\n          { color: selectedTab === tab ? colors.primary : colors.textSecondary },\r\n        ]}\r\n      >\r\n        {title}\r\n      </Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  const renderBadges = () => {\r\n    const stats = badgesService.getBadgeStats(badges);\r\n    const filteredBadges =\r\n      selectedCategory === 'all' ? badges : badges.filter(b => b.categorie === selectedCategory);\r\n\r\n    const categories = [\r\n      { key: 'all', label: 'Tous', icon: 'apps' },\r\n      { key: 'progression', label: 'Progression', icon: 'trending-up' },\r\n      { key: 'performance', label: 'Performance', icon: 'stats-chart' },\r\n      { key: 'special', label: 'Spéciaux', icon: 'star' },\r\n    ];\r\n\r\n    return (\r\n      <ScrollView showsVerticalScrollIndicator={false}>\r\n        {/* Statistiques globales */}\r\n        <View style={[styles.statsCard, { backgroundColor: colors.surface }, shadows.sm]}>\r\n          <View style={styles.statsHeader}>\r\n            <Text style={[styles.statsTitle, { color: colors.text }]}>Collection de badges</Text>\r\n            <View style={[styles.statsBadge, { backgroundColor: colors.primary + '20' }]}>\r\n              <Text style={[styles.statsBadgeText, { color: colors.primary }]}>\r\n                {stats.earned}/{stats.total}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.progressContainer}>\r\n            <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\r\n              <Animated.View\r\n                style={[\r\n                  styles.progressFill,\r\n                  {\r\n                    backgroundColor: colors.primary,\r\n                    width: `${stats.percentageComplete}%`,\r\n                  },\r\n                ]}\r\n              />\r\n            </View>\r\n            <Text style={[styles.progressText, { color: colors.textSecondary }]}>\r\n              {stats.percentageComplete}% complété\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Filtres par catégorie */}\r\n        <ScrollView\r\n          horizontal\r\n          showsHorizontalScrollIndicator={false}\r\n          style={styles.categoriesContainer}\r\n        >\r\n          {categories.map(cat => (\r\n            <TouchableOpacity\r\n              key={cat.key}\r\n              onPress={() => setSelectedCategory(cat.key)}\r\n              style={[\r\n                styles.categoryChip,\r\n                {\r\n                  backgroundColor: selectedCategory === cat.key ? colors.primary : colors.surface,\r\n                  borderColor: colors.border,\r\n                },\r\n              ]}\r\n            >\r\n              <Ionicons\r\n                name={cat.icon as any}\r\n                size={16}\r\n                color={selectedCategory === cat.key ? '#FFF' : colors.textSecondary}\r\n              />\r\n              <Text\r\n                style={[\r\n                  styles.categoryChipText,\r\n                  { color: selectedCategory === cat.key ? '#FFF' : colors.textSecondary },\r\n                ]}\r\n              >\r\n                {cat.label}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          ))}\r\n        </ScrollView>\r\n\r\n        {/* Grille de badges */}\r\n        <View style={styles.badgesGrid}>\r\n          {filteredBadges.map((badge, index) => (\r\n            <Animated.View\r\n              key={badge.id}\r\n              entering={FadeInDown.delay(index * 50)}\r\n              style={styles.badgeWrapper}\r\n            >\r\n              <TouchableOpacity\r\n                onPress={() => setSelectedBadge(badge)}\r\n                style={[\r\n                  styles.badgeCard,\r\n                  {\r\n                    backgroundColor: colors.surface,\r\n                    opacity: badge.earned ? 1 : 0.6,\r\n                  },\r\n                  shadows.sm,\r\n                ]}\r\n              >\r\n                <View\r\n                  style={[\r\n                    styles.badgeIconContainer,\r\n                    {\r\n                      backgroundColor: badge.earned ? badge.couleur + '20' : colors.background,\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Ionicons\r\n                    name={badge.icone as any}\r\n                    size={32}\r\n                    color={badge.earned ? badge.couleur : colors.textSecondary}\r\n                  />\r\n                  {badge.earned && (\r\n                    <View style={[styles.badgeCheck, { backgroundColor: badge.couleur }]}>\r\n                      <Ionicons name=\"checkmark\" size={12} color=\"#FFF\" />\r\n                    </View>\r\n                  )}\r\n                </View>\r\n\r\n                <Text\r\n                  style={[\r\n                    styles.badgeName,\r\n                    { color: badge.earned ? colors.text : colors.textSecondary },\r\n                  ]}\r\n                  numberOfLines={2}\r\n                >\r\n                  {badge.nom}\r\n                </Text>\r\n\r\n                {/* Niveau du badge */}\r\n                <View style={styles.badgeLevelContainer}>\r\n                  {[...Array(4)].map((_, i) => (\r\n                    <View\r\n                      key={i}\r\n                      style={[\r\n                        styles.badgeLevelDot,\r\n                        {\r\n                          backgroundColor: i < badge.niveau ? badge.couleur : colors.border,\r\n                        },\r\n                      ]}\r\n                    />\r\n                  ))}\r\n                </View>\r\n              </TouchableOpacity>\r\n            </Animated.View>\r\n          ))}\r\n        </View>\r\n      </ScrollView>\r\n    );\r\n  };\r\n\r\n  const renderChallenges = () => {\r\n    const dailyChallenges = challenges.filter(c => c.type_defi === 'quotidien');\r\n    const weeklyChallenges = challenges.filter(c => c.type_defi === 'hebdomadaire');\r\n\r\n    const renderChallengeCard = (challenge: Defi, index: number) => (\r\n      <Animated.View\r\n        key={challenge.defi_id}\r\n        entering={FadeInDown.delay(index * 100)}\r\n        style={[styles.challengeCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n      >\r\n        <View style={styles.challengeHeader}>\r\n          <View\r\n            style={[styles.challengeIconContainer, { backgroundColor: challenge.couleur + '20' }]}\r\n          >\r\n            <Ionicons name={challenge.icone as any} size={24} color={challenge.couleur} />\r\n          </View>\r\n          <View style={styles.challengeInfo}>\r\n            <Text style={[styles.challengeName, { color: colors.text }]}>{challenge.nom}</Text>\r\n            <Text style={[styles.challengeDescription, { color: colors.textSecondary }]}>\r\n              {challenge.description}\r\n            </Text>\r\n          </View>\r\n          <View style={styles.challengeReward}>\r\n            <Text style={[styles.challengePoints, { color: colors.primary }]}>\r\n              +{challenge.points_recompense}\r\n            </Text>\r\n            <Text style={[styles.challengePointsLabel, { color: colors.textSecondary }]}>\r\n              points\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.challengeProgress}>\r\n          <View style={styles.challengeProgressInfo}>\r\n            <Text style={[styles.challengeProgressText, { color: colors.text }]}>\r\n              {challenge.progression_actuelle}/{challenge.objectif_valeur}\r\n            </Text>\r\n            <Text style={[styles.challengeTimeRemaining, { color: colors.textSecondary }]}>\r\n              {badgesService.formatTimeRemaining(challenge.temps_restant)}\r\n            </Text>\r\n          </View>\r\n          <View style={[styles.challengeProgressBar, { backgroundColor: colors.border }]}>\r\n            <View\r\n              style={[\r\n                styles.challengeProgressFill,\r\n                {\r\n                  backgroundColor: challenge.couleur,\r\n                  width: `${Math.min(challenge.pourcentage_complete, 100)}%`,\r\n                },\r\n              ]}\r\n            />\r\n          </View>\r\n        </View>\r\n      </Animated.View>\r\n    );\r\n\r\n    return (\r\n      <ScrollView showsVerticalScrollIndicator={false}>\r\n        {/* Défis quotidiens */}\r\n        {dailyChallenges.length > 0 && (\r\n          <View style={styles.challengeSection}>\r\n            <View style={styles.challengeSectionHeader}>\r\n              <Ionicons name=\"today\" size={24} color={colors.primary} />\r\n              <Text style={[styles.challengeSectionTitle, { color: colors.text }]}>\r\n                Défis quotidiens\r\n              </Text>\r\n              <View style={[styles.challengeCount, { backgroundColor: colors.primary + '20' }]}>\r\n                <Text style={[styles.challengeCountText, { color: colors.primary }]}>\r\n                  {dailyChallenges.length}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            {dailyChallenges.map((challenge, index) => renderChallengeCard(challenge, index))}\r\n          </View>\r\n        )}\r\n\r\n        {/* Défis hebdomadaires */}\r\n        {weeklyChallenges.length > 0 && (\r\n          <View style={styles.challengeSection}>\r\n            <View style={styles.challengeSectionHeader}>\r\n              <Ionicons name=\"calendar\" size={24} color={colors.warning} />\r\n              <Text style={[styles.challengeSectionTitle, { color: colors.text }]}>\r\n                Défis hebdomadaires\r\n              </Text>\r\n              <View style={[styles.challengeCount, { backgroundColor: colors.warning + '20' }]}>\r\n                <Text style={[styles.challengeCountText, { color: colors.warning }]}>\r\n                  {weeklyChallenges.length}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            {weeklyChallenges.map((challenge, index) => renderChallengeCard(challenge, index))}\r\n          </View>\r\n        )}\r\n\r\n        {challenges.length === 0 && (\r\n          <View style={styles.emptyState}>\r\n            <Ionicons name=\"trophy-outline\" size={64} color={colors.textSecondary} />\r\n            <Text style={[styles.emptyStateText, { color: colors.textSecondary }]}>\r\n              Aucun défi disponible pour le moment\r\n            </Text>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n    );\r\n  };\r\n\r\n  const renderRank = () => {\r\n    if (!rank) {\r\n      return null;\r\n    }\r\n\r\n    const rankColors = {\r\n      gradient: isDark ? ['#1F2937', '#111827'] : ['#F3F4F6', '#E5E7EB'],\r\n    };\r\n\r\n    return (\r\n      <ScrollView showsVerticalScrollIndicator={false}>\r\n        <LinearGradient colors={rankColors.gradient} style={[styles.rankCard, shadows.md]}>\r\n          <View style={styles.rankHeader}>\r\n            <Text style={[styles.rankTitle, { color: colors.text }]}>Votre rang actuel</Text>\r\n            <View style={[styles.rankBadge, { backgroundColor: colors.primary }]}>\r\n              <Ionicons name=\"trophy\" size={24} color=\"#FFF\" />\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.rankInfo}>\r\n            <Text style={[styles.rankName, { color: colors.primary }]}>{rank.rang_actuel}</Text>\r\n            <Text style={[styles.rankLevel, { color: colors.textSecondary }]}>\r\n              Niveau {rank.niveau_actuel}\r\n            </Text>\r\n          </View>\r\n\r\n          <View style={styles.rankProgressContainer}>\r\n            <View style={styles.rankProgressInfo}>\r\n              <Text style={[styles.rankProgressText, { color: colors.text }]}>\r\n                {rank.points_actuels} points\r\n              </Text>\r\n              {rank.rang_suivant && (\r\n                <Text style={[styles.rankNextText, { color: colors.textSecondary }]}>\r\n                  Prochain: {rank.rang_suivant} ({rank.points_requis_suivant} pts)\r\n                </Text>\r\n              )}\r\n            </View>\r\n            <View style={[styles.rankProgressBar, { backgroundColor: colors.border }]}>\r\n              <View\r\n                style={[\r\n                  styles.rankProgressFill,\r\n                  {\r\n                    backgroundColor: colors.primary,\r\n                    width: `${Math.min(rank.progression_rang, 100)}%`,\r\n                  },\r\n                ]}\r\n              />\r\n            </View>\r\n            <Text style={[styles.rankProgressPercentage, { color: colors.primary }]}>\r\n              {Math.round(rank.progression_rang)}%\r\n            </Text>\r\n          </View>\r\n\r\n          {/* Avantages du rang */}\r\n          {rank.avantages && (\r\n            <View style={styles.rankAdvantages}>\r\n              <Text style={[styles.rankAdvantagesTitle, { color: colors.text }]}>\r\n                Avantages débloqués\r\n              </Text>\r\n              <View style={styles.rankAdvantagesList}>\r\n                {rank.avantages.timer_bonus && (\r\n                  <View style={[styles.rankAdvantageItem, { backgroundColor: colors.surface }]}>\r\n                    <Ionicons name=\"time\" size={20} color={colors.primary} />\r\n                    <Text style={[styles.rankAdvantageText, { color: colors.text }]}>\r\n                      +{rank.avantages.timer_bonus}s bonus temps\r\n                    </Text>\r\n                  </View>\r\n                )}\r\n                {rank.avantages.hints && (\r\n                  <View style={[styles.rankAdvantageItem, { backgroundColor: colors.surface }]}>\r\n                    <Ionicons name=\"bulb\" size={20} color={colors.warning} />\r\n                    <Text style={[styles.rankAdvantageText, { color: colors.text }]}>\r\n                      {rank.avantages.hints} indices disponibles\r\n                    </Text>\r\n                  </View>\r\n                )}\r\n              </View>\r\n            </View>\r\n          )}\r\n        </LinearGradient>\r\n      </ScrollView>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"large\" color={colors.primary} />\r\n          <Text style={[styles.loadingText, { color: colors.textSecondary }]}>\r\n            Chargement des récompenses...\r\n          </Text>\r\n        </View>\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      <Animated.View entering={FadeIn} style={styles.header}>\r\n        <Text style={[styles.title, { color: colors.text }]}>Récompenses</Text>\r\n        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\r\n          Badges, défis et progression\r\n        </Text>\r\n      </Animated.View>\r\n\r\n      {/* Tabs */}\r\n      <View style={[styles.tabs, { borderBottomColor: colors.border }]}>\r\n        {renderTabButton('badges', 'Badges', 'medal')}\r\n        {renderTabButton('challenges', 'Défis', 'flag')}\r\n        {renderTabButton('rank', 'Rang', 'trophy')}\r\n      </View>\r\n\r\n      <View style={styles.content}>\r\n        {selectedTab === 'badges' && renderBadges()}\r\n        {selectedTab === 'challenges' && renderChallenges()}\r\n        {selectedTab === 'rank' && renderRank()}\r\n      </View>\r\n\r\n      {/* Modal pour détails du badge */}\r\n      <Modal\r\n        visible={selectedBadge !== null}\r\n        transparent\r\n        animationType=\"fade\"\r\n        onRequestClose={() => setSelectedBadge(null)}\r\n      >\r\n        <TouchableOpacity\r\n          style={styles.modalOverlay}\r\n          activeOpacity={1}\r\n          onPress={() => setSelectedBadge(null)}\r\n        >\r\n          <View style={[styles.modalContent, { backgroundColor: colors.surface }]}>\r\n            {selectedBadge && (\r\n              <>\r\n                <View\r\n                  style={[styles.modalBadgeIcon, { backgroundColor: selectedBadge.couleur + '20' }]}\r\n                >\r\n                  <Ionicons\r\n                    name={selectedBadge.icone as any}\r\n                    size={48}\r\n                    color={selectedBadge.couleur}\r\n                  />\r\n                </View>\r\n                <Text style={[styles.modalBadgeName, { color: colors.text }]}>\r\n                  {selectedBadge.nom}\r\n                </Text>\r\n                <Text style={[styles.modalBadgeDescription, { color: colors.textSecondary }]}>\r\n                  {selectedBadge.description}\r\n                </Text>\r\n                {selectedBadge.earned && selectedBadge.date_obtention && (\r\n                  <Text style={[styles.modalBadgeDate, { color: colors.primary }]}>\r\n                    Obtenu le {new Date(selectedBadge.date_obtention).toLocaleDateString('fr-FR')}\r\n                  </Text>\r\n                )}\r\n                {!selectedBadge.earned && (\r\n                  <Text style={[styles.modalBadgeLocked, { color: colors.warning }]}>\r\n                    Badge verrouillé\r\n                  </Text>\r\n                )}\r\n              </>\r\n            )}\r\n          </View>\r\n        </TouchableOpacity>\r\n      </Modal>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    marginTop: spacing.md,\r\n    fontSize: typography.body.fontSize,\r\n  },\r\n  header: {\r\n    paddingHorizontal: spacing.lg,\r\n    paddingTop: spacing.xl,\r\n    paddingBottom: spacing.md,\r\n  },\r\n  title: {\r\n    fontSize: typography.h1.fontSize,\r\n    fontWeight: 'bold',\r\n    marginBottom: spacing.xs,\r\n  },\r\n  subtitle: {\r\n    fontSize: typography.body.fontSize,\r\n  },\r\n  tabs: {\r\n    flexDirection: 'row',\r\n    borderBottomWidth: 1,\r\n    paddingHorizontal: spacing.lg,\r\n  },\r\n  tabButton: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingVertical: spacing.md,\r\n    gap: spacing.xs,\r\n  },\r\n  tabButtonText: {\r\n    fontSize: typography.body.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    paddingHorizontal: spacing.lg,\r\n    paddingTop: spacing.md,\r\n  },\r\n  statsCard: {\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    marginBottom: spacing.lg,\r\n  },\r\n  statsHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  statsTitle: {\r\n    fontSize: typography.h3.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  statsBadge: {\r\n    paddingHorizontal: spacing.sm,\r\n    paddingVertical: spacing.xs,\r\n    borderRadius: borderRadius.full,\r\n  },\r\n  statsBadgeText: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: 'bold',\r\n  },\r\n  progressContainer: {\r\n    gap: spacing.xs,\r\n  },\r\n  progressBar: {\r\n    height: 8,\r\n    borderRadius: borderRadius.full,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    borderRadius: borderRadius.full,\r\n  },\r\n  progressText: {\r\n    fontSize: typography.caption.fontSize,\r\n  },\r\n  categoriesContainer: {\r\n    marginBottom: spacing.lg,\r\n  },\r\n  categoryChip: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: spacing.md,\r\n    paddingVertical: spacing.sm,\r\n    borderRadius: borderRadius.full,\r\n    marginRight: spacing.sm,\r\n    borderWidth: 1,\r\n    gap: spacing.xs,\r\n  },\r\n  categoryChipText: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  badgesGrid: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    gap: spacing.md,\r\n    paddingBottom: spacing.xl * 2,\r\n  },\r\n  badgeWrapper: {\r\n    width: (width - spacing.lg * 2 - spacing.md * 2) / 3,\r\n  },\r\n  badgeCard: {\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n    alignItems: 'center',\r\n    gap: spacing.xs,\r\n  },\r\n  badgeIconContainer: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: borderRadius.full,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    position: 'relative',\r\n  },\r\n  badgeCheck: {\r\n    position: 'absolute',\r\n    bottom: -2,\r\n    right: -2,\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: borderRadius.full,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  badgeName: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: '600',\r\n    textAlign: 'center',\r\n  },\r\n  badgeLevelContainer: {\r\n    flexDirection: 'row',\r\n    gap: 4,\r\n  },\r\n  badgeLevelDot: {\r\n    width: 6,\r\n    height: 6,\r\n    borderRadius: 3,\r\n  },\r\n  challengeSection: {\r\n    marginBottom: spacing.xl,\r\n  },\r\n  challengeSectionHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: spacing.sm,\r\n    marginBottom: spacing.md,\r\n  },\r\n  challengeSectionTitle: {\r\n    fontSize: typography.h3.fontSize,\r\n    fontWeight: '600',\r\n    flex: 1,\r\n  },\r\n  challengeCount: {\r\n    paddingHorizontal: spacing.sm,\r\n    paddingVertical: 2,\r\n    borderRadius: borderRadius.full,\r\n  },\r\n  challengeCountText: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: 'bold',\r\n  },\r\n  challengeCard: {\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    marginBottom: spacing.md,\r\n  },\r\n  challengeHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'flex-start',\r\n    gap: spacing.md,\r\n    marginBottom: spacing.md,\r\n  },\r\n  challengeIconContainer: {\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: borderRadius.full,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  challengeInfo: {\r\n    flex: 1,\r\n  },\r\n  challengeName: {\r\n    fontSize: typography.body.fontSize,\r\n    fontWeight: '600',\r\n    marginBottom: 2,\r\n  },\r\n  challengeDescription: {\r\n    fontSize: typography.caption.fontSize,\r\n  },\r\n  challengeReward: {\r\n    alignItems: 'center',\r\n  },\r\n  challengePoints: {\r\n    fontSize: typography.h3.fontSize,\r\n    fontWeight: 'bold',\r\n  },\r\n  challengePointsLabel: {\r\n    fontSize: 10,\r\n  },\r\n  challengeProgress: {\r\n    gap: spacing.xs,\r\n  },\r\n  challengeProgressInfo: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  challengeProgressText: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  challengeTimeRemaining: {\r\n    fontSize: typography.caption.fontSize,\r\n  },\r\n  challengeProgressBar: {\r\n    height: 6,\r\n    borderRadius: borderRadius.full,\r\n    overflow: 'hidden',\r\n  },\r\n  challengeProgressFill: {\r\n    height: '100%',\r\n    borderRadius: borderRadius.full,\r\n  },\r\n  rankCard: {\r\n    padding: spacing.xl,\r\n    borderRadius: borderRadius.xl,\r\n    marginBottom: spacing.xl,\r\n  },\r\n  rankHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.lg,\r\n  },\r\n  rankTitle: {\r\n    fontSize: typography.h3.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  rankBadge: {\r\n    width: 48,\r\n    height: 48,\r\n    borderRadius: borderRadius.full,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  rankInfo: {\r\n    alignItems: 'center',\r\n    marginBottom: spacing.xl,\r\n  },\r\n  rankName: {\r\n    fontSize: typography.h1.fontSize,\r\n    fontWeight: 'bold',\r\n    marginBottom: spacing.xs,\r\n  },\r\n  rankLevel: {\r\n    fontSize: typography.body.fontSize,\r\n  },\r\n  rankProgressContainer: {\r\n    gap: spacing.sm,\r\n  },\r\n  rankProgressInfo: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  rankProgressText: {\r\n    fontSize: typography.body.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  rankNextText: {\r\n    fontSize: typography.caption.fontSize,\r\n  },\r\n  rankProgressBar: {\r\n    height: 12,\r\n    borderRadius: borderRadius.full,\r\n    overflow: 'hidden',\r\n  },\r\n  rankProgressFill: {\r\n    height: '100%',\r\n    borderRadius: borderRadius.full,\r\n  },\r\n  rankProgressPercentage: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  rankAdvantages: {\r\n    marginTop: spacing.xl,\r\n  },\r\n  rankAdvantagesTitle: {\r\n    fontSize: typography.body.fontSize,\r\n    fontWeight: '600',\r\n    marginBottom: spacing.md,\r\n  },\r\n  rankAdvantagesList: {\r\n    gap: spacing.sm,\r\n  },\r\n  rankAdvantageItem: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: spacing.sm,\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.md,\r\n  },\r\n  rankAdvantageText: {\r\n    fontSize: typography.caption.fontSize,\r\n  },\r\n  emptyState: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    paddingVertical: spacing.xl * 3,\r\n  },\r\n  emptyStateText: {\r\n    fontSize: typography.body.fontSize,\r\n    marginTop: spacing.md,\r\n  },\r\n  modalOverlay: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: spacing.xl,\r\n  },\r\n  modalContent: {\r\n    width: '100%',\r\n    maxWidth: 320,\r\n    padding: spacing.xl,\r\n    borderRadius: borderRadius.xl,\r\n    alignItems: 'center',\r\n  },\r\n  modalBadgeIcon: {\r\n    width: 80,\r\n    height: 80,\r\n    borderRadius: borderRadius.full,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginBottom: spacing.lg,\r\n  },\r\n  modalBadgeName: {\r\n    fontSize: typography.h2.fontSize,\r\n    fontWeight: 'bold',\r\n    marginBottom: spacing.sm,\r\n    textAlign: 'center',\r\n  },\r\n  modalBadgeDescription: {\r\n    fontSize: typography.body.fontSize,\r\n    textAlign: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  modalBadgeDate: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n  modalBadgeLocked: {\r\n    fontSize: typography.caption.fontSize,\r\n    fontWeight: '600',\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\ForgotPasswordScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'loading ? 0.7 : 1' }","line":101,"column":19,"nodeType":"ObjectExpression","endLine":101,"endColumn":82},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":104,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":104,"endColumn":46},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":216,"column":20,"nodeType":"ObjectExpression","endLine":219,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":249,"column":26,"nodeType":"ObjectExpression","endLine":252,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius } from '../styles/theme';\nimport { AuthStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const ForgotPasswordScreen: React.FC<AuthStackScreenProps<'ForgotPassword'>> = ({\n  navigation,\n}) => {\n  const { colors } = useTheme();\n  const { resetPassword, loading } = useAuth();\n  const [email, setEmail] = useState('');\n  const [emailSent, setEmailSent] = useState(false);\n\n  const handleResetPassword = async () => {\n    if (!email) {\n      Alert.alert('Erreur', 'Veuillez entrer votre adresse email');\n      return;\n    }\n\n    try {\n      await resetPassword(email);\n      setEmailSent(true);\n      Alert.alert(\n        'Email envoyé',\n        'Un email de réinitialisation vous a été envoyé. Veuillez vérifier votre boîte mail.',\n        [{ text: 'OK', onPress: () => navigation.navigate('SignIn') }]\n      );\n    } catch (err: any) {\n      Alert.alert('Erreur', err.message);\n    }\n  };\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardView}\n      >\n        <ScrollView\n          contentContainerStyle={styles.scrollContent}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Ionicons name=\"arrow-back\" size={24} color={colors.text} />\n          </TouchableOpacity>\n\n          <View style={styles.header}>\n            <View style={[styles.iconContainer, { backgroundColor: `${colors.primary}15` }]}>\n              <Ionicons name=\"lock-open-outline\" size={48} color={colors.primary} />\n            </View>\n            <Text style={[styles.title, { color: colors.text }]}>Mot de passe oublié ?</Text>\n            <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\n              Pas de panique ! Entrez votre email et nous vous enverrons un lien pour réinitialiser\n              votre mot de passe.\n            </Text>\n          </View>\n\n          {!emailSent ? (\n            <View style={styles.formContainer}>\n              <View style={styles.inputContainer}>\n                <Text style={[styles.label, { color: colors.text }]}>Adresse email</Text>\n                <View\n                  style={[\n                    styles.inputWrapper,\n                    { backgroundColor: colors.surface, borderColor: colors.border },\n                  ]}\n                >\n                  <Ionicons name=\"mail-outline\" size={20} color={colors.textSecondary} />\n                  <TextInput\n                    style={[styles.input, { color: colors.text }]}\n                    placeholder=\"exemple@sdis.fr\"\n                    placeholderTextColor={colors.textSecondary}\n                    value={email}\n                    onChangeText={setEmail}\n                    keyboardType=\"email-address\"\n                    autoCapitalize=\"none\"\n                    editable={!loading}\n                  />\n                </View>\n              </View>\n\n              <TouchableOpacity\n                style={[\n                  styles.resetButton,\n                  { backgroundColor: colors.primary, opacity: loading ? 0.7 : 1 },\n                ]}\n                activeOpacity={0.8}\n                onPress={handleResetPassword}\n                disabled={loading}\n              >\n                {loading ? (\n                  <ActivityIndicator color=\"#FFFFFF\" />\n                ) : (\n                  <Text style={styles.resetButtonText}>Envoyer le lien de réinitialisation</Text>\n                )}\n              </TouchableOpacity>\n            </View>\n          ) : (\n            <View style={styles.successContainer}>\n              <View style={[styles.successIcon, { backgroundColor: `${colors.success}15` }]}>\n                <Ionicons name=\"checkmark-circle\" size={64} color={colors.success} />\n              </View>\n              <Text style={[styles.successTitle, { color: colors.text }]}>Email envoyé !</Text>\n              <Text style={[styles.successText, { color: colors.textSecondary }]}>\n                Vérifiez votre boîte mail et suivez les instructions pour réinitialiser votre mot de\n                passe.\n              </Text>\n              <TouchableOpacity\n                style={[styles.backToLoginButton, { backgroundColor: colors.primary }]}\n                activeOpacity={0.8}\n                onPress={() => navigation.navigate('SignIn')}\n              >\n                <Text style={styles.backToLoginButtonText}>Retour à la connexion</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n\n          <View style={styles.footer}>\n            <Text style={[styles.footerText, { color: colors.textSecondary }]}>\n              Vous vous souvenez de votre mot de passe ?\n            </Text>\n            <TouchableOpacity onPress={() => navigation.navigate('SignIn')} disabled={loading}>\n              <Text style={[styles.signInLink, { color: colors.primary }]}>Se connecter</Text>\n            </TouchableOpacity>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: spacing.lg,\n  },\n  backButton: {\n    paddingTop: spacing.md,\n    paddingBottom: spacing.sm,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: spacing.xl,\n    paddingTop: spacing.xl,\n  },\n  iconContainer: {\n    width: 96,\n    height: 96,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.lg,\n  },\n  title: {\n    ...typography.h3,\n    marginBottom: spacing.md,\n    textAlign: 'center',\n  },\n  subtitle: {\n    ...typography.body,\n    textAlign: 'center',\n    paddingHorizontal: spacing.lg,\n  },\n  formContainer: {\n    flex: 1,\n  },\n  inputContainer: {\n    marginBottom: spacing.lg,\n  },\n  label: {\n    ...typography.bodyBold,\n    marginBottom: spacing.sm,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  input: {\n    flex: 1,\n    ...typography.body,\n    marginHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n  },\n  resetButton: {\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  resetButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n  },\n  successContainer: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: spacing.xl,\n  },\n  successIcon: {\n    width: 96,\n    height: 96,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.lg,\n  },\n  successTitle: {\n    ...typography.h3,\n    marginBottom: spacing.md,\n  },\n  successText: {\n    ...typography.body,\n    textAlign: 'center',\n    paddingHorizontal: spacing.lg,\n    marginBottom: spacing.xl,\n  },\n  backToLoginButton: {\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n  },\n  backToLoginButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.xl,\n  },\n  footerText: {\n    ...typography.body,\n    marginRight: spacing.xs,\n  },\n  signInLink: {\n    ...typography.bodyBold,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\HomeScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withSpring' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withTiming' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FadeInDown' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1745,1748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1745,1748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1875,1878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1875,1878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":76,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":76,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2205,2205],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2205,2205],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [currentTipIndex, loadUserData, tips.length]","fix":{"range":[2621,2651],"text":"[currentTipIndex, loadUserData, tips.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":110,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":166,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":19},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"item.type === 'tip' ? '#3B82F6' : item.type === 'update' ? '#10B981' : '#F59E0B'\"\n}","line":291,"column":13,"nodeType":"ObjectExpression","endLine":294,"endColumn":14},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: {\n  backgroundColor: \"item.type === 'tip' ? '#3B82F6' : item.type === 'update' ? '#10B981' : '#F59E0B'\"\n}","line":291,"column":13,"nodeType":"ObjectExpression","endLine":294,"endColumn":14},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":328,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":328,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9513,9552],"text":"(userProfile?.username ?? user?.username)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":328,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":328,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9553,9555],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10379,10418],"text":"(userProfile?.username ?? user?.username)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10419,10421],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":375,"column":23,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":375,"endColumn":78,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11413,11413],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[11413,11413],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 100 }","line":466,"column":22,"nodeType":"ObjectExpression","endLine":466,"endColumn":37},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderColor: '#DC262620' }","line":500,"column":20,"nodeType":"ObjectExpression","endLine":507,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":518,"column":15,"nodeType":"ObjectExpression","endLine":522,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(255, 255, 255, 0.2)' }","line":548,"column":22,"nodeType":"ObjectExpression","endLine":556,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":557,"column":14,"nodeType":"ObjectExpression","endLine":561,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'rgba(255, 255, 255, 0.9)' }","line":562,"column":20,"nodeType":"ObjectExpression","endLine":565,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.3)' }","line":566,"column":20,"nodeType":"ObjectExpression","endLine":574,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":575,"column":19,"nodeType":"ObjectExpression","endLine":578,"endColumn":4}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Image,\r\n  FlatList,\r\n  NativeScrollEvent,\r\n  NativeSyntheticEvent,\r\n} from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\r\nimport { HomeStackScreenProps } from '../types/navigation';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport Animated, {\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withSpring,\r\n  withTiming,\r\n  interpolate,\r\n  Extrapolate,\r\n  FadeInDown,\r\n  FadeInUp,\r\n  SlideInRight,\r\n} from 'react-native-reanimated';\r\nimport * as Haptics from 'expo-haptics';\r\nimport { supabase } from '../config/supabase';\r\nimport { avatarService } from '../services/avatarService';\r\n\r\nconst { width: SCREEN_WIDTH } = Dimensions.get('window');\r\n\r\ninterface QuickStat {\r\n  label: string;\r\n  value: string | number;\r\n  icon: keyof typeof Ionicons.glyphMap;\r\n  color: string;\r\n}\r\n\r\ninterface TrainingCard {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: keyof typeof Ionicons.glyphMap;\r\n  colors: string[];\r\n  available: boolean;\r\n  action: () => void;\r\n}\r\n\r\ninterface Tip {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'tip' | 'update' | 'news';\r\n  date: Date;\r\n}\r\n\r\nexport const HomeScreen: React.FC<HomeStackScreenProps<'HomeScreen'>> = ({ navigation }) => {\r\n  const { colors } = useTheme();\r\n  const { user } = useAuth();\r\n  const [userProfile, setUserProfile] = useState<any>(null);\r\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);\r\n  const [lastSession, setLastSession] = useState<any>(null);\r\n  const [weeklyStats, setWeeklyStats] = useState({ sessions: 0, correctRate: 0, streak: 0 });\r\n  const [tips, setTips] = useState<Tip[]>([]);\r\n  const scrollY = useSharedValue(0);\r\n  const carouselRef = useRef<FlatList>(null);\r\n  const [currentTipIndex, setCurrentTipIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    loadUserData();\r\n    loadTips();\r\n    // Auto-scroll carousel\r\n    const interval = setInterval(() => {\r\n      if (carouselRef.current && tips.length > 1) {\r\n        const nextIndex = (currentTipIndex + 1) % tips.length;\r\n        carouselRef.current.scrollToIndex({ index: nextIndex, animated: true });\r\n        setCurrentTipIndex(nextIndex);\r\n      }\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, [currentTipIndex, tips.length]);\r\n\r\n  const loadUserData = async () => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Charger le profil utilisateur\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      setUserProfile(profile);\r\n\r\n      // Charger l'avatar séparément avec avatarService\r\n      try {\r\n        const avatar = await avatarService.getAvatar(user.id);\r\n        if (avatar) {\r\n          setAvatarUrl(avatar);\r\n        }\r\n      } catch (error) {\r\n        // Silently handle avatar loading error\r\n      }\r\n\r\n      // Charger la dernière session\r\n      const { data: sessions } = await supabase\r\n        .from('sessions')\r\n        .select('*')\r\n        .eq('profile_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (sessions && sessions.length > 0) {\r\n        setLastSession(sessions[0]);\r\n      }\r\n\r\n      // Charger les stats hebdomadaires\r\n      const weekAgo = new Date();\r\n      weekAgo.setDate(weekAgo.getDate() - 7);\r\n\r\n      const { data: weekSessions } = await supabase\r\n        .from('sessions')\r\n        .select('*')\r\n        .eq('profile_id', user.id)\r\n        .gte('created_at', weekAgo.toISOString());\r\n\r\n      if (weekSessions) {\r\n        const totalQuestions = weekSessions.reduce((acc, s) => acc + s.nombre_questions, 0);\r\n        const correctAnswers = weekSessions.reduce(\r\n          (acc, s) => acc + s.nombre_reponses_correctes,\r\n          0\r\n        );\r\n        const rate = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;\r\n\r\n        // Calculer la série (simplified)\r\n        const today = new Date();\r\n        let streak = 0;\r\n        for (let i = 0; i < 30; i++) {\r\n          const date = new Date(today);\r\n          date.setDate(date.getDate() - i);\r\n          const daySession = weekSessions.find(\r\n            s => new Date(s.created_at).toDateString() === date.toDateString()\r\n          );\r\n          if (daySession) {\r\n            streak++;\r\n          } else if (i > 0) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        setWeeklyStats({\r\n          sessions: weekSessions.length,\r\n          correctRate: rate,\r\n          streak,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      // Silently handle user data loading error\r\n    }\r\n  };\r\n\r\n  const loadTips = () => {\r\n    // Simuler des tips (à remplacer par un appel API)\r\n    setTips([\r\n      {\r\n        id: '1',\r\n        title: 'Conseil du jour',\r\n        description:\r\n          \"Révisez régulièrement les procédures d'intervention pour maintenir vos réflexes.\",\r\n        type: 'tip',\r\n        date: new Date(),\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Nouvelles questions',\r\n        description: '20 nouvelles questions ajoutées en Mathématiques - Problèmes complexes.',\r\n        type: 'update',\r\n        date: new Date(),\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Mise à jour',\r\n        description: 'Mode examen disponible ! Testez-vous en conditions réelles.',\r\n        type: 'news',\r\n        date: new Date(),\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const trainingCards: TrainingCard[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Entraînement Libre',\r\n      description: 'Pratiquez à votre rythme',\r\n      icon: 'school',\r\n      colors: ['#DC2626', '#EF4444'],\r\n      available: true,\r\n      action: () => navigation.navigate('TrainingConfig'),\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Mode Examen',\r\n      description: 'Conditions réelles',\r\n      icon: 'time',\r\n      colors: ['#3B82F6', '#60A5FA'],\r\n      available: false,\r\n      action: () => {},\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Révisions',\r\n      description: 'Questions échouées',\r\n      icon: 'refresh',\r\n      colors: ['#10B981', '#34D399'],\r\n      available: false,\r\n      action: () => {},\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Défis Quotidiens',\r\n      description: 'Nouveau défi chaque jour',\r\n      icon: 'trophy',\r\n      colors: ['#F59E0B', '#FBBF24'],\r\n      available: false,\r\n      action: () => {},\r\n    },\r\n  ];\r\n\r\n  const quickStats: QuickStat[] = [\r\n    {\r\n      label: 'Dernière session',\r\n      value: lastSession\r\n        ? `${lastSession.nombre_reponses_correctes}/${lastSession.nombre_questions}`\r\n        : '-',\r\n      icon: 'checkmark-circle',\r\n      color: '#10B981',\r\n    },\r\n    {\r\n      label: 'Cette semaine',\r\n      value: `${weeklyStats.correctRate}%`,\r\n      icon: 'trending-up',\r\n      color: '#3B82F6',\r\n    },\r\n    {\r\n      label: 'Série',\r\n      value: `${weeklyStats.streak} jours`,\r\n      icon: 'flame',\r\n      color: '#F59E0B',\r\n    },\r\n  ];\r\n\r\n  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\r\n    scrollY.value = event.nativeEvent.contentOffset.y;\r\n  };\r\n\r\n  const headerAnimatedStyle = useAnimatedStyle(() => ({\r\n    transform: [\r\n      {\r\n        translateY: interpolate(scrollY.value, [0, 100], [0, -50], Extrapolate.CLAMP),\r\n      },\r\n    ],\r\n    opacity: interpolate(scrollY.value, [0, 100], [1, 0.8], Extrapolate.CLAMP),\r\n  }));\r\n\r\n  const getGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour < 12) {\r\n      return 'Bonjour';\r\n    }\r\n    if (hour < 18) {\r\n      return 'Bon après-midi';\r\n    }\r\n    return 'Bonsoir';\r\n  };\r\n\r\n  const renderTip = ({ item }: { item: Tip }) => (\r\n    <View style={[styles.tipCard, { backgroundColor: colors.surface }]}>\r\n      <View style={styles.tipHeader}>\r\n        <View\r\n          style={[\r\n            styles.tipBadge,\r\n            {\r\n              backgroundColor:\r\n                item.type === 'tip' ? '#3B82F6' : item.type === 'update' ? '#10B981' : '#F59E0B',\r\n            },\r\n          ]}\r\n        >\r\n          <Ionicons\r\n            name={\r\n              item.type === 'tip' ? 'bulb' : item.type === 'update' ? 'add-circle' : 'megaphone'\r\n            }\r\n            size={16}\r\n            color=\"#FFFFFF\"\r\n          />\r\n        </View>\r\n        <Text style={[styles.tipTitle, { color: colors.text }]}>{item.title}</Text>\r\n      </View>\r\n      <Text style={[styles.tipDescription, { color: colors.textSecondary }]}>\r\n        {item.description}\r\n      </Text>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      <Animated.ScrollView\r\n        showsVerticalScrollIndicator={false}\r\n        onScroll={handleScroll}\r\n        scrollEventThrottle={16}\r\n      >\r\n        {/* Header personnalisé */}\r\n        <Animated.View style={[styles.header, headerAnimatedStyle]}>\r\n          <View style={styles.headerContent}>\r\n            <View style={styles.headerLeft}>\r\n              <Text style={[styles.greeting, { color: colors.textSecondary }]}>\r\n                {getGreeting()},\r\n              </Text>\r\n              <Text style={[styles.userName, { color: colors.text }]}>\r\n                {userProfile?.username || user?.username || 'Invité'}\r\n              </Text>\r\n            </View>\r\n            <View style={styles.headerRight}>\r\n              <TouchableOpacity\r\n                onPress={() => navigation.navigate('ProfileScreen')}\r\n                style={styles.avatarContainer}\r\n                activeOpacity={0.7}\r\n              >\r\n                {avatarUrl ? (\r\n                  <Image\r\n                    source={{ uri: avatarUrl }}\r\n                    style={styles.avatar}\r\n                    resizeMode=\"cover\"\r\n                    onError={() => {\r\n                      setAvatarUrl(null);\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <View style={[styles.avatarPlaceholder, { backgroundColor: colors.primary }]}>\r\n                    <Text style={styles.avatarText}>\r\n                      {(userProfile?.username || user?.username || 'U')[0].toUpperCase()}\r\n                    </Text>\r\n                  </View>\r\n                )}\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </Animated.View>\r\n\r\n        {/* Section principale - Cartes d'entraînement */}\r\n        <View style={styles.mainSection}>\r\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Modes d'entraînement</Text>\r\n\r\n          <ScrollView\r\n            horizontal\r\n            showsHorizontalScrollIndicator={false}\r\n            pagingEnabled\r\n            snapToInterval={SCREEN_WIDTH - spacing.lg * 2}\r\n            decelerationRate=\"fast\"\r\n            contentContainerStyle={styles.cardsContainer}\r\n          >\r\n            {trainingCards.map((card, index) => (\r\n              <Animated.View key={card.id} entering={SlideInRight.duration(500).delay(index * 100)}>\r\n                <TouchableOpacity\r\n                  onPress={() => {\r\n                    if (card.available) {\r\n                      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\r\n                      card.action();\r\n                    }\r\n                  }}\r\n                  disabled={!card.available}\r\n                  activeOpacity={card.available ? 0.8 : 1}\r\n                  style={styles.cardWrapper}\r\n                >\r\n                  <LinearGradient\r\n                    colors={card.available ? card.colors : ['#9CA3AF', '#6B7280']}\r\n                    style={[styles.trainingCard, !card.available && styles.disabledCard]}\r\n                    start={{ x: 0, y: 0 }}\r\n                    end={{ x: 1, y: 1 }}\r\n                  >\r\n                    <View style={styles.cardIconContainer}>\r\n                      <Ionicons name={card.icon} size={40} color=\"#FFFFFF\" />\r\n                    </View>\r\n                    <Text style={styles.cardTitle}>{card.title}</Text>\r\n                    <Text style={styles.cardDescription}>{card.description}</Text>\r\n                    {!card.available && (\r\n                      <View style={styles.comingSoonBadge}>\r\n                        <Text style={styles.comingSoonText}>Bientôt disponible</Text>\r\n                      </View>\r\n                    )}\r\n                  </LinearGradient>\r\n                </TouchableOpacity>\r\n              </Animated.View>\r\n            ))}\r\n          </ScrollView>\r\n        </View>\r\n\r\n        {/* Section statistiques rapides */}\r\n        <Animated.View entering={FadeInUp.duration(600).delay(400)} style={styles.statsSection}>\r\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Vos performances</Text>\r\n\r\n          <View style={styles.statsGrid}>\r\n            {quickStats.map((stat, index) => (\r\n              <Animated.View\r\n                key={stat.label}\r\n                entering={FadeInUp.duration(500).delay(500 + index * 100)}\r\n                style={[styles.statCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n              >\r\n                <View style={[styles.statIcon, { backgroundColor: `${stat.color}15` }]}>\r\n                  <Ionicons name={stat.icon} size={24} color={stat.color} />\r\n                </View>\r\n                <Text style={[styles.statValue, { color: colors.text }]}>{stat.value}</Text>\r\n                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>\r\n                  {stat.label}\r\n                </Text>\r\n              </Animated.View>\r\n            ))}\r\n          </View>\r\n        </Animated.View>\r\n\r\n        {/* Carousel Actualités/Tips */}\r\n        <Animated.View entering={FadeInUp.duration(600).delay(800)} style={styles.tipsSection}>\r\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Actualités & Conseils</Text>\r\n\r\n          <FlatList\r\n            ref={carouselRef}\r\n            data={tips}\r\n            renderItem={renderTip}\r\n            keyExtractor={item => item.id}\r\n            horizontal\r\n            pagingEnabled\r\n            showsHorizontalScrollIndicator={false}\r\n            snapToInterval={SCREEN_WIDTH - spacing.lg * 2}\r\n            decelerationRate=\"fast\"\r\n            onMomentumScrollEnd={event => {\r\n              const newIndex = Math.round(\r\n                event.nativeEvent.contentOffset.x / (SCREEN_WIDTH - spacing.lg * 2)\r\n              );\r\n              setCurrentTipIndex(newIndex);\r\n            }}\r\n          />\r\n\r\n          {/* Indicateurs de pagination */}\r\n          <View style={styles.paginationContainer}>\r\n            {tips.map((_, index) => (\r\n              <View\r\n                key={index}\r\n                style={[\r\n                  styles.paginationDot,\r\n                  { backgroundColor: index === currentTipIndex ? colors.primary : colors.border },\r\n                ]}\r\n              />\r\n            ))}\r\n          </View>\r\n        </Animated.View>\r\n\r\n        {/* Espacement en bas pour la TabBar bulle */}\r\n        <View style={{ height: 100 }} />\r\n      </Animated.ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  header: {\r\n    paddingHorizontal: spacing.lg,\r\n    paddingTop: spacing.md,\r\n    paddingBottom: spacing.lg,\r\n  },\r\n  headerContent: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  headerLeft: {\r\n    flex: 1,\r\n  },\r\n  greeting: {\r\n    ...typography.body,\r\n  },\r\n  userName: {\r\n    ...typography.h3,\r\n    marginTop: spacing.xs,\r\n  },\r\n  headerRight: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  avatarContainer: {\r\n    width: 56,\r\n    height: 56,\r\n    borderRadius: 28,\r\n    overflow: 'hidden',\r\n    borderWidth: 2,\r\n    borderColor: '#DC262620',\r\n  },\r\n  avatar: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  avatarPlaceholder: {\r\n    width: '100%',\r\n    height: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  avatarText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n  },\r\n  mainSection: {\r\n    marginBottom: spacing.xl,\r\n  },\r\n  sectionTitle: {\r\n    ...typography.h4,\r\n    marginHorizontal: spacing.lg,\r\n    marginBottom: spacing.md,\r\n  },\r\n  cardsContainer: {\r\n    paddingHorizontal: spacing.lg,\r\n  },\r\n  cardWrapper: {\r\n    marginRight: spacing.md,\r\n  },\r\n  trainingCard: {\r\n    width: SCREEN_WIDTH - spacing.lg * 3,\r\n    height: 180,\r\n    borderRadius: borderRadius.xl,\r\n    padding: spacing.lg,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  disabledCard: {\r\n    opacity: 0.8,\r\n  },\r\n  cardIconContainer: {\r\n    width: 70,\r\n    height: 70,\r\n    borderRadius: 35,\r\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  cardTitle: {\r\n    ...typography.h4,\r\n    color: '#FFFFFF',\r\n    marginBottom: spacing.xs,\r\n  },\r\n  cardDescription: {\r\n    ...typography.body,\r\n    color: 'rgba(255, 255, 255, 0.9)',\r\n  },\r\n  comingSoonBadge: {\r\n    position: 'absolute',\r\n    top: spacing.md,\r\n    right: spacing.md,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n    paddingHorizontal: spacing.sm,\r\n    paddingVertical: spacing.xs,\r\n    borderRadius: borderRadius.sm,\r\n  },\r\n  comingSoonText: {\r\n    ...typography.small,\r\n    color: '#FFFFFF',\r\n  },\r\n  statsSection: {\r\n    marginBottom: spacing.xl,\r\n  },\r\n  statsGrid: {\r\n    flexDirection: 'row',\r\n    paddingHorizontal: spacing.lg,\r\n  },\r\n  statCard: {\r\n    flex: 1,\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n    alignItems: 'center',\r\n    marginHorizontal: spacing.xs,\r\n  },\r\n  statIcon: {\r\n    width: 44,\r\n    height: 44,\r\n    borderRadius: 22,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  statValue: {\r\n    ...typography.h4,\r\n    marginBottom: spacing.xs,\r\n  },\r\n  statLabel: {\r\n    ...typography.small,\r\n    textAlign: 'center',\r\n  },\r\n  tipsSection: {\r\n    marginBottom: spacing.xl,\r\n  },\r\n  tipCard: {\r\n    width: SCREEN_WIDTH - spacing.lg * 2,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    marginRight: spacing.md,\r\n  },\r\n  tipHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  tipBadge: {\r\n    width: 28,\r\n    height: 28,\r\n    borderRadius: 14,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginRight: spacing.sm,\r\n  },\r\n  tipTitle: {\r\n    ...typography.bodyBold,\r\n  },\r\n  tipDescription: {\r\n    ...typography.body,\r\n    lineHeight: 22,\r\n  },\r\n  paginationContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: spacing.md,\r\n  },\r\n  paginationDot: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: 4,\r\n    marginHorizontal: spacing.xs,\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\LoginScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1128,1131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1128,1131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1301,1304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1301,1304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, error]","fix":{"range":[1499,1506],"text":"[clearError, error]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'loading ? 0.7 : 1' }","line":140,"column":17,"nodeType":"ObjectExpression","endLine":140,"endColumn":80},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":143,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":143,"endColumn":37},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":165,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":165,"endColumn":42},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":257,"column":21,"nodeType":"ObjectExpression","endLine":260,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius } from '../styles/theme';\nimport { AuthStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const LoginScreen: React.FC<AuthStackScreenProps<'SignIn'>> = ({ navigation }) => {\n  const { colors } = useTheme();\n  const { signIn, signInAsGuest, error, loading, clearError } = useAuth();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleSignIn = async () => {\n    if (!email || !password) {\n      Alert.alert('Erreur', 'Veuillez remplir tous les champs');\n      return;\n    }\n\n    try {\n      await signIn(email, password);\n    } catch (err: any) {\n      Alert.alert('Erreur de connexion', err.message);\n    }\n  };\n\n  const handleGuestSignIn = async () => {\n    try {\n      await signInAsGuest();\n    } catch (err: any) {\n      Alert.alert('Erreur', err.message);\n    }\n  };\n\n  React.useEffect(() => {\n    if (error) {\n      Alert.alert('Erreur', error.message, [{ text: 'OK', onPress: clearError }]);\n    }\n  }, [error]);\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardView}\n      >\n        <ScrollView\n          contentContainerStyle={styles.scrollContent}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <View style={styles.logoContainer}>\n            <View style={[styles.logo, { backgroundColor: colors.primary }]}>\n              <Ionicons name=\"shield-checkmark\" size={48} color=\"#FFFFFF\" />\n            </View>\n            <Text style={[styles.appName, { color: colors.text }]}>CasqueEnMain</Text>\n            <Text style={[styles.tagline, { color: colors.textSecondary }]}>\n              Votre compagnon de formation\n            </Text>\n          </View>\n\n          <View style={styles.formContainer}>\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Email</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"mail-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"exemple@sdis.fr\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  editable={!loading}\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Mot de passe</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"lock-closed-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"••••••••\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry={!showPassword}\n                  editable={!loading}\n                />\n                <TouchableOpacity onPress={() => setShowPassword(!showPassword)} disabled={loading}>\n                  <Ionicons\n                    name={showPassword ? 'eye-outline' : 'eye-off-outline'}\n                    size={20}\n                    color={colors.textSecondary}\n                  />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            <TouchableOpacity\n              style={styles.forgotPassword}\n              onPress={() => navigation.navigate('ForgotPassword')}\n              disabled={loading}\n            >\n              <Text style={[styles.forgotPasswordText, { color: colors.primary }]}>\n                Mot de passe oublié ?\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[\n                styles.signInButton,\n                { backgroundColor: colors.primary, opacity: loading ? 0.7 : 1 },\n              ]}\n              activeOpacity={0.8}\n              onPress={handleSignIn}\n              disabled={loading}\n            >\n              {loading ? (\n                <ActivityIndicator color=\"#FFFFFF\" />\n              ) : (\n                <Text style={styles.signInButtonText}>Se connecter</Text>\n              )}\n            </TouchableOpacity>\n\n            <View style={styles.dividerContainer}>\n              <View style={[styles.divider, { backgroundColor: colors.border }]} />\n              <Text style={[styles.dividerText, { color: colors.textSecondary }]}>OU</Text>\n              <View style={[styles.divider, { backgroundColor: colors.border }]} />\n            </View>\n\n            <TouchableOpacity\n              style={[\n                styles.secondaryButton,\n                { backgroundColor: colors.surface, borderColor: colors.border },\n              ]}\n              activeOpacity={0.8}\n              onPress={handleGuestSignIn}\n              disabled={loading}\n            >\n              <Ionicons name=\"person-outline\" size={20} color={colors.primary} />\n              <Text style={[styles.secondaryButtonText, { color: colors.text }]}>\n                Continuer en mode invité\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.footer}>\n            <Text style={[styles.footerText, { color: colors.textSecondary }]}>\n              Pas encore de compte ?\n            </Text>\n            <TouchableOpacity onPress={() => navigation.navigate('SignUp')} disabled={loading}>\n              <Text style={[styles.signUpLink, { color: colors.primary }]}>S'inscrire</Text>\n            </TouchableOpacity>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: spacing.lg,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    paddingTop: spacing.xxl,\n    paddingBottom: spacing.xl,\n  },\n  logo: {\n    width: 96,\n    height: 96,\n    borderRadius: borderRadius.xl,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.md,\n  },\n  appName: {\n    ...typography.h2,\n    marginBottom: spacing.xs,\n  },\n  tagline: {\n    ...typography.caption,\n  },\n  formContainer: {\n    flex: 1,\n  },\n  inputContainer: {\n    marginBottom: spacing.md,\n  },\n  label: {\n    ...typography.bodyBold,\n    marginBottom: spacing.sm,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  input: {\n    flex: 1,\n    ...typography.body,\n    marginHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n  },\n  forgotPassword: {\n    alignSelf: 'flex-end',\n    marginBottom: spacing.lg,\n  },\n  forgotPasswordText: {\n    ...typography.caption,\n  },\n  signInButton: {\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  signInButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n  },\n  dividerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  divider: {\n    flex: 1,\n    height: 1,\n  },\n  dividerText: {\n    ...typography.caption,\n    marginHorizontal: spacing.md,\n  },\n  secondaryButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  secondaryButtonText: {\n    ...typography.body,\n    marginLeft: spacing.sm,\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.xl,\n  },\n  footerText: {\n    ...typography.body,\n    marginRight: spacing.xs,\n  },\n  signUpLink: {\n    ...typography.bodyBold,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\ProfileCompleteScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shadows' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'themeMode' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":28,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentPassword' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":25},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":49,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":49,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1695,1695],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1695,1695],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":50,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":50,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1720,1720],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1720,1720],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadAvatar' and 'loadProfileData'. Either include them or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadAvatar, loadProfileData, user]","fix":{"range":[1745,1751],"text":"[loadAvatar, loadProfileData, user]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":55,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":55,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1789,1789],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1789,1789],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":86,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":86,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2583,2585],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":109,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":109,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3116,3116],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3116,3116],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":114,"column":9,"nodeType":null,"messageId":"voidReturnProperty","endLine":114,"endColumn":24},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":124,"column":9,"nodeType":null,"messageId":"voidReturnProperty","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5099,5102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5099,5102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6048,6051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6048,6051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":223,"column":9,"nodeType":null,"messageId":"voidReturnProperty","endLine":223,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":224,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":224,"endColumn":79,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6416,6416],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6416,6416],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { paddingBottom: 100 }","line":245,"column":32,"nodeType":"ObjectExpression","endLine":245,"endColumn":54},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":249,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":249,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":257,"column":37,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":257,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":273,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":273,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8119,8121],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":303,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":303,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9444,9446],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":442,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":442,"endColumn":44},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFFFFF' }","line":448,"column":57,"nodeType":"ObjectExpression","endLine":448,"endColumn":77},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":448,"column":57,"nodeType":"ObjectExpression","endLine":448,"endColumn":77},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":504,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":504,"endColumn":47},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFFFFF' }","line":510,"column":57,"nodeType":"ObjectExpression","endLine":510,"endColumn":77},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":510,"column":57,"nodeType":"ObjectExpression","endLine":510,"endColumn":77},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":571,"column":17,"nodeType":"ObjectExpression","endLine":575,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":631,"column":19,"nodeType":"ObjectExpression","endLine":635,"endColumn":4}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Image,\n  TextInput,\n  ActivityIndicator,\n  Alert,\n  Modal,\n  KeyboardAvoidingView,\n  Platform,\n  RefreshControl,\n  Switch,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport { Ionicons } from '@expo/vector-icons';\nimport { profileService } from '../services/profileService';\nimport { avatarService } from '../services/avatarService';\nimport * as Haptics from 'expo-haptics';\n\nexport const ProfileCompleteScreen: React.FC = () => {\n  const { colors, isDark, setThemeMode, themeMode } = useTheme();\n  const { user, signOut } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n  const [profile, setProfile] = useState<any>(null);\n  const [avatarUri, setAvatarUri] = useState<string | null>(null);\n\n  // Modals states\n  const [editModalVisible, setEditModalVisible] = useState(false);\n  const [passwordModalVisible, setPasswordModalVisible] = useState(false);\n  const [editField, setEditField] = useState<'username' | 'email' | null>(null);\n\n  // Form states\n  const [newUsername, setNewUsername] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      loadProfileData();\n      loadAvatar();\n    }\n  }, [user]);\n\n  const toggleTheme = () => {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    // Toggle between light and dark (not auto)\n    setThemeMode(isDark ? 'light' : 'dark');\n  };\n\n  const loadAvatar = async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const avatar = await avatarService.getAvatar(user.id);\n      if (avatar) {\n        setAvatarUri(avatar);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors du chargement de l'avatar:\", error);\n    }\n  };\n\n  const loadProfileData = async () => {\n    if (!user || user.isGuest) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Charger le profil\n      const { data: profileData } = await profileService.getProfile(user.id);\n      if (profileData) {\n        setProfile(profileData);\n        setNewUsername(profileData.username || '');\n        setNewEmail(user.email || '');\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement du profil:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadProfileData();\n    await loadAvatar();\n    setRefreshing(false);\n  };\n\n  const handleAvatarChange = async () => {\n    if (user?.isGuest) {\n      Alert.alert('Mode invité', \"Cette fonctionnalité n'est pas disponible en mode invité\");\n      return;\n    }\n\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n\n    Alert.alert(\"Changer l'avatar\", 'Comment souhaitez-vous changer votre avatar ?', [\n      {\n        text: 'Prendre une photo',\n        onPress: async () => {\n          const result = await avatarService.takePhotoForAvatar(user!.id);\n          if (result.success && result.uri) {\n            setAvatarUri(result.uri);\n            Alert.alert('Succès', 'Avatar mis à jour avec succès');\n          }\n        },\n      },\n      {\n        text: 'Choisir de la galerie',\n        onPress: async () => {\n          const result = await avatarService.selectAndSaveAvatar(user!.id);\n          if (result.success && result.uri) {\n            setAvatarUri(result.uri);\n            Alert.alert('Succès', 'Avatar mis à jour avec succès');\n          }\n        },\n      },\n      {\n        text: 'Annuler',\n        style: 'cancel',\n      },\n    ]);\n  };\n\n  const handleEditProfile = (field: 'username' | 'email') => {\n    if (user?.isGuest) {\n      Alert.alert('Mode invité', \"Cette fonctionnalité n'est pas disponible en mode invité\");\n      return;\n    }\n\n    setEditField(field);\n    setEditModalVisible(true);\n  };\n\n  const handleSaveProfile = async () => {\n    if (!user || user.isGuest) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      if (editField === 'username') {\n        const { error } = await profileService.updateProfile(user.id, {\n          username: newUsername,\n        });\n        if (error) {\n          Alert.alert('Erreur', error);\n        } else {\n          setProfile({ ...profile, username: newUsername });\n          Alert.alert('Succès', 'Pseudo mis à jour');\n        }\n      } else if (editField === 'email') {\n        const { error } = await profileService.updateEmail(newEmail);\n        if (error) {\n          Alert.alert('Erreur', error);\n        } else {\n          Alert.alert('Succès', 'Un email de confirmation a été envoyé');\n        }\n      }\n      setEditModalVisible(false);\n    } catch (error: any) {\n      Alert.alert('Erreur', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChangePassword = async () => {\n    if (!newPassword || !confirmPassword) {\n      Alert.alert('Erreur', 'Veuillez remplir tous les champs');\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      Alert.alert('Erreur', 'Les mots de passe ne correspondent pas');\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      Alert.alert('Erreur', 'Le mot de passe doit contenir au moins 6 caractères');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { error } = await profileService.updatePassword(newPassword);\n      if (error) {\n        Alert.alert('Erreur', error);\n      } else {\n        Alert.alert('Succès', 'Mot de passe mis à jour');\n        setPasswordModalVisible(false);\n        setNewPassword('');\n        setConfirmPassword('');\n        setCurrentPassword('');\n      }\n    } catch (error: any) {\n      Alert.alert('Erreur', error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignOut = () => {\n    Alert.alert('Déconnexion', 'Êtes-vous sûr de vouloir vous déconnecter ?', [\n      { text: 'Annuler', style: 'cancel' },\n      {\n        text: 'Déconnexion',\n        style: 'destructive',\n        onPress: async () => {\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n          await signOut();\n        },\n      },\n    ]);\n  };\n\n  if (loading && !profile) {\n    return (\n      <View\n        style={[styles.container, styles.centerContent, { backgroundColor: colors.background }]}\n      >\n        <ActivityIndicator size=\"large\" color={colors.primary} />\n      </View>\n    );\n  }\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <ScrollView\n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={{ paddingBottom: 100 }}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[colors.primary]}\n            tintColor={colors.primary}\n          />\n        }\n      >\n        {/* Header avec Avatar */}\n        <View style={styles.header}>\n          <TouchableOpacity onPress={handleAvatarChange} activeOpacity={0.8}>\n            <View style={[styles.avatarContainer, { backgroundColor: colors.surface }]}>\n              {avatarUri ? (\n                <Image source={{ uri: avatarUri }} style={styles.avatar} />\n              ) : (\n                <Ionicons name=\"person\" size={48} color={colors.primary} />\n              )}\n              {!user?.isGuest && (\n                <View style={[styles.avatarBadge, { backgroundColor: colors.primary }]}>\n                  <Ionicons name=\"camera\" size={16} color=\"#FFFFFF\" />\n                </View>\n              )}\n            </View>\n          </TouchableOpacity>\n\n          <Text style={[styles.userName, { color: colors.text }]}>\n            {user?.isGuest ? 'Mode Invité' : profile?.username || user?.email?.split('@')[0]}\n          </Text>\n\n          {!user?.isGuest && (\n            <Text style={[styles.userEmail, { color: colors.textSecondary }]}>{user?.email}</Text>\n          )}\n\n          {profile?.concours_type && (\n            <View style={[styles.concoursChip, { backgroundColor: colors.primary }]}>\n              <Text style={styles.concoursText}>\n                Concours {profile.concours_type === 'caporal' ? 'Caporal' : 'Lieutenant'}\n              </Text>\n            </View>\n          )}\n        </View>\n\n        {/* Informations du profil */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Informations</Text>\n\n          <TouchableOpacity\n            style={[styles.infoRow, { backgroundColor: colors.surface }]}\n            onPress={() => handleEditProfile('username')}\n            disabled={user?.isGuest}\n          >\n            <View style={styles.infoContent}>\n              <Ionicons name=\"person-outline\" size={20} color={colors.textSecondary} />\n              <View style={styles.infoText}>\n                <Text style={[styles.infoLabel, { color: colors.textSecondary }]}>Pseudo</Text>\n                <Text style={[styles.infoValue, { color: colors.text }]}>\n                  {user?.isGuest ? 'Mode invité' : profile?.username || '-'}\n                </Text>\n              </View>\n            </View>\n            {!user?.isGuest && (\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.textSecondary} />\n            )}\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.infoRow, { backgroundColor: colors.surface }]}\n            onPress={() => handleEditProfile('email')}\n            disabled={user?.isGuest}\n          >\n            <View style={styles.infoContent}>\n              <Ionicons name=\"mail-outline\" size={20} color={colors.textSecondary} />\n              <View style={styles.infoText}>\n                <Text style={[styles.infoLabel, { color: colors.textSecondary }]}>Email</Text>\n                <Text style={[styles.infoValue, { color: colors.text }]}>\n                  {user?.isGuest ? 'Non disponible' : user?.email}\n                </Text>\n              </View>\n            </View>\n            {!user?.isGuest && (\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.textSecondary} />\n            )}\n          </TouchableOpacity>\n\n          {!user?.isGuest && (\n            <TouchableOpacity\n              style={[styles.infoRow, { backgroundColor: colors.surface }]}\n              onPress={() => setPasswordModalVisible(true)}\n            >\n              <View style={styles.infoContent}>\n                <Ionicons name=\"lock-closed-outline\" size={20} color={colors.textSecondary} />\n                <View style={styles.infoText}>\n                  <Text style={[styles.infoLabel, { color: colors.textSecondary }]}>\n                    Mot de passe\n                  </Text>\n                  <Text style={[styles.infoValue, { color: colors.text }]}>••••••••</Text>\n                </View>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.textSecondary} />\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {/* Préférences */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Préférences</Text>\n\n          <View style={[styles.preferenceRow, { backgroundColor: colors.surface }]}>\n            <TouchableOpacity\n              style={styles.preferenceContent}\n              onPress={toggleTheme}\n              activeOpacity={0.7}\n            >\n              <Ionicons name={isDark ? 'moon' : 'sunny'} size={22} color={colors.primary} />\n              <View style={styles.preferenceText}>\n                <Text style={[styles.preferenceLabel, { color: colors.text }]}>Mode sombre</Text>\n                <Text style={[styles.preferenceValue, { color: colors.textSecondary }]}>\n                  {isDark ? 'Activé' : 'Désactivé'}\n                </Text>\n              </View>\n            </TouchableOpacity>\n            <Switch\n              value={isDark}\n              onValueChange={toggleTheme}\n              trackColor={{ false: colors.border, true: colors.primary }}\n              thumbColor={isDark ? '#FFFFFF' : '#F4F3F4'}\n              ios_backgroundColor={colors.border}\n            />\n          </View>\n        </View>\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <TouchableOpacity\n            style={[styles.actionButton, { backgroundColor: colors.surface }]}\n            onPress={handleSignOut}\n          >\n            <Ionicons name=\"log-out-outline\" size={22} color={colors.primary} />\n            <Text style={[styles.actionText, { color: colors.primary }]}>\n              {user?.isGuest ? 'Quitter le mode invité' : 'Déconnexion'}\n            </Text>\n          </TouchableOpacity>\n\n          {user?.isGuest && (\n            <View style={[styles.guestInfo, { backgroundColor: `${colors.primary}10` }]}>\n              <Ionicons name=\"information-circle-outline\" size={20} color={colors.primary} />\n              <Text style={[styles.guestInfoText, { color: colors.text }]}>\n                Créez un compte pour sauvegarder votre progression et débloquer toutes les\n                fonctionnalités\n              </Text>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n\n      {/* Modal Édition */}\n      <Modal\n        visible={editModalVisible}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={() => setEditModalVisible(false)}\n      >\n        <KeyboardAvoidingView\n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n          style={styles.modalContainer}\n        >\n          <View style={[styles.modalContent, { backgroundColor: colors.background }]}>\n            <View style={styles.modalHeader}>\n              <Text style={[styles.modalTitle, { color: colors.text }]}>\n                Modifier {editField === 'username' ? 'le pseudo' : \"l'email\"}\n              </Text>\n              <TouchableOpacity onPress={() => setEditModalVisible(false)}>\n                <Ionicons name=\"close\" size={24} color={colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <TextInput\n              style={[styles.modalInput, { backgroundColor: colors.surface, color: colors.text }]}\n              value={editField === 'username' ? newUsername : newEmail}\n              onChangeText={editField === 'username' ? setNewUsername : setNewEmail}\n              placeholder={editField === 'username' ? 'Nouveau pseudo' : 'Nouvel email'}\n              placeholderTextColor={colors.textSecondary}\n              keyboardType={editField === 'email' ? 'email-address' : 'default'}\n              autoCapitalize=\"none\"\n            />\n\n            <View style={styles.modalButtons}>\n              <TouchableOpacity\n                style={[styles.modalButton, { backgroundColor: colors.surface }]}\n                onPress={() => setEditModalVisible(false)}\n              >\n                <Text style={[styles.modalButtonText, { color: colors.text }]}>Annuler</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={[styles.modalButton, { backgroundColor: colors.primary }]}\n                onPress={handleSaveProfile}\n                disabled={loading}\n              >\n                {loading ? (\n                  <ActivityIndicator color=\"#FFFFFF\" />\n                ) : (\n                  <Text style={[styles.modalButtonText, { color: '#FFFFFF' }]}>Enregistrer</Text>\n                )}\n              </TouchableOpacity>\n            </View>\n          </View>\n        </KeyboardAvoidingView>\n      </Modal>\n\n      {/* Modal Mot de passe */}\n      <Modal\n        visible={passwordModalVisible}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={() => setPasswordModalVisible(false)}\n      >\n        <KeyboardAvoidingView\n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n          style={styles.modalContainer}\n        >\n          <View style={[styles.modalContent, { backgroundColor: colors.background }]}>\n            <View style={styles.modalHeader}>\n              <Text style={[styles.modalTitle, { color: colors.text }]}>\n                Changer le mot de passe\n              </Text>\n              <TouchableOpacity onPress={() => setPasswordModalVisible(false)}>\n                <Ionicons name=\"close\" size={24} color={colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <TextInput\n              style={[styles.modalInput, { backgroundColor: colors.surface, color: colors.text }]}\n              value={newPassword}\n              onChangeText={setNewPassword}\n              placeholder=\"Nouveau mot de passe\"\n              placeholderTextColor={colors.textSecondary}\n              secureTextEntry\n            />\n\n            <TextInput\n              style={[styles.modalInput, { backgroundColor: colors.surface, color: colors.text }]}\n              value={confirmPassword}\n              onChangeText={setConfirmPassword}\n              placeholder=\"Confirmer le mot de passe\"\n              placeholderTextColor={colors.textSecondary}\n              secureTextEntry\n            />\n\n            <View style={styles.modalButtons}>\n              <TouchableOpacity\n                style={[styles.modalButton, { backgroundColor: colors.surface }]}\n                onPress={() => setPasswordModalVisible(false)}\n              >\n                <Text style={[styles.modalButtonText, { color: colors.text }]}>Annuler</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={[styles.modalButton, { backgroundColor: colors.primary }]}\n                onPress={handleChangePassword}\n                disabled={loading}\n              >\n                {loading ? (\n                  <ActivityIndicator color=\"#FFFFFF\" />\n                ) : (\n                  <Text style={[styles.modalButtonText, { color: '#FFFFFF' }]}>Changer</Text>\n                )}\n              </TouchableOpacity>\n            </View>\n          </View>\n        </KeyboardAvoidingView>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  centerContent: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    paddingVertical: spacing.xl,\n  },\n  avatarContainer: {\n    width: 100,\n    height: 100,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.md,\n    position: 'relative',\n  },\n  avatar: {\n    width: 100,\n    height: 100,\n    borderRadius: borderRadius.full,\n  },\n  avatarBadge: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 32,\n    height: 32,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  userName: {\n    ...typography.h3,\n    marginBottom: spacing.xs,\n  },\n  userEmail: {\n    ...typography.body,\n    marginBottom: spacing.sm,\n  },\n  concoursChip: {\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.xs,\n    borderRadius: borderRadius.full,\n    marginTop: spacing.sm,\n  },\n  concoursText: {\n    ...typography.caption,\n    color: '#FFFFFF',\n    fontWeight: '600',\n  },\n  section: {\n    paddingHorizontal: spacing.lg,\n    marginBottom: spacing.xl,\n  },\n  sectionTitle: {\n    ...typography.h4,\n    marginBottom: spacing.md,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.sm,\n  },\n  infoContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  infoText: {\n    marginLeft: spacing.md,\n    flex: 1,\n  },\n  infoLabel: {\n    ...typography.small,\n    marginBottom: spacing.xs,\n  },\n  infoValue: {\n    ...typography.body,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.sm,\n  },\n  actionText: {\n    ...typography.bodyBold,\n    marginLeft: spacing.sm,\n  },\n  guestInfo: {\n    flexDirection: 'row',\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginTop: spacing.sm,\n  },\n  guestInfoText: {\n    ...typography.caption,\n    marginLeft: spacing.sm,\n    flex: 1,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  modalContent: {\n    borderTopLeftRadius: borderRadius.xl,\n    borderTopRightRadius: borderRadius.xl,\n    padding: spacing.lg,\n    paddingBottom: spacing.xxl,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: spacing.lg,\n  },\n  modalTitle: {\n    ...typography.h4,\n  },\n  modalInput: {\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.md,\n    ...typography.body,\n  },\n  modalButtons: {\n    flexDirection: 'row',\n    marginTop: spacing.md,\n  },\n  modalButton: {\n    flex: 1,\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n    marginHorizontal: spacing.xs,\n  },\n  modalButtonText: {\n    ...typography.bodyBold,\n  },\n  preferenceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.sm,\n  },\n  preferenceContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  preferenceText: {\n    marginLeft: spacing.md,\n    flex: 1,\n  },\n  preferenceLabel: {\n    ...typography.bodyBold,\n    marginBottom: spacing.xs,\n  },\n  preferenceValue: {\n    ...typography.small,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\ProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDark' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1664,1693],"text":"(user?.username ?? user?.email)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1694,1696],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderBottomWidth: 'index < menuItems.length - 1 ? 1 : 0' }","line":64,"column":17,"nodeType":"ObjectExpression","endLine":68,"endColumn":18},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: \"themeMode === mode ? '#FFFFFF' : colors.text\" }","line":110,"column":21,"nodeType":"ObjectExpression","endLine":110,"endColumn":76},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: \"themeMode === mode ? '#FFFFFF' : colors.text\" }","line":110,"column":21,"nodeType":"ObjectExpression","endLine":110,"endColumn":76},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":123,"column":19,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":138,"endColumn":13},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":129,"column":17,"nodeType":null,"messageId":"voidReturnProperty","endLine":129,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":132,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image, Alert } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport { ProfileStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const ProfileScreen: React.FC<ProfileStackScreenProps<'ProfileScreen'>> = ({\n  navigation,\n}) => {\n  const { colors, isDark, setThemeMode, themeMode } = useTheme();\n  const { user, signOut } = useAuth();\n\n  const menuItems = [\n    { id: '1', title: 'Informations personnelles', icon: 'person-outline' as const },\n    { id: '2', title: 'Formation et certifications', icon: 'ribbon-outline' as const },\n    { id: '3', title: 'Historique des gardes', icon: 'time-outline' as const },\n    { id: '4', title: 'Documents', icon: 'document-outline' as const },\n    { id: '5', title: 'Notifications', icon: 'notifications-outline' as const },\n    { id: '6', title: 'Aide et support', icon: 'help-circle-outline' as const },\n  ];\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.profileHeader}>\n          <View style={[styles.avatarContainer, { backgroundColor: colors.surface }]}>\n            <Ionicons name=\"person\" size={48} color={colors.primary} />\n          </View>\n          <Text style={[styles.userName, { color: colors.text }]}>\n            {user?.username || user?.email || 'Utilisateur'}\n          </Text>\n          <Text style={[styles.userRole, { color: colors.textSecondary }]}>\n            {user?.isGuest ? 'Mode invité' : 'Sapeur-Pompier 1ère classe'}\n          </Text>\n          <Text style={[styles.userStation, { color: colors.textSecondary }]}>\n            Centre de secours principal\n          </Text>\n        </View>\n\n        <View style={styles.statsContainer}>\n          <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>127</Text>\n            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Interventions</Text>\n          </View>\n          <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>8</Text>\n            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Années service</Text>\n          </View>\n          <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>24</Text>\n            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Formations</Text>\n          </View>\n        </View>\n\n        <View style={styles.menuSection}>\n          {menuItems.map((item, index) => (\n            <TouchableOpacity\n              key={item.id}\n              style={[\n                styles.menuItem,\n                {\n                  backgroundColor: colors.surface,\n                  borderBottomWidth: index < menuItems.length - 1 ? 1 : 0,\n                  borderBottomColor: colors.border,\n                },\n              ]}\n              activeOpacity={0.7}\n            >\n              <View style={styles.menuItemContent}>\n                <Ionicons name={item.icon} size={22} color={colors.textSecondary} />\n                <Text style={[styles.menuItemText, { color: colors.text }]}>{item.title}</Text>\n              </View>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.textSecondary} />\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        <View style={[styles.themeSection, { backgroundColor: colors.surface }]}>\n          <Text style={[styles.themeSectionTitle, { color: colors.text }]}>Apparence</Text>\n          <View style={styles.themeOptions}>\n            {(['auto', 'light', 'dark'] as const).map(mode => (\n              <TouchableOpacity\n                key={mode}\n                style={[\n                  styles.themeOption,\n                  {\n                    backgroundColor: themeMode === mode ? colors.primary : colors.background,\n                    borderColor: colors.border,\n                  },\n                ]}\n                onPress={() => setThemeMode(mode)}\n              >\n                <Ionicons\n                  name={\n                    mode === 'auto'\n                      ? 'phone-portrait-outline'\n                      : mode === 'light'\n                        ? 'sunny-outline'\n                        : 'moon-outline'\n                  }\n                  size={20}\n                  color={themeMode === mode ? '#FFFFFF' : colors.textSecondary}\n                />\n                <Text\n                  style={[\n                    styles.themeOptionText,\n                    { color: themeMode === mode ? '#FFFFFF' : colors.text },\n                  ]}\n                >\n                  {mode === 'auto' ? 'Auto' : mode === 'light' ? 'Clair' : 'Sombre'}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        <TouchableOpacity\n          style={[styles.logoutButton, { backgroundColor: colors.surface }]}\n          activeOpacity={0.7}\n          onPress={async () => {\n            Alert.alert('Déconnexion', 'Êtes-vous sûr de vouloir vous déconnecter ?', [\n              { text: 'Annuler', style: 'cancel' },\n              {\n                text: 'Déconnexion',\n                style: 'destructive',\n                onPress: async () => {\n                  try {\n                    await signOut();\n                  } catch (error) {\n                    Alert.alert('Erreur', 'Impossible de se déconnecter');\n                  }\n                },\n              },\n            ]);\n          }}\n        >\n          <Ionicons name=\"log-out-outline\" size={22} color={colors.primary} />\n          <Text style={[styles.logoutText, { color: colors.primary }]}>Déconnexion</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  profileHeader: {\n    alignItems: 'center',\n    paddingTop: spacing.lg,\n    paddingBottom: spacing.xl,\n  },\n  avatarContainer: {\n    width: 100,\n    height: 100,\n    borderRadius: borderRadius.full,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: spacing.md,\n  },\n  userName: {\n    ...typography.h3,\n    marginBottom: spacing.xs,\n  },\n  userRole: {\n    ...typography.body,\n    marginBottom: spacing.xs,\n  },\n  userStation: {\n    ...typography.caption,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: spacing.lg,\n    marginBottom: spacing.xl,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    padding: spacing.md,\n    marginHorizontal: spacing.xs,\n    borderRadius: borderRadius.lg,\n    ...shadows.sm,\n  },\n  statValue: {\n    ...typography.h3,\n    marginBottom: spacing.xs,\n  },\n  statLabel: {\n    ...typography.small,\n  },\n  menuSection: {\n    marginBottom: spacing.lg,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.lg,\n  },\n  menuItemContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  menuItemText: {\n    ...typography.body,\n    marginLeft: spacing.md,\n  },\n  themeSection: {\n    marginHorizontal: spacing.lg,\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.lg,\n  },\n  themeSectionTitle: {\n    ...typography.bodyBold,\n    marginBottom: spacing.md,\n  },\n  themeOptions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  themeOption: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.sm,\n    marginHorizontal: spacing.xs,\n    borderRadius: borderRadius.md,\n    borderWidth: 1,\n  },\n  themeOptionText: {\n    ...typography.caption,\n    marginLeft: spacing.xs,\n  },\n  logoutButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.xl,\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n  },\n  logoutText: {\n    ...typography.bodyBold,\n    marginLeft: spacing.sm,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\ProgressScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":97,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":97,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3385,3385],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3385,3385],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":105,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":105,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3546,3546],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3546,3546],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3821,3823],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3890,3892],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3962,3964],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { progressService } from '../services/progressService';\nimport { useAuth } from '../contexts/AuthContext';\nimport { SegmentedControl } from '../components/progress/SegmentedControl';\nimport { OverviewTab } from '../components/progress/OverviewTab';\nimport { SubjectsTab } from '../components/progress/SubjectsTab';\nimport { HistoryTab } from '../components/progress/HistoryTab';\nimport { ObjectivesTab } from '../components/progress/ObjectivesTab';\nimport Animated, { FadeIn } from 'react-native-reanimated';\nimport { useFocusEffect } from '@react-navigation/native';\n\nexport const ProgressScreen = () => {\n  const { colors } = useTheme();\n  const { user } = useAuth();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [weeklyData, setWeeklyData] = useState({\n    labels: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'],\n    datasets: [\n      {\n        data: [0, 0, 0, 0, 0, 0, 0],\n      },\n    ],\n  });\n  const [totalStats, setTotalStats] = useState({\n    totalSessions: 0,\n    totalQuestions: 0,\n    averageScore: 0,\n    totalTime: 0,\n    streak: 0,\n    bestScore: 0,\n  });\n\n  const segments = ['Global', 'Matières', 'Historique', 'Objectifs'];\n\n  const fetchProgressData = useCallback(async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      // Récupérer les performances hebdomadaires\n      const weeklyPerformance = await progressService.getWeeklyPerformance(user.id);\n\n      // Récupérer les objectifs et badges pour les stats globales\n      const objectives = await progressService.getUserObjectivesAndBadges(user.id);\n\n      if (weeklyPerformance && weeklyPerformance.length > 0) {\n        // Transformer les données pour le graphique\n        const weeklyScores = weeklyPerformance.map(day => day.score_moyen);\n\n        setWeeklyData({\n          labels: weeklyPerformance.map(day => day.jour_nom),\n          datasets: [\n            {\n              data: weeklyScores,\n            },\n          ],\n        });\n      }\n\n      if (objectives) {\n        // Récupérer les sessions détaillées pour calculer le meilleur score\n        const sessions = await progressService.getUserSessionsDetailed(user.id, 100);\n        let bestScore = 0;\n\n        if (sessions && sessions.length > 0) {\n          bestScore = Math.max(...sessions.map(s => Number(s.score)));\n        }\n\n        // Calculer la moyenne globale basée sur toutes les sessions\n        const globalAverage =\n          sessions && sessions.length > 0\n            ? Math.round(sessions.reduce((acc, s) => acc + Number(s.score), 0) / sessions.length)\n            : 0;\n\n        setTotalStats({\n          totalSessions: objectives.total_sessions,\n          totalQuestions: objectives.total_questions,\n          averageScore: globalAverage,\n          totalTime: Math.round(objectives.temps_aujourdhui / 60),\n          streak: objectives.serie_actuelle,\n          bestScore: Math.round(bestScore),\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching progress data:', error);\n    }\n  }, [user]);\n\n  // Rafraîchir les données à chaque fois que l'écran devient visible\n  useFocusEffect(\n    useCallback(() => {\n      if (user) {\n        fetchProgressData();\n      }\n    }, [user, fetchProgressData])\n  );\n\n  // Charger aussi les données au montage initial\n  useEffect(() => {\n    if (user) {\n      fetchProgressData();\n    }\n  }, [user, fetchProgressData]);\n\n  const renderContent = () => {\n    switch (selectedIndex) {\n      case 0:\n        return <OverviewTab weeklyData={weeklyData} totalStats={totalStats} />;\n      case 1:\n        return <SubjectsTab userId={user?.id || ''} />;\n      case 2:\n        return <HistoryTab userId={user?.id || ''} />;\n      case 3:\n        return <ObjectivesTab userId={user?.id || ''} />;\n      default:\n        return <OverviewTab weeklyData={weeklyData} totalStats={totalStats} />;\n    }\n  };\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <Animated.View entering={FadeIn} style={styles.header}>\n        <Text style={[styles.title, { color: colors.text }]}>Vos Progrès</Text>\n        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\n          Suivez votre évolution et atteignez vos objectifs\n        </Text>\n      </Animated.View>\n\n      <SegmentedControl\n        segments={segments}\n        selectedIndex={selectedIndex}\n        onIndexChange={setSelectedIndex}\n      />\n\n      <View style={styles.content}>{renderContent()}</View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    paddingHorizontal: 20,\n    paddingTop: 40,\n    paddingBottom: 15,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  subtitle: {\n    fontSize: 16,\n  },\n  content: {\n    flex: 1,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\RankingScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":51},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#C0C0C0' }","line":41,"column":44,"nodeType":"ObjectExpression","endLine":41,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#C0C0C0' }","line":41,"column":44,"nodeType":"ObjectExpression","endLine":41,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: -20 }","line":49,"column":42,"nodeType":"ObjectExpression","endLine":49,"endColumn":60},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFD700' }","line":53,"column":44,"nodeType":"ObjectExpression","endLine":53,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFD700' }","line":53,"column":44,"nodeType":"ObjectExpression","endLine":53,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#CD7F32' }","line":68,"column":44,"nodeType":"ObjectExpression","endLine":68,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#CD7F32' }","line":68,"column":44,"nodeType":"ObjectExpression","endLine":68,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":226,"column":19,"nodeType":"ObjectExpression","endLine":230,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { View, Text, StyleSheet, ScrollView, Image } from 'react-native';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nexport const RankingScreen = () => {\r\n  const { colors } = useTheme();\r\n\r\n  const mockRankings = [\r\n    { rank: 1, name: 'Sophie Martin', score: 2850, avatar: '👩', trend: 'up' },\r\n    { rank: 2, name: 'Lucas Dubois', score: 2720, avatar: '👨', trend: 'up' },\r\n    { rank: 3, name: 'Emma Bernard', score: 2680, avatar: '👩‍🦰', trend: 'down' },\r\n    { rank: 4, name: 'Thomas Petit', score: 2550, avatar: '🧑', trend: 'stable' },\r\n    { rank: 5, name: 'Marie Durand', score: 2480, avatar: '👩‍🦱', trend: 'up' },\r\n  ];\r\n\r\n  const getRankColor = (rank: number) => {\r\n    if (rank === 1) {\r\n      return '#FFD700';\r\n    }\r\n    if (rank === 2) {\r\n      return '#C0C0C0';\r\n    }\r\n    if (rank === 3) {\r\n      return '#CD7F32';\r\n    }\r\n    return colors.textSecondary;\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      <View style={styles.header}>\r\n        <Text style={[styles.title, { color: colors.text }]}>Classement</Text>\r\n        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\r\n          Top 100 des candidats\r\n        </Text>\r\n      </View>\r\n\r\n      <View style={[styles.podiumContainer, { backgroundColor: colors.surface }]}>\r\n        <View style={styles.podiumItem}>\r\n          <Text style={[styles.podiumRank, { color: '#C0C0C0' }]}>2</Text>\r\n          <View style={[styles.podiumAvatar, { backgroundColor: colors.background }]}>\r\n            <Text style={styles.podiumEmoji}>👨</Text>\r\n          </View>\r\n          <Text style={[styles.podiumName, { color: colors.text }]}>Lucas</Text>\r\n          <Text style={[styles.podiumScore, { color: colors.primary }]}>2720</Text>\r\n        </View>\r\n\r\n        <View style={[styles.podiumItem, { marginTop: -20 }]}>\r\n          <View style={styles.crownContainer}>\r\n            <Ionicons name=\"trophy\" size={24} color=\"#FFD700\" />\r\n          </View>\r\n          <Text style={[styles.podiumRank, { color: '#FFD700' }]}>1</Text>\r\n          <View\r\n            style={[\r\n              styles.podiumAvatar,\r\n              styles.podiumAvatarFirst,\r\n              { backgroundColor: colors.background },\r\n            ]}\r\n          >\r\n            <Text style={styles.podiumEmoji}>👩</Text>\r\n          </View>\r\n          <Text style={[styles.podiumName, { color: colors.text }]}>Sophie</Text>\r\n          <Text style={[styles.podiumScore, { color: colors.primary }]}>2850</Text>\r\n        </View>\r\n\r\n        <View style={styles.podiumItem}>\r\n          <Text style={[styles.podiumRank, { color: '#CD7F32' }]}>3</Text>\r\n          <View style={[styles.podiumAvatar, { backgroundColor: colors.background }]}>\r\n            <Text style={styles.podiumEmoji}>👩‍🦰</Text>\r\n          </View>\r\n          <Text style={[styles.podiumName, { color: colors.text }]}>Emma</Text>\r\n          <Text style={[styles.podiumScore, { color: colors.primary }]}>2680</Text>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.listContainer}>\r\n        {mockRankings.map(player => (\r\n          <View key={player.rank} style={[styles.rankItem, { backgroundColor: colors.surface }]}>\r\n            <View style={styles.rankLeft}>\r\n              <Text style={[styles.rankNumber, { color: getRankColor(player.rank) }]}>\r\n                #{player.rank}\r\n              </Text>\r\n              <View style={[styles.avatar, { backgroundColor: colors.background }]}>\r\n                <Text style={styles.avatarEmoji}>{player.avatar}</Text>\r\n              </View>\r\n              <View>\r\n                <Text style={[styles.playerName, { color: colors.text }]}>{player.name}</Text>\r\n                <Text style={[styles.playerScore, { color: colors.textSecondary }]}>\r\n                  {player.score} points\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            <View style={styles.rankRight}>\r\n              {player.trend === 'up' && <Ionicons name=\"arrow-up\" size={20} color=\"#4CAF50\" />}\r\n              {player.trend === 'down' && <Ionicons name=\"arrow-down\" size={20} color=\"#F44336\" />}\r\n              {player.trend === 'stable' && (\r\n                <Ionicons name=\"remove\" size={20} color={colors.textSecondary} />\r\n              )}\r\n            </View>\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <View style={[styles.comingSoonBanner, { backgroundColor: colors.warning }]}>\r\n        <Ionicons name=\"construct\" size={24} color=\"#FFF\" />\r\n        <Text style={styles.comingSoonText}>Fonctionnalité complète bientôt disponible</Text>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  header: {\r\n    padding: 20,\r\n    paddingTop: 60,\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n    marginBottom: 8,\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n  },\r\n  podiumContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'flex-end',\r\n    margin: 20,\r\n    paddingVertical: 30,\r\n    borderRadius: 20,\r\n  },\r\n  podiumItem: {\r\n    alignItems: 'center',\r\n  },\r\n  crownContainer: {\r\n    marginBottom: 8,\r\n  },\r\n  podiumRank: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 8,\r\n  },\r\n  podiumAvatar: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  podiumAvatarFirst: {\r\n    width: 70,\r\n    height: 70,\r\n    borderRadius: 35,\r\n  },\r\n  podiumEmoji: {\r\n    fontSize: 30,\r\n  },\r\n  podiumName: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginBottom: 4,\r\n  },\r\n  podiumScore: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  listContainer: {\r\n    padding: 20,\r\n    gap: 12,\r\n  },\r\n  rankItem: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: 16,\r\n    borderRadius: 12,\r\n    marginBottom: 8,\r\n  },\r\n  rankLeft: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: 12,\r\n  },\r\n  rankNumber: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    width: 35,\r\n  },\r\n  avatar: {\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: 20,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  avatarEmoji: {\r\n    fontSize: 20,\r\n  },\r\n  playerName: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    marginBottom: 2,\r\n  },\r\n  playerScore: {\r\n    fontSize: 14,\r\n  },\r\n  rankRight: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  comingSoonBanner: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    gap: 12,\r\n    margin: 20,\r\n    padding: 16,\r\n    borderRadius: 12,\r\n  },\r\n  comingSoonText: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    color: '#FFF',\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\RegisterScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1831,1834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1831,1834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'clearError'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [clearError, error]","fix":{"range":[2043,2050],"text":"[clearError, error]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'loading ? 0.7 : 1' }","line":195,"column":17,"nodeType":"ObjectExpression","endLine":195,"endColumn":80},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":198,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":198,"endColumn":37},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":284,"column":21,"nodeType":"ObjectExpression","endLine":287,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius } from '../styles/theme';\nimport { AuthStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const RegisterScreen: React.FC<AuthStackScreenProps<'SignUp'>> = ({ navigation }) => {\n  const { colors } = useTheme();\n  const { signUp, error, loading, clearError } = useAuth();\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleSignUp = async () => {\n    if (!username || !email || !password || !confirmPassword) {\n      Alert.alert('Erreur', 'Veuillez remplir tous les champs');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      Alert.alert('Erreur', 'Les mots de passe ne correspondent pas');\n      return;\n    }\n\n    if (password.length < 6) {\n      Alert.alert('Erreur', 'Le mot de passe doit contenir au moins 6 caractères');\n      return;\n    }\n\n    try {\n      await signUp(email, password, username);\n      Alert.alert(\n        'Inscription réussie',\n        'Un email de confirmation vous a été envoyé. Veuillez vérifier votre boîte mail.',\n        [{ text: 'OK', onPress: () => navigation.navigate('SignIn') }]\n      );\n    } catch (err: any) {\n      Alert.alert(\"Erreur d'inscription\", err.message);\n    }\n  };\n\n  React.useEffect(() => {\n    if (error) {\n      Alert.alert('Erreur', error.message, [{ text: 'OK', onPress: clearError }]);\n    }\n  }, [error]);\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardView}\n      >\n        <ScrollView\n          contentContainerStyle={styles.scrollContent}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Ionicons name=\"arrow-back\" size={24} color={colors.text} />\n          </TouchableOpacity>\n\n          <View style={styles.header}>\n            <Text style={[styles.title, { color: colors.text }]}>Créer un compte</Text>\n            <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\n              Rejoignez la communauté CasqueEnMain\n            </Text>\n          </View>\n\n          <View style={styles.formContainer}>\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Pseudo *</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"person-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"Votre pseudo\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={username}\n                  onChangeText={setUsername}\n                  autoCapitalize=\"none\"\n                  editable={!loading}\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Email *</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"mail-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"exemple@sdis.fr\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  editable={!loading}\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>Mot de passe *</Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"lock-closed-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"Minimum 6 caractères\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry={!showPassword}\n                  editable={!loading}\n                />\n                <TouchableOpacity onPress={() => setShowPassword(!showPassword)} disabled={loading}>\n                  <Ionicons\n                    name={showPassword ? 'eye-outline' : 'eye-off-outline'}\n                    size={20}\n                    color={colors.textSecondary}\n                  />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={[styles.label, { color: colors.text }]}>\n                Confirmer le mot de passe *\n              </Text>\n              <View\n                style={[\n                  styles.inputWrapper,\n                  { backgroundColor: colors.surface, borderColor: colors.border },\n                ]}\n              >\n                <Ionicons name=\"lock-closed-outline\" size={20} color={colors.textSecondary} />\n                <TextInput\n                  style={[styles.input, { color: colors.text }]}\n                  placeholder=\"Retapez votre mot de passe\"\n                  placeholderTextColor={colors.textSecondary}\n                  value={confirmPassword}\n                  onChangeText={setConfirmPassword}\n                  secureTextEntry={!showConfirmPassword}\n                  editable={!loading}\n                />\n                <TouchableOpacity\n                  onPress={() => setShowConfirmPassword(!showConfirmPassword)}\n                  disabled={loading}\n                >\n                  <Ionicons\n                    name={showConfirmPassword ? 'eye-outline' : 'eye-off-outline'}\n                    size={20}\n                    color={colors.textSecondary}\n                  />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            <TouchableOpacity\n              style={[\n                styles.signUpButton,\n                { backgroundColor: colors.primary, opacity: loading ? 0.7 : 1 },\n              ]}\n              activeOpacity={0.8}\n              onPress={handleSignUp}\n              disabled={loading}\n            >\n              {loading ? (\n                <ActivityIndicator color=\"#FFFFFF\" />\n              ) : (\n                <Text style={styles.signUpButtonText}>S'inscrire</Text>\n              )}\n            </TouchableOpacity>\n\n            <Text style={[styles.termsText, { color: colors.textSecondary }]}>\n              En vous inscrivant, vous acceptez nos conditions d'utilisation et notre politique de\n              confidentialité\n            </Text>\n          </View>\n\n          <View style={styles.footer}>\n            <Text style={[styles.footerText, { color: colors.textSecondary }]}>\n              Déjà un compte ?\n            </Text>\n            <TouchableOpacity onPress={() => navigation.navigate('SignIn')} disabled={loading}>\n              <Text style={[styles.signInLink, { color: colors.primary }]}>Se connecter</Text>\n            </TouchableOpacity>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: spacing.lg,\n  },\n  backButton: {\n    paddingTop: spacing.md,\n    paddingBottom: spacing.sm,\n  },\n  header: {\n    marginBottom: spacing.xl,\n  },\n  title: {\n    ...typography.h2,\n    marginBottom: spacing.sm,\n  },\n  subtitle: {\n    ...typography.body,\n  },\n  formContainer: {\n    flex: 1,\n  },\n  inputContainer: {\n    marginBottom: spacing.md,\n  },\n  label: {\n    ...typography.bodyBold,\n    marginBottom: spacing.sm,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  input: {\n    flex: 1,\n    ...typography.body,\n    marginHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n  },\n  signUpButton: {\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n    alignItems: 'center',\n    marginTop: spacing.lg,\n    marginBottom: spacing.md,\n  },\n  signUpButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n  },\n  termsText: {\n    ...typography.small,\n    textAlign: 'center',\n    marginBottom: spacing.lg,\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.xl,\n  },\n  footerText: {\n    ...typography.body,\n    marginRight: spacing.xs,\n  },\n  signInLink: {\n    ...typography.bodyBold,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\ReviewQuestionsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4052,4054],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(59, 130, 246, 0.05)' }","line":167,"column":13,"nodeType":"ObjectExpression","endLine":174,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderTopColor: 'rgba(0,0,0,0.05)' }","line":213,"column":18,"nodeType":"ObjectExpression","endLine":218,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(239, 68, 68, 0.05)' }","line":231,"column":16,"nodeType":"ObjectExpression","endLine":233,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(16, 185, 129, 0.05)' }","line":234,"column":18,"nodeType":"ObjectExpression","endLine":236,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#6B7280' }","line":241,"column":16,"nodeType":"ObjectExpression","endLine":245,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":270,"column":21,"nodeType":"ObjectExpression","endLine":274,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport { Ionicons } from '@expo/vector-icons';\nimport { TrainingStackScreenProps } from '../types/navigation';\nimport { ButtonContainer } from '../components/ButtonContainer';\nimport Animated, { FadeInDown, SlideInRight } from 'react-native-reanimated';\n\nexport const ReviewQuestionsScreen: React.FC<TrainingStackScreenProps<'ReviewQuestions'>> = ({\n  navigation,\n  route,\n}) => {\n  const { colors } = useTheme();\n  const { questions } = route.params;\n  const [expandedQuestions, setExpandedQuestions] = useState<Set<number>>(new Set());\n\n  const toggleQuestion = (questionId: number) => {\n    const newExpanded = new Set(expandedQuestions);\n    if (newExpanded.has(questionId)) {\n      newExpanded.delete(questionId);\n    } else {\n      newExpanded.add(questionId);\n    }\n    setExpandedQuestions(newExpanded);\n  };\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={() => navigation.goBack()}\n          style={styles.backButton}\n          activeOpacity={0.7}\n        >\n          <Ionicons name=\"arrow-back\" size={24} color={colors.text} />\n        </TouchableOpacity>\n        <Text style={[styles.headerTitle, { color: colors.text }]}>Questions à réviser</Text>\n        <View style={styles.placeholder} />\n      </View>\n\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.infoCard}>\n          <Ionicons name=\"information-circle\" size={24} color={colors.primary} />\n          <Text style={[styles.infoText, { color: colors.textSecondary }]}>\n            Voici les questions que vous avez manquées. Prenez le temps de comprendre les\n            explications pour progresser.\n          </Text>\n        </View>\n\n        {questions.map((question, index) => (\n          <Animated.View\n            key={question.questionId}\n            entering={SlideInRight.duration(500).delay(index * 100)}\n          >\n            <TouchableOpacity\n              onPress={() => toggleQuestion(question.questionId)}\n              activeOpacity={0.7}\n              style={[styles.questionCard, { backgroundColor: colors.surface }, shadows.sm]}\n            >\n              <View style={styles.questionHeader}>\n                <View style={styles.questionMeta}>\n                  <View style={[styles.themeBadge, { backgroundColor: `${colors.primary}15` }]}>\n                    <Text style={[styles.themeText, { color: colors.primary }]}>\n                      {question.themeName}\n                    </Text>\n                  </View>\n                  <Text style={[styles.sousThemeText, { color: colors.textSecondary }]}>\n                    {question.sousThemeName}\n                  </Text>\n                </View>\n                <Ionicons\n                  name={expandedQuestions.has(question.questionId) ? 'chevron-up' : 'chevron-down'}\n                  size={20}\n                  color={colors.textSecondary}\n                />\n              </View>\n\n              <Text style={[styles.questionText, { color: colors.text }]}>{question.enonce}</Text>\n\n              {expandedQuestions.has(question.questionId) && (\n                <Animated.View entering={FadeInDown.duration(300)} style={styles.answerSection}>\n                  <View style={styles.answerRow}>\n                    <View style={[styles.answerBox, styles.wrongAnswer]}>\n                      <Ionicons name=\"close-circle\" size={20} color=\"#EF4444\" />\n                      <View style={styles.answerContent}>\n                        <Text style={styles.answerLabel}>Votre réponse</Text>\n                        <Text style={[styles.answerText, { color: colors.text }]}>\n                          {question.userAnswer || 'Pas de réponse'}\n                        </Text>\n                      </View>\n                    </View>\n\n                    <View style={[styles.answerBox, styles.correctAnswer]}>\n                      <Ionicons name=\"checkmark-circle\" size={20} color=\"#10B981\" />\n                      <View style={styles.answerContent}>\n                        <Text style={styles.answerLabel}>Bonne réponse</Text>\n                        <Text style={[styles.answerText, { color: colors.text }]}>\n                          {question.correctAnswer}\n                        </Text>\n                      </View>\n                    </View>\n                  </View>\n\n                  <View style={[styles.explicationBox, { backgroundColor: `${colors.info}10` }]}>\n                    <Ionicons name=\"bulb\" size={20} color={colors.info} />\n                    <Text style={[styles.explicationText, { color: colors.text }]}>\n                      {question.explication}\n                    </Text>\n                  </View>\n                </Animated.View>\n              )}\n            </TouchableOpacity>\n          </Animated.View>\n        ))}\n\n        <ButtonContainer\n          backgroundColor={colors.background}\n          borderColor=\"transparent\"\n          hasBorder={false}\n        >\n          <TouchableOpacity\n            onPress={() => navigation.navigate('TrainingConfig')}\n            style={[styles.actionButton, { backgroundColor: colors.primary }]}\n            activeOpacity={0.8}\n          >\n            <Ionicons name=\"school\" size={24} color=\"#FFFFFF\" />\n            <Text style={styles.actionButtonText}>S'entraîner sur ces thèmes</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            onPress={() => navigation.navigate('HomeScreen')}\n            style={[styles.secondaryButton, { borderColor: colors.border }]}\n            activeOpacity={0.7}\n          >\n            <Text style={[styles.secondaryButtonText, { color: colors.textSecondary }]}>\n              Retour à l'accueil\n            </Text>\n          </TouchableOpacity>\n        </ButtonContainer>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: spacing.lg,\n    paddingVertical: spacing.md,\n  },\n  backButton: {\n    padding: spacing.xs,\n  },\n  headerTitle: {\n    ...typography.h4,\n  },\n  placeholder: {\n    width: 32,\n  },\n  infoCard: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    margin: spacing.lg,\n    padding: spacing.md,\n    backgroundColor: 'rgba(59, 130, 246, 0.05)',\n    borderRadius: borderRadius.md,\n  },\n  infoText: {\n    ...typography.caption,\n    flex: 1,\n    marginLeft: spacing.sm,\n  },\n  questionCard: {\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.md,\n    padding: spacing.lg,\n    borderRadius: borderRadius.lg,\n  },\n  questionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: spacing.md,\n  },\n  questionMeta: {\n    flex: 1,\n  },\n  themeBadge: {\n    alignSelf: 'flex-start',\n    paddingHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n    borderRadius: borderRadius.sm,\n    marginBottom: spacing.xs,\n  },\n  themeText: {\n    ...typography.small,\n    fontWeight: '600',\n  },\n  sousThemeText: {\n    ...typography.small,\n  },\n  questionText: {\n    ...typography.body,\n    lineHeight: 22,\n  },\n  answerSection: {\n    marginTop: spacing.lg,\n    paddingTop: spacing.lg,\n    borderTopWidth: 1,\n    borderTopColor: 'rgba(0,0,0,0.05)',\n  },\n  answerRow: {\n    flexDirection: 'row',\n    marginBottom: spacing.md,\n  },\n  answerBox: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    padding: spacing.sm,\n    borderRadius: borderRadius.sm,\n    marginHorizontal: spacing.xs,\n  },\n  wrongAnswer: {\n    backgroundColor: 'rgba(239, 68, 68, 0.05)',\n  },\n  correctAnswer: {\n    backgroundColor: 'rgba(16, 185, 129, 0.05)',\n  },\n  answerContent: {\n    flex: 1,\n    marginLeft: spacing.sm,\n  },\n  answerLabel: {\n    ...typography.small,\n    color: '#6B7280',\n    marginBottom: spacing.xs,\n  },\n  answerText: {\n    ...typography.caption,\n    fontWeight: '600',\n  },\n  explicationBox: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    padding: spacing.md,\n    borderRadius: borderRadius.md,\n  },\n  explicationText: {\n    ...typography.caption,\n    flex: 1,\n    marginLeft: spacing.sm,\n    lineHeight: 20,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: spacing.lg,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.md,\n  },\n  actionButtonText: {\n    ...typography.bodyBold,\n    color: '#FFFFFF',\n    marginLeft: spacing.sm,\n  },\n  secondaryButton: {\n    alignItems: 'center',\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    borderWidth: 1,\n  },\n  secondaryButtonText: {\n    ...typography.body,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\RevisionScreen.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":111,"column":19,"nodeType":"ObjectExpression","endLine":115,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const RevisionScreen = () => {\n  const { colors } = useTheme();\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: colors.background }]}>\n      <View style={styles.header}>\n        <Text style={[styles.title, { color: colors.text }]}>Révision</Text>\n        <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\n          Choisissez votre mode de révision\n        </Text>\n      </View>\n\n      <View style={styles.cardsContainer}>\n        <TouchableOpacity style={[styles.card, { backgroundColor: colors.surface }]}>\n          <View style={[styles.iconContainer, { backgroundColor: colors.primary + '20' }]}>\n            <Ionicons name=\"document-text\" size={32} color={colors.primary} />\n          </View>\n          <Text style={[styles.cardTitle, { color: colors.text }]}>Texte</Text>\n          <Text style={[styles.cardDescription, { color: colors.textSecondary }]}>\n            Révisez avec des fiches et des documents\n          </Text>\n          <View style={[styles.comingSoon, { backgroundColor: colors.warning }]}>\n            <Text style={styles.comingSoonText}>Bientôt disponible</Text>\n          </View>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={[styles.card, { backgroundColor: colors.surface }]}>\n          <View style={[styles.iconContainer, { backgroundColor: colors.primary + '20' }]}>\n            <Ionicons name=\"play-circle\" size={32} color={colors.primary} />\n          </View>\n          <Text style={[styles.cardTitle, { color: colors.text }]}>Vidéo</Text>\n          <Text style={[styles.cardDescription, { color: colors.textSecondary }]}>\n            Apprenez avec des vidéos explicatives\n          </Text>\n          <View style={[styles.comingSoon, { backgroundColor: colors.warning }]}>\n            <Text style={styles.comingSoonText}>Bientôt disponible</Text>\n          </View>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={[styles.card, { backgroundColor: colors.surface }]}>\n          <View style={[styles.iconContainer, { backgroundColor: colors.primary + '20' }]}>\n            <Ionicons name=\"headset\" size={32} color={colors.primary} />\n          </View>\n          <Text style={[styles.cardTitle, { color: colors.text }]}>Podcast</Text>\n          <Text style={[styles.cardDescription, { color: colors.textSecondary }]}>\n            Écoutez des podcasts éducatifs\n          </Text>\n          <View style={[styles.comingSoon, { backgroundColor: colors.warning }]}>\n            <Text style={styles.comingSoonText}>Bientôt disponible</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    padding: 20,\n    paddingTop: 60,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n  },\n  cardsContainer: {\n    padding: 20,\n    gap: 16,\n  },\n  card: {\n    padding: 20,\n    borderRadius: 16,\n    marginBottom: 8,\n  },\n  iconContainer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  cardTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  cardDescription: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  comingSoon: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 20,\n    alignSelf: 'flex-start',\n  },\n  comingSoonText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#FFF',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\RewardAnimationScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FadeOut' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ZoomIn' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BounceIn' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'runOnJS' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SCREEN_HEIGHT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":51},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animateReward' and 'currentReward'. Either include them or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [animateReward, currentReward, currentRewardIndex]","fix":{"range":[1763,1783],"text":"[animateReward, currentReward, currentRewardIndex]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":63,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":63,"endColumn":73,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1850,1850],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1850,1850],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":141,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":141,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3947,3949],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { position: 'absolute' }","line":186,"column":15,"nodeType":"ObjectExpression","endLine":190,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6971,6974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6971,6974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 'index === currentRewardIndex ? 24 : 8' }","line":273,"column":19,"nodeType":"ObjectExpression","endLine":276,"endColumn":20},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":358,"column":19,"nodeType":"ObjectExpression","endLine":369,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":428,"column":22,"nodeType":"ObjectExpression","endLine":432,"endColumn":4}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, Dimensions, TouchableOpacity } from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { spacing, typography, borderRadius } from '../styles/theme';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Animated, {\r\n  FadeIn,\r\n  FadeOut,\r\n  ZoomIn,\r\n  BounceIn,\r\n  SlideInUp,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withSpring,\r\n  withSequence,\r\n  withDelay,\r\n  withTiming,\r\n  interpolate,\r\n  runOnJS,\r\n} from 'react-native-reanimated';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport * as Haptics from 'expo-haptics';\r\nimport { TrainingStackScreenProps } from '../types/navigation';\r\n\r\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\r\n\r\ninterface Reward {\r\n  type: 'badge' | 'challenge' | 'rank';\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  icon?: string;\r\n  color?: string;\r\n  rarity?: 'common' | 'rare' | 'epic' | 'legendary';\r\n  points?: number;\r\n}\r\n\r\nexport const RewardAnimationScreen: React.FC<TrainingStackScreenProps<'RewardAnimation'>> = ({\r\n  navigation,\r\n  route,\r\n}) => {\r\n  const { colors } = useTheme();\r\n  const { rewards = [], sessionStats } = route.params || {};\r\n  const [currentRewardIndex, setCurrentRewardIndex] = useState(0);\r\n  const [showingReward, setShowingReward] = useState(true);\r\n\r\n  const scale = useSharedValue(0);\r\n  const rotation = useSharedValue(0);\r\n  const glowOpacity = useSharedValue(0);\r\n  const particleOpacity = useSharedValue(0);\r\n\r\n  const currentReward = rewards[currentRewardIndex];\r\n\r\n  useEffect(() => {\r\n    if (currentReward) {\r\n      animateReward();\r\n    }\r\n  }, [currentRewardIndex]);\r\n\r\n  const animateReward = () => {\r\n    // Haptic feedback\r\n    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\r\n\r\n    // Reset values\r\n    scale.value = 0;\r\n    rotation.value = 0;\r\n    glowOpacity.value = 0;\r\n    particleOpacity.value = 0;\r\n\r\n    // Animate entrance\r\n    scale.value = withSequence(\r\n      withSpring(1.2, { damping: 8, stiffness: 100 }),\r\n      withSpring(1, { damping: 15, stiffness: 150 })\r\n    );\r\n\r\n    rotation.value = withSequence(withTiming(360, { duration: 800 }), withSpring(0));\r\n\r\n    glowOpacity.value = withSequence(\r\n      withTiming(1, { duration: 400 }),\r\n      withDelay(1000, withTiming(0.6, { duration: 600 }))\r\n    );\r\n\r\n    particleOpacity.value = withSequence(\r\n      withDelay(200, withTiming(1, { duration: 400 })),\r\n      withDelay(1200, withTiming(0, { duration: 600 }))\r\n    );\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (currentRewardIndex < rewards.length - 1) {\r\n      setShowingReward(false);\r\n      setTimeout(() => {\r\n        setCurrentRewardIndex(currentRewardIndex + 1);\r\n        setShowingReward(true);\r\n      }, 300);\r\n    } else {\r\n      // Naviguer vers l'écran de rapport avec les stats\r\n      navigation.replace('SessionReport', {\r\n        stats: sessionStats,\r\n        isAbandoned: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSkipAll = () => {\r\n    navigation.replace('SessionReport', {\r\n      stats: sessionStats,\r\n      isAbandoned: false,\r\n    });\r\n  };\r\n\r\n  const getRarityColor = (rarity?: string) => {\r\n    switch (rarity) {\r\n      case 'legendary':\r\n        return ['#FFD700', '#FFA500'];\r\n      case 'epic':\r\n        return ['#9C27B0', '#E91E63'];\r\n      case 'rare':\r\n        return ['#2196F3', '#00BCD4'];\r\n      default:\r\n        return ['#4CAF50', '#8BC34A'];\r\n    }\r\n  };\r\n\r\n  const getRarityGlow = (rarity?: string) => {\r\n    switch (rarity) {\r\n      case 'legendary':\r\n        return '#FFD700';\r\n      case 'epic':\r\n        return '#E91E63';\r\n      case 'rare':\r\n        return '#00BCD4';\r\n      default:\r\n        return '#4CAF50';\r\n    }\r\n  };\r\n\r\n  const getRewardIcon = (reward: Reward) => {\r\n    if (reward.type === 'badge') {\r\n      return reward.icon || 'medal';\r\n    } else if (reward.type === 'challenge') {\r\n      return 'flag';\r\n    } else {\r\n      return 'star';\r\n    }\r\n  };\r\n\r\n  const rewardAnimatedStyle = useAnimatedStyle(() => ({\r\n    transform: [{ scale: scale.value }, { rotate: `${rotation.value}deg` }],\r\n  }));\r\n\r\n  const glowAnimatedStyle = useAnimatedStyle(() => ({\r\n    opacity: glowOpacity.value,\r\n    transform: [{ scale: interpolate(glowOpacity.value, [0, 1], [0.8, 1.5]) }],\r\n  }));\r\n\r\n  const particleStyle = useAnimatedStyle(() => ({\r\n    opacity: particleOpacity.value,\r\n  }));\r\n\r\n  if (!currentReward) {\r\n    // Si pas de récompenses, aller directement au rapport\r\n    navigation.replace('SessionReport', {\r\n      stats: sessionStats,\r\n      isAbandoned: false,\r\n    });\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      <LinearGradient\r\n        colors={[colors.background, `${colors.primary}15`]}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n\r\n      {/* Particules d'arrière-plan */}\r\n      <Animated.View style={[styles.particlesContainer, particleStyle]}>\r\n        {[...Array(8)].map((_, i) => (\r\n          <Animated.View\r\n            key={i}\r\n            entering={SlideInUp.delay(i * 100).springify()}\r\n            style={[\r\n              styles.particle,\r\n              {\r\n                position: 'absolute',\r\n                left: `${10 + i * 11}%`,\r\n                top: `${20 + (i % 3) * 20}%`,\r\n              },\r\n            ]}\r\n          >\r\n            <Ionicons name=\"sparkles\" size={24} color={getRarityGlow(currentReward.rarity)} />\r\n          </Animated.View>\r\n        ))}\r\n      </Animated.View>\r\n\r\n      <View style={styles.content}>\r\n        {/* Header */}\r\n        <Animated.View entering={FadeIn.delay(200)} style={styles.header}>\r\n          <Text style={[styles.congratsText, { color: colors.text }]}>🎉 Félicitations ! 🎉</Text>\r\n          <Text style={[styles.subtitle, { color: colors.textSecondary }]}>\r\n            Vous avez débloqué une nouvelle récompense !\r\n          </Text>\r\n        </Animated.View>\r\n\r\n        {/* Récompense principale */}\r\n        {showingReward && (\r\n          <View style={styles.rewardContainer}>\r\n            {/* Effet de lueur */}\r\n            <Animated.View\r\n              style={[\r\n                styles.glowEffect,\r\n                glowAnimatedStyle,\r\n                {\r\n                  backgroundColor: getRarityGlow(currentReward.rarity),\r\n                  shadowColor: getRarityGlow(currentReward.rarity),\r\n                },\r\n              ]}\r\n            />\r\n\r\n            {/* Badge/Icône de récompense */}\r\n            <Animated.View style={[styles.rewardCard, rewardAnimatedStyle]}>\r\n              <LinearGradient\r\n                colors={getRarityColor(currentReward.rarity)}\r\n                style={styles.rewardGradient}\r\n                start={{ x: 0, y: 0 }}\r\n                end={{ x: 1, y: 1 }}\r\n              >\r\n                <Ionicons name={getRewardIcon(currentReward) as any} size={80} color=\"#FFFFFF\" />\r\n              </LinearGradient>\r\n            </Animated.View>\r\n\r\n            {/* Infos de la récompense */}\r\n            <Animated.View entering={FadeIn.delay(800)} style={styles.rewardInfo}>\r\n              <Text style={[styles.rewardType, { color: colors.textSecondary }]}>\r\n                {currentReward.type === 'badge'\r\n                  ? 'BADGE'\r\n                  : currentReward.type === 'challenge'\r\n                    ? 'DÉFI COMPLÉTÉ'\r\n                    : 'NOUVEAU RANG'}\r\n              </Text>\r\n              <Text style={[styles.rewardName, { color: colors.text }]}>\r\n                {currentReward.name || 'Nouvelle récompense'}\r\n              </Text>\r\n              <Text style={[styles.rewardDescription, { color: colors.textSecondary }]}>\r\n                {currentReward.description || 'Félicitations pour votre progression !'}\r\n              </Text>\r\n              {currentReward.points !== undefined &&\r\n                currentReward.points !== null &&\r\n                currentReward.points > 0 && (\r\n                  <View\r\n                    style={[styles.pointsContainer, { backgroundColor: `${colors.primary}20` }]}\r\n                  >\r\n                    <Ionicons name=\"trophy\" size={20} color={colors.primary} />\r\n                    <Text style={[styles.pointsText, { color: colors.primary }]}>\r\n                      +{currentReward.points} points\r\n                    </Text>\r\n                  </View>\r\n                )}\r\n            </Animated.View>\r\n          </View>\r\n        )}\r\n\r\n        {/* Indicateur de progression */}\r\n        <Animated.View entering={FadeIn.delay(1000)} style={styles.progressIndicator}>\r\n          <View style={styles.dots}>\r\n            {rewards.map((_, index) => (\r\n              <View\r\n                key={index}\r\n                style={[\r\n                  styles.dot,\r\n                  {\r\n                    backgroundColor: index <= currentRewardIndex ? colors.primary : colors.border,\r\n                    width: index === currentRewardIndex ? 24 : 8,\r\n                  },\r\n                ]}\r\n              />\r\n            ))}\r\n          </View>\r\n        </Animated.View>\r\n\r\n        {/* Actions */}\r\n        <Animated.View entering={FadeIn.delay(1200)} style={styles.actions}>\r\n          <TouchableOpacity\r\n            onPress={handleNext}\r\n            style={[styles.primaryButton, { backgroundColor: colors.primary }]}\r\n            activeOpacity={0.8}\r\n          >\r\n            <Text style={styles.primaryButtonText}>\r\n              {currentRewardIndex < rewards.length - 1 ? 'Suivant' : 'Voir les résultats'}\r\n            </Text>\r\n            <Ionicons name=\"arrow-forward\" size={20} color=\"#FFFFFF\" />\r\n          </TouchableOpacity>\r\n\r\n          {rewards.length > 1 && currentRewardIndex < rewards.length - 1 && (\r\n            <TouchableOpacity onPress={handleSkipAll} style={styles.skipButton} activeOpacity={0.7}>\r\n              <Text style={[styles.skipButtonText, { color: colors.textSecondary }]}>\r\n                Passer tout\r\n              </Text>\r\n            </TouchableOpacity>\r\n          )}\r\n        </Animated.View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    paddingHorizontal: spacing.lg,\r\n  },\r\n  particlesContainer: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    pointerEvents: 'none',\r\n  },\r\n  particle: {\r\n    position: 'absolute',\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    marginBottom: spacing.xl * 2,\r\n  },\r\n  congratsText: {\r\n    fontSize: 28,\r\n    fontWeight: 'bold',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  subtitle: {\r\n    ...typography.body,\r\n    textAlign: 'center',\r\n  },\r\n  rewardContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: spacing.xl * 2,\r\n  },\r\n  glowEffect: {\r\n    position: 'absolute',\r\n    width: 200,\r\n    height: 200,\r\n    borderRadius: 100,\r\n    shadowOffset: { width: 0, height: 0 },\r\n    shadowOpacity: 0.5,\r\n    shadowRadius: 30,\r\n    elevation: 10,\r\n  },\r\n  rewardCard: {\r\n    width: 160,\r\n    height: 160,\r\n    marginBottom: spacing.xl,\r\n  },\r\n  rewardGradient: {\r\n    width: '100%',\r\n    height: '100%',\r\n    borderRadius: 80,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 4 },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 8,\r\n    elevation: 8,\r\n  },\r\n  rewardInfo: {\r\n    alignItems: 'center',\r\n    maxWidth: SCREEN_WIDTH * 0.8,\r\n    marginTop: spacing.xl * 2,\r\n  },\r\n  rewardType: {\r\n    ...typography.small,\r\n    letterSpacing: 2,\r\n    marginBottom: spacing.xs,\r\n  },\r\n  rewardName: {\r\n    ...typography.h3,\r\n    fontWeight: 'bold',\r\n    marginBottom: spacing.sm,\r\n    textAlign: 'center',\r\n  },\r\n  rewardDescription: {\r\n    ...typography.body,\r\n    textAlign: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  pointsContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: spacing.md,\r\n    paddingVertical: spacing.sm,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  pointsText: {\r\n    ...typography.bodyBold,\r\n    marginLeft: spacing.xs,\r\n  },\r\n  progressIndicator: {\r\n    marginBottom: spacing.xl,\r\n  },\r\n  dots: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: spacing.xs,\r\n  },\r\n  dot: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  actions: {\r\n    width: '100%',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.xl,\r\n  },\r\n  primaryButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingHorizontal: spacing.xl,\r\n    paddingVertical: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n    marginBottom: spacing.md,\r\n  },\r\n  primaryButtonText: {\r\n    ...typography.bodyBold,\r\n    color: '#FFFFFF',\r\n    marginRight: spacing.xs,\r\n  },\r\n  skipButton: {\r\n    padding: spacing.md,\r\n  },\r\n  skipButtonText: {\r\n    ...typography.body,\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\SessionReportScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Platform' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ZoomIn' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Extrapolate' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SCREEN_WIDTH' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":86,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setStats' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":87,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2202,2204],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":29},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2387,2389],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'celebrationScale', 'isAbandoned', 'progressAnimation', 'starScale', 'triggerCelebration', and 'triggerEncouragement'. Either include them or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [celebrationScale, isAbandoned, progressAnimation, starScale, stats, triggerCelebration, triggerEncouragement]","fix":{"range":[3541,3548],"text":"[celebrationScale, isAbandoned, progressAnimation, starScale, stats, triggerCelebration, triggerEncouragement]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":124,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":124,"endColumn":73,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3668,3668],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3668,3668],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":132,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":132,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3955,3955],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3955,3955],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5314,5316],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":204,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":204,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5807,5809],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isGoodScore' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":242,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":242,"endColumn":20},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#F59E0B15' }","line":280,"column":43,"nodeType":"ObjectExpression","endLine":280,"endColumn":75},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#F59E0B15' }","line":280,"column":43,"nodeType":"ObjectExpression","endLine":280,"endColumn":75},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: \"sousTheme.successRate >= 70 ? '#10B981' : '#F59E0B'\" }","line":433,"column":31,"nodeType":"ObjectExpression","endLine":433,"endColumn":93},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: \"sousTheme.successRate >= 70 ? '#10B981' : '#F59E0B'\" }","line":433,"column":31,"nodeType":"ObjectExpression","endLine":433,"endColumn":93},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: 'transparent' }","line":477,"column":18,"nodeType":"ObjectExpression","endLine":477,"endColumn":52},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'transparent' }","line":477,"column":18,"nodeType":"ObjectExpression","endLine":477,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":503,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":503,"endColumn":39},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":550,"column":15,"nodeType":"ObjectExpression","endLine":554,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":560,"column":14,"nodeType":"ObjectExpression","endLine":564,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":569,"column":14,"nodeType":"ObjectExpression","endLine":573,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderTopColor: 'rgba(0,0,0,0.05)' }","line":683,"column":23,"nodeType":"ObjectExpression","endLine":688,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":734,"column":21,"nodeType":"ObjectExpression","endLine":739,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":751,"column":22,"nodeType":"ObjectExpression","endLine":755,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":756,"column":25,"nodeType":"ObjectExpression","endLine":761,"endColumn":4}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Share,\r\n  Platform,\r\n} from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { ButtonContainer } from '../components/ButtonContainer';\r\nimport Animated, {\r\n  FadeInDown,\r\n  FadeInUp,\r\n  ZoomIn,\r\n  BounceIn,\r\n  SlideInRight,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withSpring,\r\n  withDelay,\r\n  withSequence,\r\n  withTiming,\r\n  interpolate,\r\n  Extrapolate,\r\n} from 'react-native-reanimated';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport * as Haptics from 'expo-haptics';\r\nimport { TrainingStackScreenProps } from '../types/navigation';\r\n\r\nconst { width: SCREEN_WIDTH } = Dimensions.get('window');\r\n\r\ninterface SessionStats {\r\n  sessionId: number;\r\n  score: number;\r\n  totalQuestions: number;\r\n  correctAnswers: number;\r\n  successRate: number;\r\n  totalTime: number | null;\r\n  averageTime: number | null;\r\n  themeStats: ThemeStat[];\r\n  failedQuestions: FailedQuestion[];\r\n  pointsEarned: number;\r\n}\r\n\r\ninterface ThemeStat {\r\n  themeId: number;\r\n  themeName: string;\r\n  themeColor: string;\r\n  sousThemes: SousThemeStat[];\r\n  totalQuestions: number;\r\n  correctAnswers: number;\r\n  successRate: number;\r\n  points: number;\r\n}\r\n\r\ninterface SousThemeStat {\r\n  sousThemeId: number;\r\n  sousThemeName: string;\r\n  totalQuestions: number;\r\n  correctAnswers: number;\r\n  successRate: number;\r\n}\r\n\r\ninterface FailedQuestion {\r\n  questionId: number;\r\n  enonce: string;\r\n  themeName: string;\r\n  sousThemeName: string;\r\n  userAnswer: string | null;\r\n  correctAnswer: string;\r\n  explication: string;\r\n}\r\n\r\nexport const SessionReportScreen: React.FC<TrainingStackScreenProps<'SessionReport'>> = ({\r\n  navigation,\r\n  route,\r\n}) => {\r\n  const { colors } = useTheme();\r\n  const { user } = useAuth();\r\n  const [stats, setStats] = useState<SessionStats | null>(route.params?.stats || null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedTheme, setSelectedTheme] = useState<number | null>(null);\r\n  const isAbandoned = route.params?.isAbandoned || false;\r\n\r\n  const celebrationScale = useSharedValue(1); // Initialiser à 1 pour être visible\r\n  const starScale = useSharedValue(1); // Initialiser à 1 pour être visible\r\n  const progressAnimation = useSharedValue(0);\r\n\r\n  useEffect(() => {\r\n    if (stats) {\r\n      // Animation d'entrée depuis 0\r\n      celebrationScale.value = 0;\r\n      starScale.value = 0;\r\n\r\n      // Puis animer vers 1 avec effet approprié\r\n      celebrationScale.value = withDelay(200, withSpring(1, { damping: 15, stiffness: 150 }));\r\n\r\n      starScale.value = withDelay(400, withSpring(1, { damping: 15, stiffness: 150 }));\r\n\r\n      // Déclencher les animations spécifiques selon le score\r\n      if (stats.successRate >= 80 && !isAbandoned) {\r\n        // Célébration pour les bons scores\r\n        setTimeout(() => triggerCelebration(), 600);\r\n      } else if (stats.successRate < 50 && !isAbandoned) {\r\n        // Animation d'encouragement pour les mauvais scores\r\n        setTimeout(() => triggerEncouragement(), 600);\r\n      }\r\n\r\n      // Animer la progression\r\n      progressAnimation.value = withDelay(500, withTiming(stats.successRate, { duration: 1500 }));\r\n    }\r\n  }, [stats]);\r\n\r\n  // Fonction supprimée car les stats viennent maintenant des params\r\n\r\n  const triggerCelebration = () => {\r\n    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\r\n\r\n    celebrationScale.value = withSequence(withSpring(1.2), withSpring(1));\r\n\r\n    starScale.value = withDelay(200, withSequence(withSpring(1.3), withSpring(1)));\r\n  };\r\n\r\n  const triggerEncouragement = () => {\r\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\r\n\r\n    celebrationScale.value = withSequence(withTiming(0.95, { duration: 200 }), withSpring(1));\r\n\r\n    starScale.value = withDelay(\r\n      100,\r\n      withSequence(withTiming(0.8, { duration: 200 }), withSpring(1))\r\n    );\r\n  };\r\n\r\n  const getGradeEmoji = (rate: number) => {\r\n    if (rate >= 90) {\r\n      return '🏆';\r\n    }\r\n    if (rate >= 80) {\r\n      return '⭐';\r\n    }\r\n    if (rate >= 70) {\r\n      return '👍';\r\n    }\r\n    if (rate >= 60) {\r\n      return '💪';\r\n    }\r\n    return '📚';\r\n  };\r\n\r\n  const getGradeColor = (rate: number) => {\r\n    if (rate >= 90) {\r\n      return '#FFD700';\r\n    }\r\n    if (rate >= 80) {\r\n      return '#10B981';\r\n    }\r\n    if (rate >= 70) {\r\n      return '#3B82F6';\r\n    }\r\n    if (rate >= 60) {\r\n      return '#F59E0B';\r\n    }\r\n    return '#EF4444';\r\n  };\r\n\r\n  const formatTime = (seconds: number) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const shareResults = async () => {\r\n    if (!stats) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const message =\r\n        `🚒 Casque En Main - Résultats de session\\n\\n` +\r\n        `📊 Score: ${stats.score}/${stats.totalQuestions} (${stats.successRate}%)\\n` +\r\n        `⏱️ Temps: ${formatTime(stats.totalTime || 0)}\\n` +\r\n        `🏆 Points gagnés: ${stats.pointsEarned}\\n\\n` +\r\n        `Je m'entraîne pour le concours de Sapeur-Pompier avec Casque En Main !`;\r\n\r\n      await Share.share({\r\n        message,\r\n        title: 'Mes résultats Casque En Main',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error sharing:', error);\r\n    }\r\n  };\r\n\r\n  const startNewSession = (sameParams: boolean) => {\r\n    if (sameParams) {\r\n      navigation.replace('TrainingSession', route.params?.sessionParams || {});\r\n    } else {\r\n      void navigation.navigate('TrainingConfig');\r\n    }\r\n  };\r\n\r\n  const reviewFailedQuestions = () => {\r\n    if (stats?.failedQuestions) {\r\n      void navigation.navigate('ReviewQuestions', { questions: stats.failedQuestions });\r\n    }\r\n  };\r\n\r\n  const celebrationAnimatedStyle = useAnimatedStyle(() => ({\r\n    transform: [{ scale: celebrationScale.value }],\r\n    opacity: interpolate(celebrationScale.value, [0, 0.5, 1], [0, 0.8, 1]),\r\n  }));\r\n\r\n  const starAnimatedStyle = useAnimatedStyle(() => ({\r\n    transform: [{ scale: starScale.value }],\r\n    opacity: interpolate(starScale.value, [0, 0.5, 1], [0, 0.8, 1]),\r\n  }));\r\n\r\n  const progressBarStyle = useAnimatedStyle(() => ({\r\n    width: `${progressAnimation.value}%`,\r\n  }));\r\n\r\n  if (loading || !stats) {\r\n    return (\r\n      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n        <View style={styles.loadingContainer}>\r\n          <Text style={[styles.loadingText, { color: colors.text }]}>\r\n            Calcul de vos résultats...\r\n          </Text>\r\n        </View>\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n\r\n  const isGoodScore = stats.successRate >= 70;\r\n  const gradeColor = getGradeColor(stats.successRate);\r\n  const displayScore = Math.max(0, stats.score); // Éviter l'affichage de scores négatifs\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      <ScrollView showsVerticalScrollIndicator={false}>\r\n        {/* Header avec score principal */}\r\n        <Animated.View entering={FadeInDown.duration(600).delay(200)} style={styles.header}>\r\n          <LinearGradient\r\n            colors={isAbandoned ? ['#F59E0B', '#F59E0BCC'] : [gradeColor, `${gradeColor}CC`]} // Toujours utiliser la couleur appropriée au score\r\n            style={styles.scoreCard}\r\n            start={{ x: 0, y: 0 }}\r\n            end={{ x: 1, y: 1 }}\r\n          >\r\n            <Animated.View style={celebrationAnimatedStyle}>\r\n              <Text style={styles.scoreTitle}>\r\n                {isAbandoned ? 'Session Interrompue' : 'Score Final'}\r\n              </Text>\r\n              <View style={styles.scoreContainer}>\r\n                <Animated.Text style={[styles.scoreText, starAnimatedStyle]}>\r\n                  {stats.correctAnswers}/{stats.totalQuestions}\r\n                </Animated.Text>\r\n                <Animated.Text style={[styles.gradeEmoji, starAnimatedStyle]}>\r\n                  {getGradeEmoji(stats.successRate)}\r\n                </Animated.Text>\r\n              </View>\r\n              <Text style={styles.scoreNote}>\r\n                Note: {((stats.successRate * 20) / 100).toFixed(1)}/20\r\n              </Text>\r\n            </Animated.View>\r\n          </LinearGradient>\r\n        </Animated.View>\r\n\r\n        {/* Message pour session abandonnée */}\r\n        {isAbandoned && (\r\n          <Animated.View\r\n            entering={FadeInUp.duration(500).delay(300)}\r\n            style={[styles.abandonedCard, { backgroundColor: '#F59E0B15' }]}\r\n          >\r\n            <Ionicons name=\"information-circle\" size={24} color=\"#F59E0B\" />\r\n            <Text style={[styles.abandonedText, { color: colors.text }]}>\r\n              Session interrompue avant la fin. Vos résultats partiels sont enregistrés.\r\n            </Text>\r\n          </Animated.View>\r\n        )}\r\n\r\n        {/* Statistiques principales */}\r\n        <Animated.View\r\n          entering={FadeInUp.duration(600).delay(400)}\r\n          style={[styles.statsCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n        >\r\n          <Text style={[styles.statsTitle, { color: colors.text }]}>\r\n            {isAbandoned ? 'Performance Partielle' : 'Performance'}\r\n          </Text>\r\n\r\n          {/* Barre de progression */}\r\n          <View style={styles.progressContainer}>\r\n            <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\r\n              <Animated.View\r\n                style={[styles.progressFill, { backgroundColor: gradeColor }, progressBarStyle]}\r\n              />\r\n            </View>\r\n            <Text style={[styles.progressText, { color: colors.text }]}>\r\n              {stats.successRate.toFixed(0)}% de réussite\r\n            </Text>\r\n          </View>\r\n\r\n          {/* Stats en grille */}\r\n          <View style={styles.statsGrid}>\r\n            <Animated.View entering={SlideInRight.duration(500).delay(600)} style={styles.statItem}>\r\n              <Ionicons name=\"checkmark-circle\" size={24} color=\"#10B981\" />\r\n              <Text style={[styles.statValue, { color: colors.text }]}>{stats.correctAnswers}</Text>\r\n              <Text style={[styles.statLabel, { color: colors.textSecondary }]}>\r\n                Bonnes réponses\r\n              </Text>\r\n            </Animated.View>\r\n\r\n            <Animated.View entering={SlideInRight.duration(500).delay(700)} style={styles.statItem}>\r\n              <Ionicons name=\"close-circle\" size={24} color=\"#EF4444\" />\r\n              <Text style={[styles.statValue, { color: colors.text }]}>\r\n                {stats.totalQuestions - stats.correctAnswers}\r\n              </Text>\r\n              <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Erreurs</Text>\r\n            </Animated.View>\r\n\r\n            {stats.totalTime && (\r\n              <Animated.View\r\n                entering={SlideInRight.duration(500).delay(800)}\r\n                style={styles.statItem}\r\n              >\r\n                <Ionicons name=\"time\" size={24} color=\"#3B82F6\" />\r\n                <Text style={[styles.statValue, { color: colors.text }]}>\r\n                  {formatTime(stats.totalTime)}\r\n                </Text>\r\n                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Temps total</Text>\r\n              </Animated.View>\r\n            )}\r\n\r\n            {stats.averageTime && (\r\n              <Animated.View\r\n                entering={SlideInRight.duration(500).delay(900)}\r\n                style={styles.statItem}\r\n              >\r\n                <Ionicons name=\"speedometer\" size={24} color=\"#F59E0B\" />\r\n                <Text style={[styles.statValue, { color: colors.text }]}>\r\n                  {formatTime(stats.averageTime)}\r\n                </Text>\r\n                <Text style={[styles.statLabel, { color: colors.textSecondary }]}>\r\n                  Moy. par question\r\n                </Text>\r\n              </Animated.View>\r\n            )}\r\n          </View>\r\n\r\n          {/* Points gagnés */}\r\n          <Animated.View\r\n            entering={BounceIn.duration(800).delay(1000)}\r\n            style={[styles.pointsCard, { backgroundColor: `${colors.primary}15` }]}\r\n          >\r\n            <Ionicons name=\"trophy\" size={28} color={colors.primary} />\r\n            <View style={styles.pointsContent}>\r\n              <Text style={[styles.pointsValue, { color: colors.primary }]}>\r\n                {displayScore > 0 ? `+${displayScore.toFixed(0)}` : '0'} points\r\n              </Text>\r\n              <Text style={[styles.pointsLabel, { color: colors.textSecondary }]}>\r\n                ajoutés à votre score total\r\n              </Text>\r\n            </View>\r\n          </Animated.View>\r\n        </Animated.View>\r\n\r\n        {/* Répartition par thème */}\r\n        <Animated.View\r\n          entering={FadeInUp.duration(600).delay(1200)}\r\n          style={[styles.themeCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n        >\r\n          <Text style={[styles.themeTitle, { color: colors.text }]}>Répartition par thème</Text>\r\n\r\n          {stats.themeStats.map((theme, index) => (\r\n            <TouchableOpacity\r\n              key={theme.themeId}\r\n              onPress={() =>\r\n                setSelectedTheme(selectedTheme === theme.themeId ? null : theme.themeId)\r\n              }\r\n              activeOpacity={0.7}\r\n            >\r\n              <Animated.View\r\n                entering={SlideInRight.duration(500).delay(1300 + index * 100)}\r\n                style={[styles.themeItem, { backgroundColor: `${theme.themeColor}10` }]}\r\n              >\r\n                <View style={styles.themeHeader}>\r\n                  <View style={styles.themeInfo}>\r\n                    <View style={[styles.themeColorDot, { backgroundColor: theme.themeColor }]} />\r\n                    <Text style={[styles.themeName, { color: colors.text }]}>\r\n                      {theme.themeName}\r\n                    </Text>\r\n                  </View>\r\n                  <View style={styles.themeStats}>\r\n                    <Text style={[styles.themeScore, { color: colors.text }]}>\r\n                      {theme.correctAnswers}/{theme.totalQuestions}\r\n                    </Text>\r\n                    <Text style={[styles.themeRate, { color: theme.themeColor }]}>\r\n                      {theme.successRate.toFixed(0)}%\r\n                    </Text>\r\n                    <Ionicons\r\n                      name={selectedTheme === theme.themeId ? 'chevron-up' : 'chevron-down'}\r\n                      size={20}\r\n                      color={colors.textSecondary}\r\n                    />\r\n                  </View>\r\n                </View>\r\n\r\n                {/* Sous-thèmes détaillés */}\r\n                {selectedTheme === theme.themeId && (\r\n                  <Animated.View\r\n                    entering={FadeInDown.duration(300)}\r\n                    style={styles.sousThemeContainer}\r\n                  >\r\n                    {theme.sousThemes.map(sousTheme => (\r\n                      <View key={sousTheme.sousThemeId} style={styles.sousThemeItem}>\r\n                        <Text style={[styles.sousThemeName, { color: colors.textSecondary }]}>\r\n                          {sousTheme.sousThemeName}\r\n                        </Text>\r\n                        <View style={styles.sousThemeStats}>\r\n                          <Text style={[styles.sousThemeScore, { color: colors.text }]}>\r\n                            {sousTheme.correctAnswers}/{sousTheme.totalQuestions}\r\n                          </Text>\r\n                          <Text\r\n                            style={[\r\n                              styles.sousThemeRate,\r\n                              { color: sousTheme.successRate >= 70 ? '#10B981' : '#F59E0B' },\r\n                            ]}\r\n                          >\r\n                            {sousTheme.successRate.toFixed(0)}%\r\n                          </Text>\r\n                        </View>\r\n                      </View>\r\n                    ))}\r\n                  </Animated.View>\r\n                )}\r\n              </Animated.View>\r\n            </TouchableOpacity>\r\n          ))}\r\n        </Animated.View>\r\n\r\n        {/* Questions échouées */}\r\n        {stats.failedQuestions.length > 0 && (\r\n          <Animated.View\r\n            entering={FadeInUp.duration(600).delay(1600)}\r\n            style={[styles.failedCard, { backgroundColor: colors.surface }, shadows.sm]}\r\n          >\r\n            <View style={styles.failedHeader}>\r\n              <Text style={[styles.failedTitle, { color: colors.text }]}>Questions à réviser</Text>\r\n              <TouchableOpacity\r\n                onPress={reviewFailedQuestions}\r\n                style={[styles.reviewButton, { backgroundColor: colors.primary }]}\r\n              >\r\n                <Text style={styles.reviewButtonText}>Réviser</Text>\r\n                <Ionicons name=\"arrow-forward\" size={16} color=\"#FFFFFF\" />\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <Text style={[styles.failedCount, { color: colors.textSecondary }]}>\r\n              {stats.failedQuestions.length} question{stats.failedQuestions.length > 1 ? 's' : ''} à\r\n              revoir\r\n            </Text>\r\n          </Animated.View>\r\n        )}\r\n\r\n        {/* Actions */}\r\n        <ButtonContainer\r\n          backgroundColor={colors.background}\r\n          borderColor=\"transparent\"\r\n          hasBorder={false}\r\n          style={{ backgroundColor: 'transparent' }}\r\n        >\r\n          <Animated.View entering={FadeInUp.duration(600).delay(1800)}>\r\n            <TouchableOpacity\r\n              onPress={() => startNewSession(true)}\r\n              style={[styles.primaryButton, { backgroundColor: colors.primary }]}\r\n              activeOpacity={0.8}\r\n            >\r\n              <Ionicons name=\"refresh\" size={2} color=\"#FFFFFF\" />\r\n              <Text style={styles.primaryButtonText}>Nouvelle session</Text>\r\n              <Text style={styles.primaryButtonSubtext}>Mêmes paramètres</Text>\r\n            </TouchableOpacity>\r\n\r\n            <View style={styles.secondaryActions}>\r\n              <TouchableOpacity\r\n                onPress={() => startNewSession(false)}\r\n                style={[styles.secondaryButton, { backgroundColor: colors.surface }, shadows.sm]}\r\n                activeOpacity={0.7}\r\n              >\r\n                <Ionicons name=\"settings\" size={32} color={colors.primary} />\r\n                <Text style={[styles.secondaryButtonText, { color: colors.text }]}>\r\n                  Nouveaux paramètres\r\n                </Text>\r\n              </TouchableOpacity>\r\n\r\n              <TouchableOpacity\r\n                onPress={shareResults}\r\n                style={[styles.secondaryButton, { backgroundColor: colors.surface }, shadows.sm]}\r\n                activeOpacity={0.7}\r\n              >\r\n                <Ionicons name=\"share-social\" size={32} color={colors.primary} />\r\n                <Text style={[styles.secondaryButtonText, { color: colors.text }]}>Partager</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <TouchableOpacity\r\n              onPress={() => void navigation.navigate('HomeScreen')}\r\n              style={styles.homeButton}\r\n              activeOpacity={0.7}\r\n            >\r\n              <Text style={[styles.homeButtonText, { color: colors.textSecondary }]}>\r\n                Retour à l'accueil\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </Animated.View>\r\n        </ButtonContainer>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    ...typography.body,\r\n  },\r\n  header: {\r\n    paddingHorizontal: spacing.lg,\r\n    paddingTop: spacing.lg,\r\n    paddingBottom: spacing.md,\r\n  },\r\n  scoreCard: {\r\n    padding: spacing.xl,\r\n    borderRadius: borderRadius.xl,\r\n    alignItems: 'center',\r\n  },\r\n  scoreTitle: {\r\n    ...typography.h4,\r\n    color: '#FFFFFF',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  scoreContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  scoreText: {\r\n    fontSize: 48,\r\n    fontWeight: 'bold',\r\n    color: '#FFFFFF',\r\n  },\r\n  gradeEmoji: {\r\n    fontSize: 36,\r\n    marginLeft: spacing.md,\r\n  },\r\n  scoreNote: {\r\n    ...typography.h3,\r\n    color: '#FFFFFF',\r\n    opacity: 0.9,\r\n  },\r\n  statsCard: {\r\n    marginHorizontal: spacing.lg,\r\n    marginBottom: spacing.lg,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  statsTitle: {\r\n    ...typography.h4,\r\n    marginBottom: spacing.md,\r\n  },\r\n  progressContainer: {\r\n    marginBottom: spacing.lg,\r\n  },\r\n  progressBar: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n    overflow: 'hidden',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  progressFill: {\r\n    height: '100%',\r\n    borderRadius: 4,\r\n  },\r\n  progressText: {\r\n    ...typography.caption,\r\n    textAlign: 'center',\r\n  },\r\n  statsGrid: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginHorizontal: -spacing.sm,\r\n  },\r\n  statItem: {\r\n    width: '50%',\r\n    paddingHorizontal: spacing.sm,\r\n    marginBottom: spacing.md,\r\n    alignItems: 'center',\r\n  },\r\n  statValue: {\r\n    ...typography.h3,\r\n    marginTop: spacing.xs,\r\n  },\r\n  statLabel: {\r\n    ...typography.small,\r\n    textAlign: 'center',\r\n  },\r\n  pointsCard: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.md,\r\n    marginTop: spacing.md,\r\n  },\r\n  pointsContent: {\r\n    marginLeft: spacing.md,\r\n  },\r\n  pointsValue: {\r\n    ...typography.h4,\r\n    fontWeight: 'bold',\r\n  },\r\n  pointsLabel: {\r\n    ...typography.small,\r\n  },\r\n  themeCard: {\r\n    marginHorizontal: spacing.lg,\r\n    marginBottom: spacing.lg,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  themeTitle: {\r\n    ...typography.h4,\r\n    marginBottom: spacing.md,\r\n  },\r\n  themeItem: {\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.md,\r\n    marginBottom: spacing.sm,\r\n  },\r\n  themeHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  themeInfo: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    flex: 1,\r\n  },\r\n  themeColorDot: {\r\n    width: 12,\r\n    height: 12,\r\n    borderRadius: 6,\r\n    marginRight: spacing.sm,\r\n  },\r\n  themeName: {\r\n    ...typography.bodyBold,\r\n  },\r\n  themeStats: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  themeScore: {\r\n    ...typography.body,\r\n    marginRight: spacing.sm,\r\n  },\r\n  themeRate: {\r\n    ...typography.bodyBold,\r\n    marginRight: spacing.sm,\r\n  },\r\n  sousThemeContainer: {\r\n    marginTop: spacing.md,\r\n    paddingTop: spacing.md,\r\n    borderTopWidth: 1,\r\n    borderTopColor: 'rgba(0,0,0,0.05)',\r\n  },\r\n  sousThemeItem: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingVertical: spacing.sm,\r\n    paddingLeft: spacing.lg,\r\n  },\r\n  sousThemeName: {\r\n    ...typography.caption,\r\n    flex: 1,\r\n  },\r\n  sousThemeStats: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  sousThemeScore: {\r\n    ...typography.small,\r\n    marginRight: spacing.sm,\r\n  },\r\n  sousThemeRate: {\r\n    ...typography.small,\r\n    fontWeight: '600',\r\n  },\r\n  failedCard: {\r\n    marginHorizontal: spacing.lg,\r\n    marginBottom: spacing.lg,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  failedHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.sm,\r\n  },\r\n  failedTitle: {\r\n    ...typography.h4,\r\n  },\r\n  reviewButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: spacing.md,\r\n    paddingVertical: spacing.sm,\r\n    borderRadius: borderRadius.md,\r\n  },\r\n  reviewButtonText: {\r\n    ...typography.caption,\r\n    color: '#FFFFFF',\r\n    fontWeight: '600',\r\n    marginRight: spacing.xs,\r\n  },\r\n  failedCount: {\r\n    ...typography.caption,\r\n  },\r\n  primaryButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    marginBottom: spacing.md,\r\n  },\r\n  primaryButtonText: {\r\n    ...typography.bodyBold,\r\n    color: '#FFFFFF',\r\n    marginLeft: spacing.sm,\r\n  },\r\n  primaryButtonSubtext: {\r\n    ...typography.small,\r\n    color: '#FFFFFF',\r\n    opacity: 0.8,\r\n    marginLeft: spacing.xs,\r\n  },\r\n  secondaryActions: {\r\n    flexDirection: 'row',\r\n    marginBottom: spacing.md,\r\n  },\r\n  secondaryButton: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.md,\r\n    marginHorizontal: spacing.xs,\r\n  },\r\n  secondaryButtonText: {\r\n    ...typography.caption,\r\n    fontWeight: '600',\r\n    marginLeft: spacing.xs,\r\n  },\r\n  homeButton: {\r\n    alignItems: 'center',\r\n    padding: spacing.md,\r\n  },\r\n  homeButtonText: {\r\n    ...typography.body,\r\n  },\r\n  abandonedCard: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginHorizontal: spacing.lg,\r\n    marginBottom: spacing.md,\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.md,\r\n  },\r\n  abandonedText: {\r\n    ...typography.caption,\r\n    flex: 1,\r\n    marginLeft: spacing.sm,\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\TrainingConfigScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":78,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":78,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1973,1973],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1973,1973],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":79,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":79,"endColumn":30,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1999,1999],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1999,1999],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkPausedSession'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkPausedSession]","fix":{"range":[2030,2032],"text":"[checkPausedSession]"}}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":89,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":89,"endColumn":50,"suggestions":[{"fix":{"range":[2296,2335],"text":"pausedSession?.isPaused"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3928,3931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3928,3931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6102,6105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6102,6105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":250,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":250,"endColumn":62,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6317,6317],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6317,6317],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":256,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":256,"endColumn":62,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6526,6526],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6526,6526],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'value <= min ? 0.5 : 1' }","line":266,"column":15,"nodeType":"ObjectExpression","endLine":269,"endColumn":16},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'value >= max ? 0.5 : 1' }","line":297,"column":15,"nodeType":"ObjectExpression","endLine":300,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10161,10164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10161,10164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":440,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13068,13071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13068,13071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":589,"column":22,"nodeType":"ObjectExpression","endLine":589,"endColumn":35},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#E5E5E5' }","line":769,"column":14,"nodeType":"ObjectExpression","endLine":773,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":865,"column":20,"nodeType":"ObjectExpression","endLine":869,"endColumn":4}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Switch,\n  TextInput,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport { TrainingStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\nimport { supabase } from '../config/supabase';\nimport { sessionService } from '../services/sessionService';\nimport { ButtonContainer } from '../components/ButtonContainer';\nimport * as Haptics from 'expo-haptics';\n\ninterface Theme {\n  id: number;\n  nom: string;\n  description: string;\n  couleur: string;\n  icone: string;\n  sous_themes: SousTheme[];\n  isExpanded: boolean;\n  isSelected: boolean;\n}\n\ninterface SousTheme {\n  id: number;\n  nom: string;\n  description: string;\n  questionCount: number;\n  isSelected: boolean;\n}\n\ninterface SessionSettings {\n  useDefaults: boolean;\n  questionType: 'QCU' | 'QCM' | 'MIXTE';\n  timerEnabled: boolean;\n  timePerQuestion: number;\n  scoring: {\n    correct: number;\n    incorrect: number;\n    noAnswer: number;\n    partial: number;\n  };\n}\n\nexport const TrainingConfigScreen: React.FC<TrainingStackScreenProps<'TrainingConfig'>> = ({\n  navigation,\n}) => {\n  const { colors } = useTheme();\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [themes, setThemes] = useState<Theme[]>([]);\n  const [timerInputValue, setTimerInputValue] = useState('60');\n  const [settings, setSettings] = useState<SessionSettings>({\n    useDefaults: true,\n    questionType: 'MIXTE',\n    timerEnabled: true,\n    timePerQuestion: 60,\n    scoring: {\n      correct: 1,\n      incorrect: -0.5,\n      noAnswer: -0.5,\n      partial: 0.5,\n    },\n  });\n\n  useEffect(() => {\n    checkPausedSession();\n    loadThemesAndQuestions();\n  }, []);\n\n  useEffect(() => {\n    setTimerInputValue(settings.timePerQuestion.toString());\n  }, [settings.timePerQuestion]);\n\n  const checkPausedSession = async () => {\n    if (user) {\n      const pausedSession = await sessionService.getLocalSession(user.id);\n      if (pausedSession && pausedSession.isPaused) {\n        Alert.alert(\n          'Session en pause',\n          'Vous avez une session en pause. Voulez-vous la reprendre ?',\n          [\n            { text: 'Non', style: 'cancel' },\n            {\n              text: 'Reprendre',\n              onPress: () => {\n                navigation.navigate('TrainingSession', {\n                  themes: [],\n                  sousThemes: [],\n                  settings: pausedSession.settings,\n                });\n              },\n            },\n          ]\n        );\n      }\n    }\n  };\n\n  const loadThemesAndQuestions = async () => {\n    try {\n      setLoading(true);\n\n      // Récupérer les thèmes et sous-thèmes\n      const { data: themesData, error: themesError } = await supabase\n        .from('themes')\n        .select(\n          `\n          id,\n          nom,\n          description,\n          couleur,\n          icone,\n          sous_themes (\n            id,\n            nom,\n            description\n          )\n        `\n        )\n        .eq('actif', true)\n        .order('ordre');\n\n      if (themesError) {\n        throw themesError;\n      }\n\n      // Compter les questions pour chaque sous-thème\n      const { data: questionsCount, error: countError } = await supabase\n        .from('questions')\n        .select('sous_theme_id')\n        .eq('actif', true);\n\n      if (countError) {\n        throw countError;\n      }\n\n      // Mapper les données\n      const formattedThemes =\n        themesData?.map(theme => ({\n          ...theme,\n          isExpanded: false,\n          isSelected: false,\n          sous_themes: theme.sous_themes.map((st: any) => ({\n            ...st,\n            questionCount: questionsCount?.filter(q => q.sous_theme_id === st.id).length || 0,\n            isSelected: false,\n          })),\n        })) || [];\n\n      setThemes(formattedThemes);\n    } catch (error) {\n      console.error('Erreur lors du chargement des thèmes:', error);\n      Alert.alert('Erreur', 'Impossible de charger les thèmes');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleThemeExpansion = (themeId: number) => {\n    setThemes(prev =>\n      prev.map(theme =>\n        theme.id === themeId ? { ...theme, isExpanded: !theme.isExpanded } : theme\n      )\n    );\n  };\n\n  const toggleThemeSelection = (themeId: number) => {\n    setThemes(prev =>\n      prev.map(theme =>\n        theme.id === themeId\n          ? {\n              ...theme,\n              isSelected: !theme.isSelected,\n              sous_themes: theme.sous_themes.map(st => ({\n                ...st,\n                isSelected: !theme.isSelected,\n              })),\n            }\n          : theme\n      )\n    );\n  };\n\n  const toggleSousThemeSelection = (themeId: number, sousThemeId: number) => {\n    setThemes(prev =>\n      prev.map(theme =>\n        theme.id === themeId\n          ? {\n              ...theme,\n              sous_themes: theme.sous_themes.map(st =>\n                st.id === sousThemeId ? { ...st, isSelected: !st.isSelected } : st\n              ),\n              isSelected: theme.sous_themes.some(st =>\n                st.id === sousThemeId ? !st.isSelected : st.isSelected\n              ),\n            }\n          : theme\n      )\n    );\n  };\n\n  const getTotalQuestions = () => {\n    return themes.reduce(\n      (total, theme) =>\n        total +\n        theme.sous_themes.reduce(\n          (subTotal, st) => subTotal + (st.isSelected ? st.questionCount : 0),\n          0\n        ),\n      0\n    );\n  };\n\n  const getSelectedThemesCount = () => {\n    return themes.filter(t => t.isSelected).length;\n  };\n\n  const ScoreInput = ({\n    label,\n    value,\n    onValueChange,\n    colors,\n    step = 0.5,\n    min = -10,\n    max = 10,\n  }: {\n    label: string;\n    value: number;\n    onValueChange: (value: number) => void;\n    colors: any;\n    step?: number;\n    min?: number;\n    max?: number;\n  }) => {\n    const handleDecrease = () => {\n      const newValue = Math.max(min, Number((value - step).toFixed(1)));\n      onValueChange(newValue);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    };\n\n    const handleIncrease = () => {\n      const newValue = Math.min(max, Number((value + step).toFixed(1)));\n      onValueChange(newValue);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    };\n\n    return (\n      <View style={styles.scoringItem}>\n        <Text style={[styles.scoringLabel, { color: colors.textSecondary }]}>{label}</Text>\n        <View style={styles.scoreInputContainer}>\n          <TouchableOpacity\n            style={[\n              styles.scoreButton,\n              {\n                backgroundColor: value <= min ? colors.border : colors.primary,\n                opacity: value <= min ? 0.5 : 1,\n              },\n            ]}\n            onPress={handleDecrease}\n            disabled={value <= min}\n            activeOpacity={0.7}\n          >\n            <Ionicons\n              name=\"remove\"\n              size={16}\n              color={value <= min ? colors.textSecondary : '#FFF'}\n            />\n          </TouchableOpacity>\n\n          <View\n            style={[\n              styles.scoreDisplay,\n              { backgroundColor: colors.background, borderColor: colors.border },\n            ]}\n          >\n            <Text style={[styles.scoreValue, { color: colors.text }]}>\n              {value >= 0 ? '+' : ''}\n              {value.toFixed(1)}\n            </Text>\n          </View>\n\n          <TouchableOpacity\n            style={[\n              styles.scoreButton,\n              {\n                backgroundColor: value >= max ? colors.border : colors.primary,\n                opacity: value >= max ? 0.5 : 1,\n              },\n            ]}\n            onPress={handleIncrease}\n            disabled={value >= max}\n            activeOpacity={0.7}\n          >\n            <Ionicons name=\"add\" size={16} color={value >= max ? colors.textSecondary : '#FFF'} />\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  };\n\n  const validateAndStart = () => {\n    const totalQuestions = getTotalQuestions();\n\n    if (totalQuestions === 0) {\n      Alert.alert('Sélection requise', 'Veuillez sélectionner au moins un thème ou sous-thème');\n      return;\n    }\n\n    if (!settings.useDefaults) {\n      if (settings.timePerQuestion < 10 || settings.timePerQuestion > 300) {\n        Alert.alert('Temps invalide', 'Le temps par question doit être entre 10 et 300 secondes');\n        return;\n      }\n    }\n\n    // Navigation vers l'écran de session avec les paramètres\n    const selectedThemes = themes.filter(\n      t => t.isSelected || t.sous_themes.some(st => st.isSelected)\n    );\n    const selectedSousThemes = selectedThemes.flatMap(t =>\n      t.sous_themes.filter(st => st.isSelected).map(st => st.id)\n    );\n\n    // Navigation vers la session d'entraînement\n    navigation.navigate('TrainingSession', {\n      themes: selectedThemes.map(t => t.id),\n      sousThemes: selectedSousThemes,\n      settings: settings,\n    });\n  };\n\n  const renderThemeItem = (theme: Theme) => (\n    <View key={theme.id} style={[styles.themeContainer, { backgroundColor: colors.surface }]}>\n      <TouchableOpacity\n        style={styles.themeHeader}\n        onPress={() => toggleThemeExpansion(theme.id)}\n        activeOpacity={0.7}\n      >\n        <View style={styles.themeLeft}>\n          <TouchableOpacity\n            style={[\n              styles.checkbox,\n              { borderColor: colors.border },\n              theme.isSelected && { backgroundColor: colors.primary, borderColor: colors.primary },\n            ]}\n            onPress={() => toggleThemeSelection(theme.id)}\n          >\n            {theme.isSelected && <Ionicons name=\"checkmark\" size={16} color={colors.surface} />}\n          </TouchableOpacity>\n          <View style={[styles.themeIcon, { backgroundColor: `${theme.couleur}20` }]}>\n            <Ionicons name={theme.icone as any} size={20} color={theme.couleur} />\n          </View>\n          <View style={styles.themeInfo}>\n            <Text style={[styles.themeName, { color: colors.text }]}>{theme.nom}</Text>\n            <Text style={[styles.themeDesc, { color: colors.textSecondary }]}>\n              {theme.sous_themes.length} sous-thèmes\n            </Text>\n          </View>\n        </View>\n        <Ionicons\n          name={theme.isExpanded ? 'chevron-up' : 'chevron-down'}\n          size={20}\n          color={colors.textSecondary}\n        />\n      </TouchableOpacity>\n\n      {theme.isExpanded && (\n        <View style={styles.sousThemesList}>\n          {theme.sous_themes.map(sousTheme => (\n            <TouchableOpacity\n              key={sousTheme.id}\n              style={styles.sousThemeItem}\n              onPress={() => toggleSousThemeSelection(theme.id, sousTheme.id)}\n              activeOpacity={0.7}\n            >\n              <View\n                style={[\n                  styles.checkbox,\n                  styles.sousThemeCheckbox,\n                  { borderColor: colors.border },\n                  sousTheme.isSelected && {\n                    backgroundColor: colors.primary,\n                    borderColor: colors.primary,\n                  },\n                ]}\n              >\n                {sousTheme.isSelected && (\n                  <Ionicons name=\"checkmark\" size={14} color={colors.surface} />\n                )}\n              </View>\n              <View style={styles.sousThemeInfo}>\n                <Text style={[styles.sousThemeName, { color: colors.text }]}>{sousTheme.nom}</Text>\n                <Text style={[styles.questionCount, { color: colors.textSecondary }]}>\n                  {sousTheme.questionCount} questions\n                </Text>\n              </View>\n            </TouchableOpacity>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n\n  const renderSettings = () => (\n    <View style={[styles.settingsContainer, { backgroundColor: colors.surface }]}>\n      <View style={styles.settingRow}>\n        <Text style={[styles.settingLabel, { color: colors.text }]}>\n          Utiliser les paramètres par défaut\n        </Text>\n        <Switch\n          value={settings.useDefaults}\n          onValueChange={value => setSettings(prev => ({ ...prev, useDefaults: value }))}\n          trackColor={{ false: colors.border, true: colors.primary }}\n          thumbColor={colors.surface}\n        />\n      </View>\n\n      {!settings.useDefaults && (\n        <>\n          <View style={styles.separator} />\n\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Type de questions</Text>\n          <View style={styles.radioGroup}>\n            {['QCU', 'QCM', 'MIXTE'].map(type => (\n              <TouchableOpacity\n                key={type}\n                style={styles.radioOption}\n                onPress={() => setSettings(prev => ({ ...prev, questionType: type as any }))}\n              >\n                <View\n                  style={[\n                    styles.radio,\n                    { borderColor: colors.border },\n                    settings.questionType === type && { borderColor: colors.primary },\n                  ]}\n                >\n                  {settings.questionType === type && (\n                    <View style={[styles.radioDot, { backgroundColor: colors.primary }]} />\n                  )}\n                </View>\n                <Text style={[styles.radioLabel, { color: colors.text }]}>{type}</Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          <View style={styles.separator} />\n\n          <View style={styles.settingRow}>\n            <Text style={[styles.settingLabel, { color: colors.text }]}>Chronomètre</Text>\n            <Switch\n              value={settings.timerEnabled}\n              onValueChange={value => setSettings(prev => ({ ...prev, timerEnabled: value }))}\n              trackColor={{ false: colors.border, true: colors.primary }}\n              thumbColor={colors.surface}\n            />\n          </View>\n\n          {settings.timerEnabled && (\n            <View style={styles.timerInput}>\n              <Text style={[styles.inputLabel, { color: colors.textSecondary }]}>\n                Temps par question (secondes)\n              </Text>\n              <TextInput\n                style={[\n                  styles.numberInput,\n                  {\n                    color: colors.text,\n                    borderColor: colors.border,\n                    backgroundColor: colors.background,\n                  },\n                ]}\n                value={timerInputValue}\n                onChangeText={setTimerInputValue}\n                onBlur={() => {\n                  const num = parseInt(timerInputValue);\n                  if (!isNaN(num) && num >= 10 && num <= 300) {\n                    setSettings(prev => ({ ...prev, timePerQuestion: num }));\n                  } else {\n                    setTimerInputValue(settings.timePerQuestion.toString());\n                  }\n                }}\n                keyboardType=\"numeric\"\n                maxLength={3}\n                placeholder=\"60\"\n              />\n            </View>\n          )}\n\n          <View style={styles.separator} />\n\n          <Text style={[styles.sectionTitle, { color: colors.text }]}>Barème</Text>\n          <View style={styles.scoringGrid}>\n            <ScoreInput\n              label=\"Bonne réponse\"\n              value={settings.scoring.correct}\n              onValueChange={value =>\n                setSettings(prev => ({\n                  ...prev,\n                  scoring: { ...prev.scoring, correct: value },\n                }))\n              }\n              colors={colors}\n              step={0.5}\n              min={0}\n              max={10}\n            />\n\n            <ScoreInput\n              label=\"Mauvaise réponse\"\n              value={settings.scoring.incorrect}\n              onValueChange={value =>\n                setSettings(prev => ({\n                  ...prev,\n                  scoring: { ...prev.scoring, incorrect: value },\n                }))\n              }\n              colors={colors}\n              step={0.5}\n              min={-5}\n              max={0}\n            />\n\n            <ScoreInput\n              label=\"Sans réponse\"\n              value={settings.scoring.noAnswer}\n              onValueChange={value =>\n                setSettings(prev => ({\n                  ...prev,\n                  scoring: { ...prev.scoring, noAnswer: value },\n                }))\n              }\n              colors={colors}\n              step={0.5}\n              min={-5}\n              max={0}\n            />\n\n            <ScoreInput\n              label=\"Réponse partielle\"\n              value={settings.scoring.partial}\n              onValueChange={value =>\n                setSettings(prev => ({\n                  ...prev,\n                  scoring: { ...prev.scoring, partial: value },\n                }))\n              }\n              colors={colors}\n              step={0.5}\n              min={0}\n              max={5}\n            />\n          </View>\n        </>\n      )}\n    </View>\n  );\n\n  if (loading) {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={colors.primary} />\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()}>\n          <Ionicons name=\"arrow-back\" size={24} color={colors.text} />\n        </TouchableOpacity>\n        <Text style={[styles.headerTitle, { color: colors.text }]}>\n          Configuration de l'entraînement\n        </Text>\n        <View style={{ width: 24 }} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={[styles.statsBar, { backgroundColor: colors.surface }]}>\n          <View style={styles.stat}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>\n              {getSelectedThemesCount()}\n            </Text>\n            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Thèmes</Text>\n          </View>\n          <View style={[styles.statDivider, { backgroundColor: colors.border }]} />\n          <View style={styles.stat}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>{getTotalQuestions()}</Text>\n            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Questions</Text>\n          </View>\n        </View>\n\n        <Text style={[styles.sectionHeader, { color: colors.text }]}>Sélection des thèmes</Text>\n        {themes.map(renderThemeItem)}\n\n        <Text style={[styles.sectionHeader, { color: colors.text }]}>Paramètres de session</Text>\n        {renderSettings()}\n      </ScrollView>\n\n      <ButtonContainer backgroundColor={colors.background} borderColor={colors.border}>\n        <TouchableOpacity\n          style={[\n            styles.startButton,\n            { backgroundColor: colors.primary },\n            getTotalQuestions() === 0 && styles.disabledButton,\n          ]}\n          onPress={validateAndStart}\n          disabled={getTotalQuestions() === 0}\n        >\n          <Text style={styles.startButtonText}>Commencer l'entraînement</Text>\n          <Ionicons name=\"arrow-forward\" size={20} color=\"#FFF\" />\n        </TouchableOpacity>\n      </ButtonContainer>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: spacing.lg,\n    paddingVertical: spacing.md,\n  },\n  headerTitle: {\n    ...typography.h3,\n  },\n  content: {\n    flex: 1,\n  },\n  statsBar: {\n    flexDirection: 'row',\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.lg,\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    ...shadows.sm,\n  },\n  stat: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  statValue: {\n    ...typography.h2,\n  },\n  statLabel: {\n    ...typography.small,\n    marginTop: spacing.xs,\n  },\n  statDivider: {\n    width: 1,\n    marginHorizontal: spacing.md,\n  },\n  sectionHeader: {\n    ...typography.bodyBold,\n    marginHorizontal: spacing.lg,\n    marginTop: spacing.lg,\n    marginBottom: spacing.md,\n  },\n  themeContainer: {\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.md,\n    borderRadius: borderRadius.lg,\n    overflow: 'hidden',\n    ...shadows.sm,\n  },\n  themeHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: spacing.md,\n  },\n  themeLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: borderRadius.sm,\n    borderWidth: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: spacing.md,\n  },\n  themeIcon: {\n    width: 36,\n    height: 36,\n    borderRadius: borderRadius.md,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: spacing.md,\n  },\n  themeInfo: {\n    flex: 1,\n  },\n  themeName: {\n    ...typography.bodyBold,\n  },\n  themeDesc: {\n    ...typography.small,\n    marginTop: 2,\n  },\n  sousThemesList: {\n    paddingHorizontal: spacing.md,\n    paddingBottom: spacing.md,\n  },\n  sousThemeItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: spacing.sm,\n    paddingLeft: spacing.xl + spacing.md,\n  },\n  sousThemeCheckbox: {\n    width: 20,\n    height: 20,\n  },\n  sousThemeInfo: {\n    flex: 1,\n    marginLeft: spacing.md,\n  },\n  sousThemeName: {\n    ...typography.body,\n  },\n  questionCount: {\n    ...typography.small,\n    marginTop: 2,\n  },\n  settingsContainer: {\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.lg,\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    ...shadows.sm,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: spacing.sm,\n  },\n  settingLabel: {\n    ...typography.body,\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#E5E5E5',\n    marginVertical: spacing.md,\n  },\n  sectionTitle: {\n    ...typography.bodyBold,\n    marginBottom: spacing.sm,\n  },\n  radioGroup: {\n    flexDirection: 'row',\n    marginTop: spacing.sm,\n  },\n  radioOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginRight: spacing.lg,\n  },\n  radio: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    borderWidth: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: spacing.sm,\n  },\n  radioDot: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n  },\n  radioLabel: {\n    ...typography.body,\n  },\n  timerInput: {\n    marginTop: spacing.sm,\n  },\n  inputLabel: {\n    ...typography.small,\n    marginBottom: spacing.xs,\n  },\n  numberInput: {\n    borderWidth: 1,\n    borderRadius: borderRadius.md,\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    ...typography.body,\n    width: 100,\n  },\n  scoringGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: spacing.sm,\n  },\n  scoringItem: {\n    width: '50%',\n    paddingRight: spacing.sm,\n    marginBottom: spacing.md,\n  },\n  scoringLabel: {\n    ...typography.small,\n    marginBottom: spacing.xs,\n  },\n  scoreInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  scoreButton: {\n    width: 32,\n    height: 32,\n    borderRadius: borderRadius.md,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  scoreDisplay: {\n    flex: 1,\n    marginHorizontal: spacing.sm,\n    paddingVertical: spacing.sm,\n    borderRadius: borderRadius.md,\n    borderWidth: 1,\n    alignItems: 'center',\n  },\n  scoreValue: {\n    ...typography.bodyBold,\n    minWidth: 40,\n    textAlign: 'center',\n  },\n  startButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.md,\n    borderRadius: borderRadius.lg,\n  },\n  startButtonText: {\n    ...typography.bodyBold,\n    color: '#FFF',\n    marginRight: spacing.sm,\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\TrainingScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScrollView' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2282,2285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2282,2285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"item.progress === 100 ? '#10B981' : colors.primary\"\n}","line":110,"column":17,"nodeType":"ObjectExpression","endLine":113,"endColumn":18},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: {\n  backgroundColor: \"item.progress === 100 ? '#10B981' : colors.primary\"\n}","line":110,"column":17,"nodeType":"ObjectExpression","endLine":113,"endColumn":18},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#F59E0B' }","line":152,"column":44,"nodeType":"ObjectExpression","endLine":152,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#F59E0B' }","line":152,"column":44,"nodeType":"ObjectExpression","endLine":152,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#3B82F6' }","line":156,"column":44,"nodeType":"ObjectExpression","endLine":156,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#3B82F6' }","line":156,"column":44,"nodeType":"ObjectExpression","endLine":156,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":193,"column":20,"nodeType":"ObjectExpression","endLine":197,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'rgba(255, 255, 255, 0.9)' }","line":198,"column":23,"nodeType":"ObjectExpression","endLine":201,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, FlatList } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\nimport { TrainingStackScreenProps } from '../types/navigation';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface Training {\n  id: string;\n  title: string;\n  category: string;\n  duration: string;\n  difficulty: 'Débutant' | 'Intermédiaire' | 'Avancé';\n  progress: number;\n  icon: string;\n}\n\nexport const TrainingScreen: React.FC<TrainingStackScreenProps<'TrainingList'>> = ({\n  navigation,\n}) => {\n  const { colors } = useTheme();\n\n  const handleStartTraining = () => {\n    navigation.navigate('TrainingConfig');\n  };\n\n  const trainings: Training[] = [\n    {\n      id: '1',\n      title: 'Premiers secours',\n      category: 'Médical',\n      duration: '2h30',\n      difficulty: 'Débutant',\n      progress: 100,\n      icon: 'medkit-outline',\n    },\n    {\n      id: '2',\n      title: 'Incendie structure',\n      category: 'Feu',\n      duration: '4h',\n      difficulty: 'Intermédiaire',\n      progress: 75,\n      icon: 'flame-outline',\n    },\n    {\n      id: '3',\n      title: 'Sauvetage aquatique',\n      category: 'Sauvetage',\n      duration: '3h',\n      difficulty: 'Avancé',\n      progress: 30,\n      icon: 'water-outline',\n    },\n    {\n      id: '4',\n      title: 'Matières dangereuses',\n      category: 'Risques',\n      duration: '5h',\n      difficulty: 'Avancé',\n      progress: 0,\n      icon: 'warning-outline',\n    },\n  ];\n\n  const getDifficultyColor = (difficulty: Training['difficulty']) => {\n    switch (difficulty) {\n      case 'Débutant':\n        return '#10B981';\n      case 'Intermédiaire':\n        return '#F59E0B';\n      case 'Avancé':\n        return '#EF4444';\n    }\n  };\n\n  const renderTrainingCard = ({ item }: { item: Training }) => (\n    <TouchableOpacity\n      style={[styles.trainingCard, { backgroundColor: colors.surface }, shadows.sm]}\n      activeOpacity={0.7}\n    >\n      <View style={styles.cardHeader}>\n        <View style={[styles.iconContainer, { backgroundColor: `${colors.primary}15` }]}>\n          <Ionicons name={item.icon as any} size={24} color={colors.primary} />\n        </View>\n        <View style={styles.cardContent}>\n          <Text style={[styles.trainingTitle, { color: colors.text }]}>{item.title}</Text>\n          <View style={styles.metaContainer}>\n            <Text style={[styles.category, { color: colors.textSecondary }]}>{item.category}</Text>\n            <Text style={[styles.duration, { color: colors.textSecondary }]}>{item.duration}</Text>\n          </View>\n        </View>\n        <View style={styles.difficultyBadge}>\n          <Text style={[styles.difficultyText, { color: getDifficultyColor(item.difficulty) }]}>\n            {item.difficulty}\n          </Text>\n        </View>\n      </View>\n      {item.progress > 0 && (\n        <View style={styles.progressContainer}>\n          <View style={styles.progressHeader}>\n            <Text style={[styles.progressLabel, { color: colors.textSecondary }]}>Progression</Text>\n            <Text style={[styles.progressValue, { color: colors.text }]}>{item.progress}%</Text>\n          </View>\n          <View style={[styles.progressBar, { backgroundColor: colors.border }]}>\n            <View\n              style={[\n                styles.progressFill,\n                {\n                  backgroundColor: item.progress === 100 ? '#10B981' : colors.primary,\n                  width: `${item.progress}%`,\n                },\n              ]}\n            />\n          </View>\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\n      <View style={styles.header}>\n        <Text style={[styles.headerTitle, { color: colors.text }]}>Formations</Text>\n        <TouchableOpacity onPress={handleStartTraining}>\n          <Ionicons name=\"play-circle-outline\" size={28} color={colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      <TouchableOpacity\n        style={[styles.quickStartCard, { backgroundColor: colors.primary }]}\n        onPress={handleStartTraining}\n        activeOpacity={0.8}\n      >\n        <View style={styles.quickStartContent}>\n          <Ionicons name=\"rocket-outline\" size={32} color=\"#FFF\" />\n          <View style={styles.quickStartText}>\n            <Text style={styles.quickStartTitle}>Entraînement Libre</Text>\n            <Text style={styles.quickStartSubtitle}>Commencer une session personnalisée</Text>\n          </View>\n        </View>\n        <Ionicons name=\"arrow-forward\" size={24} color=\"#FFF\" />\n      </TouchableOpacity>\n\n      <View style={styles.statsRow}>\n        <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n          <Text style={[styles.statNumber, { color: colors.primary }]}>12</Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>Complétées</Text>\n        </View>\n        <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n          <Text style={[styles.statNumber, { color: '#F59E0B' }]}>3</Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>En cours</Text>\n        </View>\n        <View style={[styles.statCard, { backgroundColor: colors.surface }]}>\n          <Text style={[styles.statNumber, { color: '#3B82F6' }]}>5</Text>\n          <Text style={[styles.statLabel, { color: colors.textSecondary }]}>À venir</Text>\n        </View>\n      </View>\n\n      <FlatList\n        data={trainings}\n        renderItem={renderTrainingCard}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContent}\n        showsVerticalScrollIndicator={false}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  quickStartCard: {\n    marginHorizontal: spacing.lg,\n    marginBottom: spacing.lg,\n    padding: spacing.lg,\n    borderRadius: borderRadius.lg,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    ...shadows.md,\n  },\n  quickStartContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  quickStartText: {\n    marginLeft: spacing.md,\n  },\n  quickStartTitle: {\n    ...typography.bodyBold,\n    color: '#FFF',\n    marginBottom: spacing.xs,\n  },\n  quickStartSubtitle: {\n    ...typography.small,\n    color: 'rgba(255, 255, 255, 0.9)',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: spacing.lg,\n    paddingVertical: spacing.md,\n  },\n  headerTitle: {\n    ...typography.h2,\n  },\n  statsRow: {\n    flexDirection: 'row',\n    paddingHorizontal: spacing.lg,\n    marginBottom: spacing.lg,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: spacing.sm,\n    marginHorizontal: spacing.xs,\n    borderRadius: borderRadius.md,\n  },\n  statNumber: {\n    ...typography.h3,\n  },\n  statLabel: {\n    ...typography.small,\n    marginTop: spacing.xs,\n  },\n  listContent: {\n    paddingHorizontal: spacing.lg,\n    paddingBottom: 100,\n  },\n  trainingCard: {\n    padding: spacing.md,\n    borderRadius: borderRadius.lg,\n    marginBottom: spacing.md,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  iconContainer: {\n    width: 48,\n    height: 48,\n    borderRadius: borderRadius.md,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: spacing.md,\n  },\n  cardContent: {\n    flex: 1,\n  },\n  trainingTitle: {\n    ...typography.bodyBold,\n    marginBottom: spacing.xs,\n  },\n  metaContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  category: {\n    ...typography.caption,\n    marginRight: spacing.md,\n  },\n  duration: {\n    ...typography.caption,\n  },\n  difficultyBadge: {\n    paddingHorizontal: spacing.sm,\n    paddingVertical: spacing.xs,\n  },\n  difficultyText: {\n    ...typography.small,\n    fontWeight: '600',\n  },\n  progressContainer: {\n    marginTop: spacing.md,\n  },\n  progressHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: spacing.xs,\n  },\n  progressLabel: {\n    ...typography.small,\n  },\n  progressValue: {\n    ...typography.small,\n    fontWeight: '600',\n  },\n  progressBar: {\n    height: 6,\n    borderRadius: borderRadius.sm,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    borderRadius: borderRadius.sm,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\screens\\TrainingSessionScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screenWidth' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2255,2258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2255,2258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2887,2887],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2887,2887],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeSession'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeSession]","fix":{"range":[2914,2916],"text":"[initializeSession]"}}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":83,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":83,"endColumn":52,"suggestions":[{"fix":{"range":[3173,3212],"text":"pausedSession?.isPaused"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":145,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":145,"endColumn":66,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5025,5025],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5025,5025],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":187,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":187,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6214,6214],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6214,6214],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":217,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":217,"endColumn":54,"suggestions":[{"fix":{"range":[7158,7199],"text":"earnedRewards?.new_badges"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8947,8949],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":292,"column":11,"nodeType":null,"messageId":"voidReturnProperty","endLine":292,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10549,10551],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":326,"column":11,"nodeType":null,"messageId":"voidReturnProperty","endLine":326,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":413,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13558,13561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13558,13561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  borderWidth: 'isSelected || (showCorrection && (isCorrect || isSelected)) ? 2 : 1'\n}","line":441,"column":11,"nodeType":"ObjectExpression","endLine":445,"endColumn":12},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFF' }","line":453,"column":52,"nodeType":"ObjectExpression","endLine":453,"endColumn":69},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":453,"column":52,"nodeType":"ObjectExpression","endLine":453,"endColumn":69},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":504,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":522,"endColumn":15},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":579,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":579,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":772,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":772,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28289,28292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28289,28292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderWidth: 1 }","line":777,"column":21,"nodeType":"ObjectExpression","endLine":781,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FFF' }","line":786,"column":62,"nodeType":"ObjectExpression","endLine":786,"endColumn":79},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":786,"column":62,"nodeType":"ObjectExpression","endLine":786,"endColumn":79},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  opacity: 'selectedAnswers.length === 0 || isTransitioning ? 0.5 : 1'\n}","line":811,"column":15,"nodeType":"ObjectExpression","endLine":814,"endColumn":16},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":816,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":816,"endColumn":37},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'isTransitioning ? 0.5 : 1' }","line":826,"column":15,"nodeType":"ObjectExpression","endLine":829,"endColumn":16},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderTopColor: '#E5E5E5' }","line":1015,"column":23,"nodeType":"ObjectExpression","endLine":1020,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":1037,"column":23,"nodeType":"ObjectExpression","endLine":1041,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":1049,"column":19,"nodeType":"ObjectExpression","endLine":1053,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":1054,"column":17,"nodeType":"ObjectExpression","endLine":1059,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFF' }","line":1084,"column":20,"nodeType":"ObjectExpression","endLine":1088,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'transparent', borderColor: '#EF4444' }","line":1089,"column":15,"nodeType":"ObjectExpression","endLine":1093,"endColumn":4}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n  Alert,\r\n  Animated,\r\n  Modal,\r\n  Dimensions,\r\n} from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { spacing, typography, borderRadius, shadows } from '../styles/theme';\r\nimport { TrainingStackScreenProps } from '../types/navigation';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { Timer } from '../components/Timer';\r\nimport { sessionService, Question, UserAnswer } from '../services/sessionService';\r\nimport { ButtonContainer } from '../components/ButtonContainer';\r\nimport * as Haptics from 'expo-haptics';\r\nimport { badgesService } from '../services/badgesService';\r\n\r\nconst { width: screenWidth } = Dimensions.get('window');\r\n\r\nexport const TrainingSessionScreen: React.FC<TrainingStackScreenProps<'TrainingSession'>> = ({\r\n  navigation,\r\n  route,\r\n}) => {\r\n  const { colors } = useTheme();\r\n  const { user } = useAuth();\r\n  const defaultSettings = {\r\n    questionType: 'MIXTE' as const,\r\n    showCorrection: true,\r\n    showScore: true,\r\n    numberOfQuestions: 10,\r\n    mode: 'entrainement_libre' as const,\r\n    showExplanation: true,\r\n    timerEnabled: false,\r\n    timeLimit: 30,\r\n  };\r\n  const { sousThemes = [], settings = defaultSettings } = route.params || {};\r\n\r\n  // États\r\n  const [loading, setLoading] = useState(true);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n  const [showCorrection, setShowCorrection] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [sessionId, setSessionId] = useState<number>();\r\n  const [sessionScore, setSessionScore] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<UserAnswer[]>([]);\r\n  const [showExplanation, setShowExplanation] = useState(false);\r\n  const [isTransitioning, setIsTransitioning] = useState(false);\r\n  const [nextQuestionData, setNextQuestionData] = useState<any>(null);\r\n  const timeSpentRef = useRef(0);\r\n\r\n  // Animations pour la transition fluide\r\n  const currentQuestionOpacity = useRef(new Animated.Value(1)).current;\r\n  const currentQuestionTranslateX = useRef(new Animated.Value(0)).current;\r\n  const nextQuestionOpacity = useRef(new Animated.Value(0)).current;\r\n  const nextQuestionTranslateX = useRef(new Animated.Value(30)).current;\r\n  const scaleAnim = useRef(new Animated.Value(1)).current;\r\n\r\n  // Question actuelle\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\r\n\r\n  useEffect(() => {\r\n    initializeSession();\r\n  }, []);\r\n\r\n  const initializeSession = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Vérifier s'il y a une session en pause à reprendre\r\n      if (user) {\r\n        const pausedSession = await sessionService.getLocalSession(user.id);\r\n        if (pausedSession && pausedSession.isPaused) {\r\n          // Reprendre la session en pause\r\n          setQuestions(pausedSession.questions);\r\n          setCurrentQuestionIndex(pausedSession.currentQuestionIndex);\r\n          setUserAnswers(pausedSession.answers);\r\n          setSessionScore(pausedSession.score);\r\n          setSessionId(pausedSession.id);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Sinon, charger de nouvelles questions\r\n      const loadedQuestions = await sessionService.loadQuestions(\r\n        sousThemes || [],\r\n        settings?.questionType || 'MIXTE'\r\n      );\r\n\r\n      if (loadedQuestions.length === 0) {\r\n        Alert.alert('Erreur', 'Aucune question disponible');\r\n        navigation.goBack();\r\n        return;\r\n      }\r\n\r\n      setQuestions(loadedQuestions);\r\n\r\n      // Créer la session\r\n      if (user) {\r\n        const sessionSettings = {\r\n          ...defaultSettings,\r\n          ...settings,\r\n        };\r\n        const session = await sessionService.createSession(\r\n          user.id,\r\n          loadedQuestions,\r\n          sessionSettings\r\n        );\r\n        setSessionId(session.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur initialisation session:', error);\r\n      Alert.alert('Erreur', 'Impossible de démarrer la session');\r\n      navigation.goBack();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAnswerSelect = (answerId: number) => {\r\n    if (showCorrection) {\r\n      return;\r\n    }\r\n\r\n    if (currentQuestion.type_question === 'QCU') {\r\n      setSelectedAnswers([answerId]);\r\n      void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\r\n    } else {\r\n      // QCM\r\n      setSelectedAnswers(prev => {\r\n        if (prev.includes(answerId)) {\r\n          return prev.filter(id => id !== answerId);\r\n        } else {\r\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\r\n          return [...prev, answerId];\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleValidate = async () => {\r\n    // Calculer le score\r\n    const result = sessionService.calculateScore(currentQuestion, selectedAnswers, settings);\r\n\r\n    // Créer la réponse utilisateur\r\n    const userAnswer: UserAnswer = {\r\n      questionId: currentQuestion.id,\r\n      selectedAnswers,\r\n      isCorrect: result.isCorrect,\r\n      points: result.points,\r\n      timeSpent: timeSpentRef.current,\r\n    };\r\n\r\n    // Sauvegarder la réponse\r\n    if (user) {\r\n      await sessionService.saveAnswer(user.id, sessionId, userAnswer);\r\n    }\r\n\r\n    setUserAnswers(prev => [...prev, userAnswer]);\r\n    setSessionScore(prev => prev + result.points);\r\n\r\n    // Feedback haptique\r\n    if (result.isCorrect) {\r\n      void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\r\n    } else {\r\n      void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);\r\n    }\r\n\r\n    // Afficher la correction\r\n    setShowCorrection(true);\r\n    animateCorrection();\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (isLastQuestion) {\r\n      handleEndSession();\r\n    } else {\r\n      animateTransition(() => {\r\n        setCurrentQuestionIndex(prev => prev + 1);\r\n        setSelectedAnswers([]);\r\n        setShowCorrection(false);\r\n        setShowExplanation(false);\r\n        timeSpentRef.current = 0;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEndSession = async () => {\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    // Terminer la session et récupérer les données\r\n    const sessionData = await sessionService.endSession(user.id, sessionId, 'terminee');\r\n\r\n    if (sessionData) {\r\n      // Calculer les statistiques détaillées\r\n      const stats = await sessionService.getSessionStats(sessionData);\r\n\r\n      if (stats) {\r\n        // Vérifier les badges et défis complétés\r\n        const earnedRewards = await badgesService.checkAndAwardBadges(user.id);\r\n        // Log removed\r\n\r\n        // Si des badges ont été gagnés, récupérer leurs détails et naviguer vers l'animation\r\n        if (earnedRewards && earnedRewards.new_badges && earnedRewards.new_badges.length > 0) {\r\n          // Récupérer tous les badges de l'utilisateur pour avoir les détails\r\n          const allBadges = await badgesService.getUserBadges(user.id);\r\n          // Log removed\r\n          // Log removed\r\n\r\n          // Filtrer pour ne garder que les nouveaux badges\r\n          const newBadgeDetails = allBadges.filter(badge =>\r\n            earnedRewards.new_badges.includes(badge.nom)\r\n          );\r\n\r\n          // Log removed\r\n\r\n          // Transformer les données pour l'écran d'animation\r\n          // Diviser les points équitablement entre tous les badges\r\n          const pointsPerBadge =\r\n            newBadgeDetails.length > 0\r\n              ? Math.floor(earnedRewards.total_points_earned / newBadgeDetails.length)\r\n              : earnedRewards.total_points_earned;\r\n\r\n          const rewards = newBadgeDetails.map(badge => ({\r\n            type: 'badge' as 'badge' | 'challenge' | 'rank',\r\n            id: badge.id,\r\n            name: badge.nom,\r\n            description: badge.description,\r\n            icon: badge.icone,\r\n            rarity:\r\n              badge.niveau === 4\r\n                ? 'legendary'\r\n                : badge.niveau === 3\r\n                  ? 'epic'\r\n                  : badge.niveau === 2\r\n                    ? 'rare'\r\n                    : ('common' as 'common' | 'rare' | 'epic' | 'legendary'),\r\n            points: pointsPerBadge || badge.points_requis || 10,\r\n          }));\r\n\r\n          navigation.replace('RewardAnimation', {\r\n            rewards,\r\n            sessionStats: stats,\r\n          });\r\n        } else {\r\n          // Pas de récompenses, aller directement au rapport\r\n          navigation.replace('SessionReport', {\r\n            sessionId: sessionId || 0,\r\n            stats,\r\n            sessionParams: route.params,\r\n          });\r\n        }\r\n      } else {\r\n        // En cas d'erreur, retour simple\r\n        navigation.navigate('HomeScreen');\r\n      }\r\n    } else {\r\n      // Si pas de données de session, retour simple\r\n      navigation.navigate('HomeScreen');\r\n    }\r\n  };\r\n\r\n  const handlePause = () => {\r\n    setIsPaused(true);\r\n  };\r\n\r\n  const handleResume = () => {\r\n    setIsPaused(false);\r\n  };\r\n\r\n  const handleQuit = () => {\r\n    Alert.alert(\r\n      'Quitter la session',\r\n      'Êtes-vous sûr de vouloir arrêter cette session ? Vous pourrez consulter vos résultats partiels.',\r\n      [\r\n        { text: 'Annuler', style: 'cancel' },\r\n        {\r\n          text: 'Quitter et voir résultats',\r\n          onPress: async () => {\r\n            if (!user) {\r\n              navigation.navigate('HomeScreen');\r\n              return;\r\n            }\r\n\r\n            // Terminer la session comme abandonnée et récupérer les données\r\n            const sessionData = await sessionService.endSession(user.id, sessionId, 'abandonnee');\r\n\r\n            if (sessionData) {\r\n              const stats = await sessionService.getSessionStats(sessionData);\r\n              if (stats) {\r\n                // Vérifier les badges même pour une session abandonnée\r\n                // mais sans animation de récompense\r\n                await badgesService.checkAndAwardBadges(user.id);\r\n\r\n                // Naviguer vers l'écran de rapport même pour une session abandonnée\r\n                navigation.replace('SessionReport', {\r\n                  sessionId: sessionId || 0,\r\n                  stats,\r\n                  sessionParams: route.params,\r\n                  isAbandoned: true,\r\n                });\r\n              } else {\r\n                navigation.navigate('HomeScreen');\r\n              }\r\n            } else {\r\n              navigation.navigate('HomeScreen');\r\n            }\r\n          },\r\n        },\r\n        {\r\n          text: 'Quitter sans résultats',\r\n          style: 'destructive',\r\n          onPress: async () => {\r\n            if (user) {\r\n              await sessionService.endSession(user.id, sessionId, 'abandonnee');\r\n            }\r\n            navigation.navigate('HomeScreen');\r\n          },\r\n        },\r\n      ]\r\n    );\r\n  };\r\n\r\n  const animateCorrection = () => {\r\n    Animated.sequence([\r\n      Animated.timing(scaleAnim, {\r\n        toValue: 1.02,\r\n        duration: 150,\r\n        useNativeDriver: true,\r\n      }),\r\n      Animated.timing(scaleAnim, {\r\n        toValue: 1,\r\n        duration: 150,\r\n        useNativeDriver: true,\r\n      }),\r\n    ]).start();\r\n  };\r\n\r\n  const animateTransition = (callback: () => void) => {\r\n    setIsTransitioning(true);\r\n\r\n    // Préparer la nouvelle question\r\n    const nextIndex = currentQuestionIndex + 1;\r\n    if (nextIndex < questions.length) {\r\n      setNextQuestionData({\r\n        question: questions[nextIndex],\r\n        selectedAnswers: [],\r\n        showCorrection: false,\r\n        showExplanation: false,\r\n      });\r\n\r\n      // Pré-positionner la nouvelle question plus proche pour réduire le trajet\r\n      nextQuestionTranslateX.setValue(30);\r\n    }\r\n\r\n    // Animation fluide sans aucun délai - les deux animations démarrent simultanément\r\n    Animated.parallel([\r\n      // Ancienne question : slide rapide vers la gauche + fade out progressif\r\n      Animated.parallel([\r\n        Animated.timing(currentQuestionTranslateX, {\r\n          toValue: -50,\r\n          duration: 400,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(currentQuestionOpacity, {\r\n          toValue: 0,\r\n          duration: 300,\r\n          useNativeDriver: true,\r\n        }),\r\n      ]),\r\n      // Nouvelle question : apparition immédiate avec slide doux + fade in\r\n      Animated.parallel([\r\n        Animated.timing(nextQuestionTranslateX, {\r\n          toValue: 0,\r\n          duration: 400,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(nextQuestionOpacity, {\r\n          toValue: 1,\r\n          duration: 500,\r\n          delay: 0, // Pas de délai - démarre immédiatement\r\n          useNativeDriver: true,\r\n        }),\r\n      ]),\r\n    ]).start(() => {\r\n      // Mettre à jour les états après l'animation\r\n      callback();\r\n      setNextQuestionData(null);\r\n\r\n      // Réinitialiser les animations pour la prochaine transition\r\n      currentQuestionOpacity.setValue(1);\r\n      currentQuestionTranslateX.setValue(0);\r\n      nextQuestionOpacity.setValue(0);\r\n      nextQuestionTranslateX.setValue(30);\r\n\r\n      setIsTransitioning(false);\r\n    });\r\n  };\r\n\r\n  const renderAnswer = (answer: any) => {\r\n    const isSelected = selectedAnswers.includes(answer.id);\r\n    const isCorrect = answer.est_correcte;\r\n\r\n    let backgroundColor = colors.surface;\r\n    let borderColor = colors.border;\r\n    let textColor = colors.text;\r\n\r\n    if (showCorrection) {\r\n      if (isCorrect) {\r\n        backgroundColor = `${colors.success}15`;\r\n        borderColor = colors.success;\r\n        textColor = colors.success;\r\n      } else if (isSelected && !isCorrect) {\r\n        backgroundColor = `${colors.error}15`;\r\n        borderColor = colors.error;\r\n        textColor = colors.error;\r\n      }\r\n    } else if (isSelected) {\r\n      backgroundColor = `${colors.primary}15`;\r\n      borderColor = colors.primary;\r\n    }\r\n\r\n    return (\r\n      <TouchableOpacity\r\n        key={answer.id}\r\n        style={[\r\n          styles.answerOption,\r\n          {\r\n            backgroundColor,\r\n            borderColor,\r\n            borderWidth: isSelected || (showCorrection && (isCorrect || isSelected)) ? 2 : 1,\r\n          },\r\n        ]}\r\n        onPress={() => handleAnswerSelect(answer.id)}\r\n        disabled={showCorrection}\r\n        activeOpacity={0.7}\r\n      >\r\n        <View style={styles.answerContent}>\r\n          <View style={[styles.answerLetter, { backgroundColor: borderColor }]}>\r\n            <Text style={[styles.answerLetterText, { color: '#FFF' }]}>{answer.lettre}</Text>\r\n          </View>\r\n          <Text style={[styles.answerText, { color: textColor }]}>{answer.texte}</Text>\r\n          {currentQuestion.type_question === 'QCM' && !showCorrection && (\r\n            <View style={[styles.checkbox, { borderColor }]}>\r\n              {isSelected && <Ionicons name=\"checkmark\" size={16} color={borderColor} />}\r\n            </View>\r\n          )}\r\n          {currentQuestion.type_question === 'QCU' && !showCorrection && (\r\n            <View style={[styles.radio, { borderColor }]}>\r\n              {isSelected && <View style={[styles.radioDot, { backgroundColor: borderColor }]} />}\r\n            </View>\r\n          )}\r\n          {showCorrection && isCorrect && (\r\n            <Ionicons name=\"checkmark-circle\" size={24} color={colors.success} />\r\n          )}\r\n          {showCorrection && isSelected && !isCorrect && (\r\n            <Ionicons name=\"close-circle\" size={24} color={colors.error} />\r\n          )}\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  const renderPauseModal = () => (\r\n    <Modal visible={isPaused} transparent animationType=\"fade\" onRequestClose={handleResume}>\r\n      <TouchableOpacity style={styles.modalOverlay} activeOpacity={1} onPress={handleResume}>\r\n        <TouchableOpacity\r\n          activeOpacity={1}\r\n          style={[styles.modalContent, { backgroundColor: colors.surface }]}\r\n          onPress={e => e.stopPropagation()}\r\n        >\r\n          <Ionicons name=\"pause-circle\" size={64} color={colors.primary} />\r\n          <Text style={[styles.modalTitle, { color: colors.text }]}>Session en pause</Text>\r\n          <Text style={[styles.modalSubtitle, { color: colors.textSecondary }]}>\r\n            Question {currentQuestionIndex + 1}/{questions.length}\r\n          </Text>\r\n          <Text style={[styles.modalHint, { color: colors.textSecondary }]}>\r\n            Score actuel : {sessionScore.toFixed(1)} pts\r\n          </Text>\r\n\r\n          <TouchableOpacity\r\n            style={[styles.modalButton, { backgroundColor: colors.primary }]}\r\n            onPress={handleResume}\r\n          >\r\n            <Ionicons name=\"play\" size={20} color=\"#FFF\" />\r\n            <Text style={styles.modalButtonText}>Reprendre</Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity\r\n            style={[styles.modalButton, { backgroundColor: colors.secondary }]}\r\n            onPress={async () => {\r\n              // Sauvegarder l'état actuel de la session\r\n              if (user) {\r\n                const sessionData = {\r\n                  id: sessionId,\r\n                  profile_id: user.id,\r\n                  questions,\r\n                  currentQuestionIndex,\r\n                  answers: userAnswers,\r\n                  score: sessionScore,\r\n                  startTime: new Date(),\r\n                  isPaused: true,\r\n                  settings,\r\n                };\r\n                await sessionService.saveSessionLocally(user.id, sessionData);\r\n              }\r\n              setIsPaused(false);\r\n              navigation.navigate('HomeScreen');\r\n            }}\r\n          >\r\n            <Ionicons name=\"home-outline\" size={20} color=\"#FFF\" />\r\n            <Text style={styles.modalButtonText}>Retour (session sauvegardée)</Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity style={[styles.modalButton, styles.quitButton]} onPress={handleQuit}>\r\n            <Ionicons name=\"exit-outline\" size={20} color={colors.error} />\r\n            <Text style={[styles.modalButtonText, { color: colors.error }]}>\r\n              Arrêter la session\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          <Text style={[styles.modalTip, { color: colors.textSecondary }]}>\r\n            Touchez en dehors pour reprendre\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </TouchableOpacity>\r\n    </Modal>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"large\" color={colors.primary} />\r\n          <Text style={[styles.loadingText, { color: colors.textSecondary }]}>\r\n            Chargement des questions...\r\n          </Text>\r\n        </View>\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n\r\n  if (!currentQuestion) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>\r\n      {/* Header */}\r\n      <View style={[styles.header, { borderBottomColor: colors.border }]}>\r\n        <View style={styles.headerLeft}>\r\n          <Text style={[styles.questionNumber, { color: colors.text }]}>\r\n            Question {currentQuestionIndex + 1}/{questions.length}\r\n          </Text>\r\n          <View style={[styles.scoreBadge, { backgroundColor: `${colors.primary}15` }]}>\r\n            <Text style={[styles.scoreText, { color: colors.primary }]}>\r\n              {sessionScore.toFixed(1)} pts\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.headerRight}>\r\n          {settings.timerEnabled && !showCorrection && (\r\n            <Timer\r\n              duration={settings.timePerQuestion}\r\n              onTimeUp={handleValidate}\r\n              isPaused={isPaused}\r\n              onTick={time => {\r\n                timeSpentRef.current = settings.timePerQuestion - time;\r\n              }}\r\n            />\r\n          )}\r\n          <TouchableOpacity onPress={handlePause} style={styles.pauseButton}>\r\n            <Ionicons name=\"pause\" size={24} color={colors.text} />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Container pour les questions avec position absolute pour permettre le chevauchement */}\r\n      <View style={styles.questionsContainer}>\r\n        {/* Question actuelle */}\r\n        <Animated.View\r\n          style={[\r\n            styles.content,\r\n            styles.absoluteContent,\r\n            {\r\n              opacity: currentQuestionOpacity,\r\n              transform: [{ translateX: currentQuestionTranslateX }],\r\n            },\r\n          ]}\r\n          pointerEvents={isTransitioning ? 'none' : 'auto'}\r\n        >\r\n          {currentQuestion && !nextQuestionData && (\r\n            <ScrollView showsVerticalScrollIndicator={false}>\r\n              <View style={[styles.questionCard, { backgroundColor: colors.surface }]}>\r\n                <View style={styles.questionHeader}>\r\n                  <View\r\n                    style={[styles.questionTypeBadge, { backgroundColor: `${colors.secondary}15` }]}\r\n                  >\r\n                    <Text style={[styles.questionTypeText, { color: colors.secondary }]}>\r\n                      {currentQuestion.type_question}\r\n                    </Text>\r\n                  </View>\r\n                  <View style={styles.difficultyIndicator}>\r\n                    {[...Array(5)].map((_, i) => (\r\n                      <View\r\n                        key={i}\r\n                        style={[\r\n                          styles.difficultyDot,\r\n                          {\r\n                            backgroundColor:\r\n                              i < currentQuestion.niveau_difficulte\r\n                                ? colors.primary\r\n                                : colors.border,\r\n                          },\r\n                        ]}\r\n                      />\r\n                    ))}\r\n                  </View>\r\n                </View>\r\n\r\n                <Text style={[styles.questionText, { color: colors.text }]}>\r\n                  {currentQuestion.enonce}\r\n                </Text>\r\n              </View>\r\n\r\n              {/* Réponses */}\r\n              <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\r\n                {currentQuestion.reponses.map(renderAnswer)}\r\n              </Animated.View>\r\n\r\n              {/* Correction */}\r\n              {showCorrection && (\r\n                <Animated.View style={[styles.correctionCard, { backgroundColor: colors.surface }]}>\r\n                  <View style={styles.correctionHeader}>\r\n                    <View style={styles.correctionScore}>\r\n                      <Ionicons\r\n                        name={\r\n                          userAnswers[userAnswers.length - 1]?.isCorrect\r\n                            ? 'checkmark-circle'\r\n                            : 'close-circle'\r\n                        }\r\n                        size={24}\r\n                        color={\r\n                          userAnswers[userAnswers.length - 1]?.isCorrect\r\n                            ? colors.success\r\n                            : colors.error\r\n                        }\r\n                      />\r\n                      <Text\r\n                        style={[\r\n                          styles.correctionScoreText,\r\n                          {\r\n                            color:\r\n                              userAnswers[userAnswers.length - 1]?.points >= 0\r\n                                ? colors.success\r\n                                : colors.error,\r\n                          },\r\n                        ]}\r\n                      >\r\n                        {userAnswers[userAnswers.length - 1]?.points >= 0 ? '+' : ''}\r\n                        {userAnswers[userAnswers.length - 1]?.points.toFixed(1)} point\r\n                        {Math.abs(userAnswers[userAnswers.length - 1]?.points) !== 1 ? 's' : ''}\r\n                      </Text>\r\n                    </View>\r\n                  </View>\r\n\r\n                  {currentQuestion.explication ? (\r\n                    <>\r\n                      <TouchableOpacity\r\n                        style={styles.explanationToggle}\r\n                        onPress={() => setShowExplanation(!showExplanation)}\r\n                      >\r\n                        <Text style={[styles.explanationToggleText, { color: colors.primary }]}>\r\n                          {showExplanation ? 'Masquer' : 'Voir'} l'explication\r\n                        </Text>\r\n                        <Ionicons\r\n                          name={showExplanation ? 'chevron-up' : 'chevron-down'}\r\n                          size={20}\r\n                          color={colors.primary}\r\n                        />\r\n                      </TouchableOpacity>\r\n\r\n                      {showExplanation && (\r\n                        <View style={styles.explanationContent}>\r\n                          <Text style={[styles.explanationText, { color: colors.text }]}>\r\n                            {currentQuestion.explication.texte_explication}\r\n                          </Text>\r\n                          {currentQuestion.explication.source && (\r\n                            <Text\r\n                              style={[styles.explanationSource, { color: colors.textSecondary }]}\r\n                            >\r\n                              Source : {currentQuestion.explication.source}\r\n                            </Text>\r\n                          )}\r\n                        </View>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    <View style={styles.noExplanation}>\r\n                      <Text style={[styles.noExplanationText, { color: colors.textSecondary }]}>\r\n                        Pas d'explication disponible pour cette question\r\n                      </Text>\r\n                    </View>\r\n                  )}\r\n                </Animated.View>\r\n              )}\r\n            </ScrollView>\r\n          )}\r\n        </Animated.View>\r\n\r\n        {/* Nouvelle question (pendant la transition) */}\r\n        {nextQuestionData && (\r\n          <Animated.View\r\n            style={[\r\n              styles.content,\r\n              styles.absoluteContent,\r\n              {\r\n                opacity: nextQuestionOpacity,\r\n                transform: [{ translateX: nextQuestionTranslateX }],\r\n              },\r\n            ]}\r\n            pointerEvents=\"none\"\r\n          >\r\n            <ScrollView showsVerticalScrollIndicator={false}>\r\n              <View style={[styles.questionCard, { backgroundColor: colors.surface }]}>\r\n                <View style={styles.questionHeader}>\r\n                  <View\r\n                    style={[styles.questionTypeBadge, { backgroundColor: `${colors.secondary}15` }]}\r\n                  >\r\n                    <Text style={[styles.questionTypeText, { color: colors.secondary }]}>\r\n                      {nextQuestionData.question.type_question}\r\n                    </Text>\r\n                  </View>\r\n                  <View style={styles.difficultyIndicator}>\r\n                    {[...Array(5)].map((_, i) => (\r\n                      <View\r\n                        key={i}\r\n                        style={[\r\n                          styles.difficultyDot,\r\n                          {\r\n                            backgroundColor:\r\n                              i < nextQuestionData.question.niveau_difficulte\r\n                                ? colors.primary\r\n                                : colors.border,\r\n                          },\r\n                        ]}\r\n                      />\r\n                    ))}\r\n                  </View>\r\n                </View>\r\n\r\n                <Text style={[styles.questionText, { color: colors.text }]}>\r\n                  {nextQuestionData.question.enonce}\r\n                </Text>\r\n              </View>\r\n\r\n              {/* Réponses de la nouvelle question */}\r\n              {nextQuestionData.question.reponses.map((answer: any) => (\r\n                <View\r\n                  key={answer.id}\r\n                  style={[\r\n                    styles.answerOption,\r\n                    {\r\n                      backgroundColor: colors.surface,\r\n                      borderColor: colors.border,\r\n                      borderWidth: 1,\r\n                    },\r\n                  ]}\r\n                >\r\n                  <View style={styles.answerContent}>\r\n                    <View style={[styles.answerLetter, { backgroundColor: colors.border }]}>\r\n                      <Text style={[styles.answerLetterText, { color: '#FFF' }]}>\r\n                        {answer.lettre}\r\n                      </Text>\r\n                    </View>\r\n                    <Text style={[styles.answerText, { color: colors.text }]}>{answer.texte}</Text>\r\n                    {nextQuestionData.question.type_question === 'QCM' && (\r\n                      <View style={[styles.checkbox, { borderColor: colors.border }]} />\r\n                    )}\r\n                    {nextQuestionData.question.type_question === 'QCU' && (\r\n                      <View style={[styles.radio, { borderColor: colors.border }]} />\r\n                    )}\r\n                  </View>\r\n                </View>\r\n              ))}\r\n            </ScrollView>\r\n          </Animated.View>\r\n        )}\r\n      </View>\r\n\r\n      {/* Footer */}\r\n      <ButtonContainer backgroundColor={colors.background} borderColor={colors.border}>\r\n        {!showCorrection ? (\r\n          <TouchableOpacity\r\n            style={[\r\n              styles.validateButton,\r\n              {\r\n                backgroundColor: colors.primary,\r\n                opacity: selectedAnswers.length === 0 || isTransitioning ? 0.5 : 1,\r\n              },\r\n            ]}\r\n            onPress={handleValidate}\r\n            disabled={selectedAnswers.length === 0 || isTransitioning}\r\n          >\r\n            <Text style={styles.validateButtonText}>Valider</Text>\r\n            <Ionicons name=\"checkmark\" size={20} color=\"#FFF\" />\r\n          </TouchableOpacity>\r\n        ) : (\r\n          <TouchableOpacity\r\n            style={[\r\n              styles.nextButton,\r\n              {\r\n                backgroundColor: colors.primary,\r\n                opacity: isTransitioning ? 0.5 : 1,\r\n              },\r\n            ]}\r\n            onPress={handleNextQuestion}\r\n            disabled={isTransitioning}\r\n          >\r\n            <Text style={styles.nextButtonText}>\r\n              {isLastQuestion ? 'Terminer' : 'Question suivante'}\r\n            </Text>\r\n            <Ionicons name=\"arrow-forward\" size={20} color=\"#FFF\" />\r\n          </TouchableOpacity>\r\n        )}\r\n      </ButtonContainer>\r\n\r\n      {renderPauseModal()}\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    ...typography.body,\r\n    marginTop: spacing.md,\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingHorizontal: spacing.lg,\r\n    paddingVertical: spacing.md,\r\n    borderBottomWidth: 1,\r\n  },\r\n  headerLeft: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  questionNumber: {\r\n    ...typography.bodyBold,\r\n  },\r\n  scoreBadge: {\r\n    marginLeft: spacing.md,\r\n    paddingHorizontal: spacing.sm,\r\n    paddingVertical: spacing.xs,\r\n    borderRadius: borderRadius.sm,\r\n  },\r\n  scoreText: {\r\n    ...typography.small,\r\n    fontWeight: '600',\r\n  },\r\n  headerRight: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  pauseButton: {\r\n    marginLeft: spacing.md,\r\n  },\r\n  questionsContainer: {\r\n    flex: 1,\r\n    position: 'relative',\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    paddingHorizontal: spacing.lg,\r\n  },\r\n  absoluteContent: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n  questionCard: {\r\n    marginTop: spacing.lg,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    ...shadows.sm,\r\n  },\r\n  questionHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  questionTypeBadge: {\r\n    paddingHorizontal: spacing.sm,\r\n    paddingVertical: spacing.xs,\r\n    borderRadius: borderRadius.sm,\r\n  },\r\n  questionTypeText: {\r\n    ...typography.small,\r\n    fontWeight: '600',\r\n  },\r\n  difficultyIndicator: {\r\n    flexDirection: 'row',\r\n    gap: spacing.xs,\r\n  },\r\n  difficultyDot: {\r\n    width: 6,\r\n    height: 6,\r\n    borderRadius: 3,\r\n  },\r\n  questionText: {\r\n    ...typography.body,\r\n    lineHeight: 24,\r\n  },\r\n  answerOption: {\r\n    marginTop: spacing.md,\r\n    padding: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n    borderWidth: 1,\r\n  },\r\n  answerContent: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  answerLetter: {\r\n    width: 32,\r\n    height: 32,\r\n    borderRadius: borderRadius.md,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginRight: spacing.md,\r\n  },\r\n  answerLetterText: {\r\n    ...typography.bodyBold,\r\n  },\r\n  answerText: {\r\n    ...typography.body,\r\n    flex: 1,\r\n  },\r\n  checkbox: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: borderRadius.xs,\r\n    borderWidth: 2,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  radio: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: 10,\r\n    borderWidth: 2,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  radioDot: {\r\n    width: 10,\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  correctionCard: {\r\n    marginTop: spacing.lg,\r\n    padding: spacing.lg,\r\n    borderRadius: borderRadius.lg,\r\n    ...shadows.sm,\r\n  },\r\n  correctionHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: spacing.md,\r\n  },\r\n  correctionScore: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  correctionScoreText: {\r\n    ...typography.bodyBold,\r\n    marginLeft: spacing.sm,\r\n  },\r\n  explanationToggle: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    paddingVertical: spacing.sm,\r\n  },\r\n  explanationToggleText: {\r\n    ...typography.body,\r\n  },\r\n  explanationContent: {\r\n    marginTop: spacing.md,\r\n    paddingTop: spacing.md,\r\n    borderTopWidth: 1,\r\n    borderTopColor: '#E5E5E5',\r\n  },\r\n  explanationText: {\r\n    ...typography.body,\r\n    lineHeight: 22,\r\n  },\r\n  explanationSource: {\r\n    ...typography.small,\r\n    marginTop: spacing.sm,\r\n    fontStyle: 'italic',\r\n  },\r\n  validateButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingVertical: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  validateButtonText: {\r\n    ...typography.bodyBold,\r\n    color: '#FFF',\r\n    marginRight: spacing.sm,\r\n  },\r\n  nextButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingVertical: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n  },\r\n  nextButtonText: {\r\n    ...typography.bodyBold,\r\n    color: '#FFF',\r\n    marginRight: spacing.sm,\r\n  },\r\n  modalOverlay: {\r\n    flex: 1,\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  modalContent: {\r\n    width: '80%',\r\n    padding: spacing.xl,\r\n    borderRadius: borderRadius.xl,\r\n    alignItems: 'center',\r\n  },\r\n  modalTitle: {\r\n    ...typography.h3,\r\n    marginTop: spacing.md,\r\n  },\r\n  modalSubtitle: {\r\n    ...typography.body,\r\n    marginTop: spacing.xs,\r\n    marginBottom: spacing.xl,\r\n  },\r\n  modalButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    paddingVertical: spacing.md,\r\n    borderRadius: borderRadius.lg,\r\n    marginBottom: spacing.md,\r\n  },\r\n  modalButtonText: {\r\n    ...typography.bodyBold,\r\n    color: '#FFF',\r\n    marginLeft: spacing.sm,\r\n  },\r\n  quitButton: {\r\n    backgroundColor: 'transparent',\r\n    borderWidth: 1,\r\n    borderColor: '#EF4444',\r\n  },\r\n  modalHint: {\r\n    ...typography.small,\r\n    marginBottom: spacing.lg,\r\n  },\r\n  modalTip: {\r\n    ...typography.caption,\r\n    marginTop: spacing.lg,\r\n    fontStyle: 'italic',\r\n  },\r\n  noExplanation: {\r\n    paddingVertical: spacing.md,\r\n    alignItems: 'center',\r\n  },\r\n  noExplanationText: {\r\n    ...typography.body,\r\n    fontStyle: 'italic',\r\n  },\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[862,904],"text":"(error?.message ?? error?.error_description)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[905,907],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":36,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":36,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1099,1101],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":173,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4189,4192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4189,4192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  username?: string;\n  isGuest?: boolean;\n}\n\nexport interface AuthError {\n  message: string;\n  code?: string;\n}\n\nconst translateError = (error: any): string => {\n  const errorMessages: { [key: string]: string } = {\n    'Invalid login credentials': 'Email ou mot de passe incorrect',\n    'Email not confirmed': 'Veuillez confirmer votre email',\n    'User already registered': 'Cet email est déjà utilisé',\n    'Password should be at least 6 characters':\n      'Le mot de passe doit contenir au moins 6 caractères',\n    'Invalid email': 'Email invalide',\n    'User not found': 'Utilisateur non trouvé',\n    'Network request failed': 'Erreur de connexion réseau',\n  };\n\n  const message = error?.message || error?.error_description || error;\n\n  for (const [key, translation] of Object.entries(errorMessages)) {\n    if (message.toLowerCase().includes(key.toLowerCase())) {\n      return translation;\n    }\n  }\n\n  return message || 'Une erreur est survenue';\n};\n\nclass AuthService {\n  async signUp(\n    email: string,\n    password: string,\n    username: string\n  ): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            username: username,\n          },\n        },\n      });\n\n      if (error) {\n        return {\n          user: null,\n          error: { message: translateError(error) },\n        };\n      }\n\n      if (data.user) {\n        return {\n          user: {\n            id: data.user.id,\n            email: data.user.email!,\n            username: username,\n          },\n          error: null,\n        };\n      }\n\n      return {\n        user: null,\n        error: { message: \"Erreur lors de l'inscription\" },\n      };\n    } catch (error) {\n      return {\n        user: null,\n        error: { message: translateError(error) },\n      };\n    }\n  }\n\n  async signIn(\n    email: string,\n    password: string\n  ): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return {\n          user: null,\n          error: { message: translateError(error) },\n        };\n      }\n\n      if (data.user) {\n        return {\n          user: {\n            id: data.user.id,\n            email: data.user.email!,\n            username: data.user.user_metadata?.username,\n          },\n          error: null,\n        };\n      }\n\n      return {\n        user: null,\n        error: { message: 'Erreur lors de la connexion' },\n      };\n    } catch (error) {\n      return {\n        user: null,\n        error: { message: translateError(error) },\n      };\n    }\n  }\n\n  async signOut(): Promise<{ error: AuthError | null }> {\n    try {\n      const { error } = await supabase.auth.signOut();\n\n      await AsyncStorage.removeItem('guestMode');\n\n      if (error) {\n        return { error: { message: translateError(error) } };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: translateError(error) } };\n    }\n  }\n\n  async resetPassword(email: string): Promise<{ error: AuthError | null }> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: 'casqueenmain://reset-password',\n      });\n\n      if (error) {\n        return { error: { message: translateError(error) } };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: translateError(error) } };\n    }\n  }\n\n  async signInAsGuest(): Promise<{ user: AuthUser; error: AuthError | null }> {\n    try {\n      const guestUser: AuthUser = {\n        id: 'guest',\n        email: 'invité@casqueenmain.fr',\n        username: 'Invité',\n        isGuest: true,\n      };\n\n      await AsyncStorage.setItem('guestMode', 'true');\n\n      return {\n        user: guestUser,\n        error: null,\n      };\n    } catch (error) {\n      return {\n        user: null as any,\n        error: { message: 'Erreur lors de la connexion en mode invité' },\n      };\n    }\n  }\n\n  async getCurrentUser(): Promise<AuthUser | null> {\n    try {\n      const guestMode = await AsyncStorage.getItem('guestMode');\n      if (guestMode === 'true') {\n        return {\n          id: 'guest',\n          email: 'invité@casqueenmain.fr',\n          username: 'Invité',\n          isGuest: true,\n        };\n      }\n\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (user) {\n        return {\n          id: user.id,\n          email: user.email!,\n          username: user.user_metadata?.username,\n        };\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  async refreshSession(): Promise<{ error: AuthError | null }> {\n    try {\n      const { error } = await supabase.auth.refreshSession();\n\n      if (error) {\n        return { error: { message: translateError(error) } };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: { message: translateError(error) } };\n    }\n  }\n}\n\nexport const authService = new AuthService();\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\avatarService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":153,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as ImageManipulator from 'expo-image-manipulator';\nimport { Alert } from 'react-native';\n\nclass AvatarService {\n  private readonly AVATAR_KEY = '@avatar_image_';\n  private readonly MAX_SIZE = 200; // pixels\n\n  /**\n   * Sélectionne et sauvegarde un avatar localement\n   */\n  async selectAndSaveAvatar(userId: string) {\n    try {\n      // Demander les permissions\n      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n      if (permissionResult.status !== 'granted') {\n        Alert.alert(\n          'Permission requise',\n          \"L'application a besoin d'accéder à vos photos pour changer votre avatar.\"\n        );\n        return { success: false, uri: null };\n      }\n\n      // Sélectionner l'image\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaType.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.7,\n      });\n\n      if (result.canceled) {\n        return { success: false, uri: null };\n      }\n\n      const image = result.assets[0];\n\n      // Compresser et redimensionner l'image\n      const manipulatedImage = await ImageManipulator.manipulateAsync(\n        image.uri,\n        [{ resize: { width: this.MAX_SIZE, height: this.MAX_SIZE } }],\n        { compress: 0.7, format: ImageManipulator.SaveFormat.JPEG, base64: true }\n      );\n\n      if (!manipulatedImage.base64) {\n        throw new Error(\"Erreur lors de la conversion de l'image\");\n      }\n\n      // Sauvegarder en base64 dans AsyncStorage\n      const base64Image = `data:image/jpeg;base64,${manipulatedImage.base64}`;\n      await AsyncStorage.setItem(`${this.AVATAR_KEY}${userId}`, base64Image);\n\n      return { success: true, uri: base64Image };\n    } catch (error) {\n      console.error(\"Erreur lors de la sauvegarde de l'avatar:\", error);\n      return { success: false, uri: null };\n    }\n  }\n\n  /**\n   * Récupère l'avatar depuis le localStorage\n   */\n  async getAvatar(userId: string): Promise<string | null> {\n    try {\n      const avatar = await AsyncStorage.getItem(`${this.AVATAR_KEY}${userId}`);\n      return avatar;\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de l'avatar:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Supprime l'avatar du localStorage\n   */\n  async deleteAvatar(userId: string): Promise<boolean> {\n    try {\n      await AsyncStorage.removeItem(`${this.AVATAR_KEY}${userId}`);\n      return true;\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de l'avatar:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Prend une photo avec la caméra pour l'avatar\n   */\n  async takePhotoForAvatar(userId: string) {\n    try {\n      // Demander les permissions caméra\n      const permissionResult = await ImagePicker.requestCameraPermissionsAsync();\n\n      if (permissionResult.status !== 'granted') {\n        Alert.alert(\n          'Permission requise',\n          \"L'application a besoin d'accéder à votre caméra pour prendre une photo.\"\n        );\n        return { success: false, uri: null };\n      }\n\n      // Prendre la photo\n      const result = await ImagePicker.launchCameraAsync({\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 0.7,\n      });\n\n      if (result.canceled) {\n        return { success: false, uri: null };\n      }\n\n      const image = result.assets[0];\n\n      // Compresser et redimensionner\n      const manipulatedImage = await ImageManipulator.manipulateAsync(\n        image.uri,\n        [{ resize: { width: this.MAX_SIZE, height: this.MAX_SIZE } }],\n        { compress: 0.7, format: ImageManipulator.SaveFormat.JPEG, base64: true }\n      );\n\n      if (!manipulatedImage.base64) {\n        throw new Error(\"Erreur lors de la conversion de l'image\");\n      }\n\n      // Sauvegarder\n      const base64Image = `data:image/jpeg;base64,${manipulatedImage.base64}`;\n      await AsyncStorage.setItem(`${this.AVATAR_KEY}${userId}`, base64Image);\n\n      return { success: true, uri: base64Image };\n    } catch (error) {\n      console.error('Erreur lors de la prise de photo:', error);\n      return { success: false, uri: null };\n    }\n  }\n\n  /**\n   * Obtient la taille estimée de l'avatar en KB\n   */\n  async getAvatarSize(userId: string): Promise<number> {\n    try {\n      const avatar = await AsyncStorage.getItem(`${this.AVATAR_KEY}${userId}`);\n      if (!avatar) {\n        return 0;\n      }\n\n      // Estimation : base64 augmente la taille de ~33%\n      const sizeInBytes = avatar.length * 0.75;\n      const sizeInKB = sizeInBytes / 1024;\n      return Math.round(sizeInKB);\n    } catch (error) {\n      return 0;\n    }\n  }\n}\n\nexport const avatarService = new AvatarService();\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\badgesService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[902,905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[902,905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":99,"column":19,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":99,"endColumn":21,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2658,2660],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3072,3074],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4081,4083],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":154,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":154,"endColumn":22,"suggestions":[{"fix":{"range":[4561,4637],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\r\n\r\nexport interface Badge {\r\n  id: number;\r\n  code: string;\r\n  nom: string;\r\n  description: string;\r\n  categorie: 'progression' | 'performance' | 'social' | 'special';\r\n  niveau: number;\r\n  icone: string;\r\n  couleur: string;\r\n  points_requis: number;\r\n  earned?: boolean;\r\n  date_obtention?: string;\r\n}\r\n\r\nexport interface Defi {\r\n  defi_id: number;\r\n  nom: string;\r\n  description: string;\r\n  type_defi: 'quotidien' | 'hebdomadaire' | 'mensuel' | 'special';\r\n  progression_actuelle: number;\r\n  objectif_valeur: number;\r\n  points_recompense: number;\r\n  icone: string;\r\n  couleur: string;\r\n  temps_restant: string;\r\n  pourcentage_complete: number;\r\n}\r\n\r\nexport interface Rang {\r\n  rang_actuel: string;\r\n  niveau_actuel: number;\r\n  points_actuels: number;\r\n  rang_suivant: string;\r\n  points_requis_suivant: number;\r\n  progression_rang: number;\r\n  avantages: any;\r\n}\r\n\r\nexport interface NotificationRecompense {\r\n  id: number;\r\n  type_notification: 'badge' | 'defi' | 'niveau' | 'serie';\r\n  titre: string;\r\n  message: string;\r\n  icone: string;\r\n  couleur: string;\r\n  lu: boolean;\r\n  created_at: string;\r\n}\r\n\r\nclass BadgesService {\r\n  // Récupérer tous les badges avec leur statut pour un utilisateur\r\n  async getUserBadges(userId: string): Promise<Badge[]> {\r\n    try {\r\n      const { data: badges, error: badgesError } = await supabase\r\n        .from('badges')\r\n        .select('*')\r\n        .eq('actif', true)\r\n        .order('categorie', { ascending: true })\r\n        .order('niveau', { ascending: true });\r\n\r\n      if (badgesError) {\r\n        throw badgesError;\r\n      }\r\n\r\n      // Récupérer les badges gagnés par l'utilisateur\r\n      const { data: earnedBadges, error: earnedError } = await supabase\r\n        .from('badges_utilisateur')\r\n        .select('badge_id, date_obtention')\r\n        .eq('profile_id', userId);\r\n\r\n      if (earnedError) {\r\n        throw earnedError;\r\n      }\r\n\r\n      // Mapper les badges avec leur statut\r\n      const earnedMap = new Map(earnedBadges?.map(eb => [eb.badge_id, eb.date_obtention]) || []);\r\n\r\n      return (badges || []).map(badge => ({\r\n        ...badge,\r\n        earned: earnedMap.has(badge.id),\r\n        date_obtention: earnedMap.get(badge.id),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching user badges:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Récupérer les défis actifs pour un utilisateur\r\n  async getUserChallenges(userId: string): Promise<Defi[]> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_user_challenges', { p_user_id: userId });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error fetching user challenges:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Récupérer le rang actuel de l'utilisateur\r\n  async getUserRank(userId: string): Promise<Rang | null> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_user_rank', { p_user_id: userId });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data?.[0] || null;\r\n    } catch (error) {\r\n      console.error('Error fetching user rank:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Vérifier et attribuer les badges automatiquement\r\n  async checkAndAwardBadges(\r\n    userId: string\r\n  ): Promise<{ new_badges: string[]; total_points_earned: number }> {\r\n    try {\r\n      // Récupérer d'abord les badges existants avant la vérification\r\n      const badgesBefore = await this.getUserBadges(userId);\r\n      const earnedBadgeIdsBefore = new Set(badgesBefore.filter(b => b.earned).map(b => b.id));\r\n\r\n      const { data, error } = await supabase.rpc('check_and_award_badges', { p_user_id: userId });\r\n\r\n      if (error) {\r\n        console.error('Erreur lors de la vérification des badges:', error);\r\n\r\n        // Si c'est une erreur RLS, on essaye de récupérer au moins les badges gagnés\r\n        if (error.code === '42501') {\r\n          return { new_badges: [], total_points_earned: 0 };\r\n        }\r\n\r\n        throw error;\r\n      }\r\n\r\n      const result = data?.[0] || { new_badges: [], total_points_earned: 0 };\r\n\r\n      // Si pas de nouveaux badges selon la fonction SQL, vérifier manuellement\r\n      // au cas où il y aurait un problème de détection\r\n      if (result.new_badges.length === 0) {\r\n        const badgesAfter = await this.getUserBadges(userId);\r\n        const newlyEarnedBadges = badgesAfter.filter(\r\n          b => b.earned && !earnedBadgeIdsBefore.has(b.id)\r\n        );\r\n\r\n        if (newlyEarnedBadges.length > 0) {\r\n          console.log('Nouveaux badges détectés par comparaison:', newlyEarnedBadges);\r\n          result.new_badges = newlyEarnedBadges.map(b => b.nom);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error checking badges:', error);\r\n      return { new_badges: [], total_points_earned: 0 };\r\n    }\r\n  }\r\n\r\n  // Mettre à jour la progression d'un défi\r\n  async updateChallengeProgress(\r\n    userId: string,\r\n    defiId: number,\r\n    progression: number\r\n  ): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase.from('defis_utilisateur').upsert(\r\n        {\r\n          profile_id: userId,\r\n          defi_id: defiId,\r\n          progression_actuelle: progression,\r\n        },\r\n        {\r\n          onConflict: 'profile_id,defi_id',\r\n        }\r\n      );\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Vérifier si le défi est complété\r\n      const { data: defi } = await supabase\r\n        .from('defis')\r\n        .select('objectif_valeur, points_recompense')\r\n        .eq('id', defiId)\r\n        .single();\r\n\r\n      if (defi && progression >= defi.objectif_valeur) {\r\n        await this.completeChallenge(userId, defiId, defi.points_recompense);\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating challenge progress:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Marquer un défi comme complété\r\n  private async completeChallenge(userId: string, defiId: number, points: number): Promise<void> {\r\n    try {\r\n      // Mettre à jour le défi (marquer comme complété via la progression)\r\n      await supabase\r\n        .from('defis_utilisateur')\r\n        .update({\r\n          date_complete: new Date().toISOString(),\r\n          points_gagnes: points,\r\n        })\r\n        .eq('profile_id', userId)\r\n        .eq('defi_id', defiId);\r\n\r\n      // Ajouter les points au profil\r\n      // D'abord récupérer les points actuels\r\n      const { data: currentProfile } = await supabase\r\n        .from('profiles')\r\n        .select('points_total')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      if (currentProfile) {\r\n        await supabase\r\n          .from('profiles')\r\n          .update({\r\n            points_total: currentProfile.points_total + points,\r\n          })\r\n          .eq('id', userId);\r\n      }\r\n\r\n      // Créer une notification\r\n      const { data: defi } = await supabase\r\n        .from('defis')\r\n        .select('nom, icone, couleur')\r\n        .eq('id', defiId)\r\n        .single();\r\n\r\n      if (defi) {\r\n        await this.createNotification(userId, {\r\n          type_notification: 'defi',\r\n          titre: 'Défi complété !',\r\n          message: `Vous avez complété le défi \"${defi.nom}\" et gagné ${points} points !`,\r\n          icone: defi.icone,\r\n          couleur: defi.couleur,\r\n          reference_id: defiId,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing challenge:', error);\r\n    }\r\n  }\r\n\r\n  // Créer une notification de récompense\r\n  async createNotification(\r\n    userId: string,\r\n    notification: Omit<NotificationRecompense, 'id' | 'lu' | 'created_at'>\r\n  ): Promise<void> {\r\n    try {\r\n      await supabase.from('notifications_recompenses').insert({\r\n        profile_id: userId,\r\n        ...notification,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n    }\r\n  }\r\n\r\n  // Récupérer les notifications non lues\r\n  async getUnreadNotifications(userId: string): Promise<NotificationRecompense[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('notifications_recompenses')\r\n        .select('*')\r\n        .eq('profile_id', userId)\r\n        .eq('lu', false)\r\n        .order('created_at', { ascending: false })\r\n        .limit(10);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Marquer les notifications comme lues\r\n  async markNotificationsAsRead(userId: string, notificationIds: number[]): Promise<void> {\r\n    try {\r\n      await supabase\r\n        .from('notifications_recompenses')\r\n        .update({ lu: true })\r\n        .eq('profile_id', userId)\r\n        .in('id', notificationIds);\r\n    } catch (error) {\r\n      console.error('Error marking notifications as read:', error);\r\n    }\r\n  }\r\n\r\n  // Obtenir les statistiques de badges\r\n  getBadgeStats(badges: Badge[]): {\r\n    total: number;\r\n    earned: number;\r\n    byCategory: { [key: string]: { total: number; earned: number } };\r\n    percentageComplete: number;\r\n  } {\r\n    const stats = {\r\n      total: badges.length,\r\n      earned: badges.filter(b => b.earned).length,\r\n      byCategory: {} as { [key: string]: { total: number; earned: number } },\r\n      percentageComplete: 0,\r\n    };\r\n\r\n    // Grouper par catégorie\r\n    badges.forEach(badge => {\r\n      if (!stats.byCategory[badge.categorie]) {\r\n        stats.byCategory[badge.categorie] = { total: 0, earned: 0 };\r\n      }\r\n      stats.byCategory[badge.categorie].total++;\r\n      if (badge.earned) {\r\n        stats.byCategory[badge.categorie].earned++;\r\n      }\r\n    });\r\n\r\n    stats.percentageComplete = stats.total > 0 ? Math.round((stats.earned / stats.total) * 100) : 0;\r\n\r\n    return stats;\r\n  }\r\n\r\n  // Obtenir le prochain badge à débloquer\r\n  getNextBadgeToUnlock(badges: Badge[]): Badge | null {\r\n    const unearned = badges.filter(b => !b.earned);\r\n    if (unearned.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Prioriser par niveau puis par catégorie\r\n    return unearned.sort((a, b) => {\r\n      if (a.niveau !== b.niveau) {\r\n        return a.niveau - b.niveau;\r\n      }\r\n      if (a.categorie !== b.categorie) {\r\n        const categoryOrder = ['progression', 'performance', 'social', 'special'];\r\n        return categoryOrder.indexOf(a.categorie) - categoryOrder.indexOf(b.categorie);\r\n      }\r\n      return 0;\r\n    })[0];\r\n  }\r\n\r\n  // Formatter le temps restant pour un défi\r\n  formatTimeRemaining(interval: string): string {\r\n    if (!interval) {\r\n      return 'Expiré';\r\n    }\r\n\r\n    // Le format PostgreSQL est comme \"7 days\", \"1 day\", etc.\r\n    const match = interval.match(/(\\d+)\\s+(\\w+)/);\r\n    if (!match) {\r\n      return interval;\r\n    }\r\n\r\n    const [, value, unit] = match;\r\n    const num = parseInt(value);\r\n\r\n    if (unit.startsWith('day')) {\r\n      if (num === 0) {\r\n        return \"Aujourd'hui\";\r\n      }\r\n      if (num === 1) {\r\n        return '1 jour';\r\n      }\r\n      return `${num} jours`;\r\n    }\r\n    if (unit.startsWith('hour')) {\r\n      if (num === 1) {\r\n        return '1 heure';\r\n      }\r\n      return `${num} heures`;\r\n    }\r\n\r\n    return interval;\r\n  }\r\n}\r\n\r\nexport const badgesService = new BadgesService();\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Database' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Theme' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SousTheme' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Question' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Reponse' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Explication' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\r\nimport {\r\n  Database,\r\n  Theme,\r\n  SousTheme,\r\n  Question,\r\n  Reponse,\r\n  Explication,\r\n  Session,\r\n  ReponseUtilisateur,\r\n  Profile,\r\n  QuestionWithReponses,\r\n  SessionWithDetails,\r\n  ThemeWithSousThemes,\r\n  UserStats,\r\n} from '../types/database';\r\n\r\n// ============================================\r\n// SERVICE DE BASE DE DONNÉES\r\n// ============================================\r\n\r\nclass DatabaseService {\r\n  // ============================================\r\n  // GESTION DES THÈMES\r\n  // ============================================\r\n\r\n  /**\r\n   * Récupère tous les thèmes actifs avec leurs sous-thèmes\r\n   */\r\n  async getThemesWithSousThemes(): Promise<ThemeWithSousThemes[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('themes')\r\n        .select(\r\n          `\r\n          *,\r\n          sous_themes (*)\r\n        `\r\n        )\r\n        .eq('actif', true)\r\n        .order('ordre');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des thèmes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère un thème spécifique avec ses sous-thèmes\r\n   */\r\n  async getThemeById(themeId: number): Promise<ThemeWithSousThemes | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('themes')\r\n        .select(\r\n          `\r\n          *,\r\n          sous_themes (*)\r\n        `\r\n        )\r\n        .eq('id', themeId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du thème:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // ============================================\r\n  // GESTION DES QUESTIONS\r\n  // ============================================\r\n\r\n  /**\r\n   * Récupère des questions aléatoires selon les critères\r\n   */\r\n  async getRandomQuestions(\r\n    themeId?: number,\r\n    sousThemeId?: number,\r\n    limit: number = 10\r\n  ): Promise<QuestionWithReponses[]> {\r\n    try {\r\n      // Utilise la fonction SQL personnalisée\r\n      const { data: questionsData, error: questionsError } = await supabase.rpc(\r\n        'get_random_questions',\r\n        {\r\n          p_theme_id: themeId ?? null,\r\n          p_sous_theme_id: sousThemeId ?? null,\r\n          p_limit: limit,\r\n        }\r\n      );\r\n\r\n      if (questionsError) {\r\n        throw questionsError;\r\n      }\r\n\r\n      // Récupère les IDs des questions\r\n      const questionIds = questionsData?.map(q => q.question_id) ?? [];\r\n\r\n      if (questionIds.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Récupère les questions complètes avec réponses et explications\r\n      const { data, error } = await supabase\r\n        .from('questions')\r\n        .select(\r\n          `\r\n          *,\r\n          reponses (*),\r\n          explications (*),\r\n          sous_themes (\r\n            *,\r\n            themes (*)\r\n          )\r\n        `\r\n        )\r\n        .in('id', questionIds)\r\n        .eq('actif', true);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Transforme les données pour correspondre au type QuestionWithReponses\r\n      return (data ?? []).map(q => ({\r\n        ...q,\r\n        explication: q.explications?.[0] ?? undefined,\r\n        sous_theme: q.sous_themes\r\n          ? {\r\n              ...q.sous_themes,\r\n              theme: q.sous_themes.themes ?? undefined,\r\n            }\r\n          : undefined,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des questions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère une question spécifique avec toutes ses données\r\n   */\r\n  async getQuestionById(questionId: number): Promise<QuestionWithReponses | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('questions')\r\n        .select(\r\n          `\r\n          *,\r\n          reponses (*),\r\n          explications (*),\r\n          sous_themes (\r\n            *,\r\n            themes (*)\r\n          )\r\n        `\r\n        )\r\n        .eq('id', questionId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      if (!data) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        ...data,\r\n        explication: data.explications?.[0] ?? undefined,\r\n        sous_theme: data.sous_themes\r\n          ? {\r\n              ...data.sous_themes,\r\n              theme: data.sous_themes.themes ?? undefined,\r\n            }\r\n          : undefined,\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération de la question:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les questions par sous-thème\r\n   */\r\n  async getQuestionsBySousTheme(sousThemeId: number): Promise<QuestionWithReponses[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('questions')\r\n        .select(\r\n          `\r\n          *,\r\n          reponses (*),\r\n          explications (*)\r\n        `\r\n        )\r\n        .eq('sous_theme_id', sousThemeId)\r\n        .eq('actif', true)\r\n        .order('niveau_difficulte');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      return (data ?? []).map(q => ({\r\n        ...q,\r\n        explication: q.explications?.[0] ?? undefined,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des questions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ============================================\r\n  // GESTION DES SESSIONS\r\n  // ============================================\r\n\r\n  /**\r\n   * Crée une nouvelle session de quiz\r\n   */\r\n  async createSession(\r\n    profileId: string,\r\n    typeSession: 'entrainement' | 'examen' | 'revision',\r\n    themeId?: number,\r\n    sousThemeId?: number\r\n  ): Promise<Session | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .insert({\r\n          profile_id: profileId,\r\n          type_session: typeSession,\r\n          theme_id: themeId ?? null,\r\n          sous_theme_id: sousThemeId ?? null,\r\n          statut: 'en_cours',\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de la session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour une session existante\r\n   */\r\n  async updateSession(sessionId: number, updates: Partial<Session>): Promise<Session | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update(updates)\r\n        .eq('id', sessionId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour de la session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Termine une session et calcule le score final\r\n   */\r\n  async endSession(sessionId: number): Promise<SessionWithDetails | null> {\r\n    try {\r\n      // Récupère les détails de la session\r\n      const { data: sessionData, error: sessionError } = await supabase\r\n        .from('sessions')\r\n        .select(\r\n          `\r\n          *,\r\n          reponses_utilisateur (*)\r\n        `\r\n        )\r\n        .eq('id', sessionId)\r\n        .single();\r\n\r\n      if (sessionError) {\r\n        throw sessionError;\r\n      }\r\n\r\n      // Calcule les statistiques\r\n      const reponsesUtilisateur = sessionData.reponses_utilisateur ?? [];\r\n      const nombreQuestions = reponsesUtilisateur.length;\r\n      const nombreReponsesCorrectes = reponsesUtilisateur.filter(r => r.est_correcte).length;\r\n      const score =\r\n        nombreQuestions > 0 ? Math.round((nombreReponsesCorrectes / nombreQuestions) * 100) : 0;\r\n      const tempsTotal = reponsesUtilisateur.reduce((sum, r) => sum + (r.temps_reponse ?? 0), 0);\r\n\r\n      // Met à jour la session\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update({\r\n          statut: 'terminee',\r\n          date_fin: new Date().toISOString(),\r\n          score,\r\n          nombre_questions: nombreQuestions,\r\n          nombre_reponses_correctes: nombreReponsesCorrectes,\r\n          temps_total: tempsTotal,\r\n        })\r\n        .eq('id', sessionId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Met à jour les points du profil\r\n      if (data?.profile_id) {\r\n        await this.updateUserPoints(data.profile_id, nombreReponsesCorrectes);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la fin de session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les sessions d'un utilisateur\r\n   */\r\n  async getUserSessions(profileId: string, limit: number = 10): Promise<SessionWithDetails[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .select(\r\n          `\r\n          *,\r\n          themes (*),\r\n          sous_themes (*)\r\n        `\r\n        )\r\n        .eq('profile_id', profileId)\r\n        .order('date_debut', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des sessions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ============================================\r\n  // GESTION DES RÉPONSES UTILISATEUR\r\n  // ============================================\r\n\r\n  /**\r\n   * Enregistre la réponse d'un utilisateur\r\n   */\r\n  async saveUserAnswer(\r\n    sessionId: number,\r\n    questionId: number,\r\n    reponseId: number | null,\r\n    estCorrecte: boolean,\r\n    tempsReponse: number\r\n  ): Promise<ReponseUtilisateur | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('reponses_utilisateur')\r\n        .upsert({\r\n          session_id: sessionId,\r\n          question_id: questionId,\r\n          reponse_id: reponseId,\r\n          est_correcte: estCorrecte,\r\n          temps_reponse: tempsReponse,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de l'enregistrement de la réponse:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marque une question pour révision\r\n   */\r\n  async markQuestionForReview(\r\n    sessionId: number,\r\n    questionId: number,\r\n    marked: boolean = true\r\n  ): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('reponses_utilisateur')\r\n        .update({ marquee_pour_revision: marked })\r\n        .eq('session_id', sessionId)\r\n        .eq('question_id', questionId);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Erreur lors du marquage de la question:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère les questions marquées pour révision\r\n   */\r\n  async getReviewQuestions(profileId: string): Promise<QuestionWithReponses[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('reponses_utilisateur')\r\n        .select(\r\n          `\r\n          questions (\r\n            *,\r\n            reponses (*),\r\n            explications (*),\r\n            sous_themes (\r\n              *,\r\n              themes (*)\r\n            )\r\n          )\r\n        `\r\n        )\r\n        .eq('marquee_pour_revision', true)\r\n        .eq('sessions.profile_id', profileId);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Extrait et formate les questions uniques\r\n      const questionsMap = new Map<number, QuestionWithReponses>();\r\n\r\n      (data ?? []).forEach(item => {\r\n        if (item.questions) {\r\n          const q = item.questions;\r\n          if (!questionsMap.has(q.id)) {\r\n            questionsMap.set(q.id, {\r\n              ...q,\r\n              explication: q.explications?.[0] ?? undefined,\r\n              sous_theme: q.sous_themes\r\n                ? {\r\n                    ...q.sous_themes,\r\n                    theme: q.sous_themes.themes ?? undefined,\r\n                  }\r\n                : undefined,\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      return Array.from(questionsMap.values());\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des questions de révision:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ============================================\r\n  // GESTION DES STATISTIQUES\r\n  // ============================================\r\n\r\n  /**\r\n   * Récupère les statistiques d'un utilisateur\r\n   */\r\n  async getUserStats(profileId: string): Promise<UserStats | null> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_user_stats', {\r\n        p_user_id: profileId,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      if (!data ?? data.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      const stats = data[0];\r\n\r\n      // Récupère les statistiques par thème\r\n      const { data: themeStats, error: themeError } = await supabase\r\n        .from('sessions')\r\n        .select(\r\n          `\r\n          themes (nom),\r\n          nombre_questions,\r\n          nombre_reponses_correctes\r\n        `\r\n        )\r\n        .eq('profile_id', profileId)\r\n        .not('theme_id', 'is', null);\r\n\r\n      if (themeError) {\r\n        throw themeError;\r\n      }\r\n\r\n      // Calcule la progression par thème\r\n      const progressionParTheme = new Map<\r\n        string,\r\n        {\r\n          questions_repondues: number;\r\n          questions_correctes: number;\r\n        }\r\n      >();\r\n\r\n      (themeStats ?? []).forEach(session => {\r\n        const themeName = session.themes?.nom;\r\n        if (themeName) {\r\n          const current = progressionParTheme.get(themeName) ?? {\r\n            questions_repondues: 0,\r\n            questions_correctes: 0,\r\n          };\r\n          current.questions_repondues += session.nombre_questions ?? 0;\r\n          current.questions_correctes += session.nombre_reponses_correctes ?? 0;\r\n          progressionParTheme.set(themeName, current);\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...stats,\r\n        progression_par_theme: Array.from(progressionParTheme.entries()).map(([theme, data]) => ({\r\n          theme,\r\n          pourcentage:\r\n            data.questions_repondues > 0\r\n              ? Math.round((data.questions_correctes / data.questions_repondues) * 100)\r\n              : 0,\r\n          questions_repondues: data.questions_repondues,\r\n        })),\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des statistiques:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour les points d'un utilisateur\r\n   */\r\n  async updateUserPoints(profileId: string, pointsToAdd: number): Promise<boolean> {\r\n    try {\r\n      // Récupère les points actuels\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('points_total')\r\n        .eq('id', profileId)\r\n        .single();\r\n\r\n      if (profileError) {\r\n        throw profileError;\r\n      }\r\n\r\n      const newPoints = (profile?.points_total ?? 0) + pointsToAdd;\r\n\r\n      // Met à jour les points\r\n      const { error } = await supabase\r\n        .from('profiles')\r\n        .update({ points_total: newPoints })\r\n        .eq('id', profileId);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour des points:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère le classement des utilisateurs\r\n   */\r\n  async getLeaderboard(limit: number = 10): Promise<Profile[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .order('points_total', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du classement:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ============================================\r\n  // GESTION DU PROFIL\r\n  // ============================================\r\n\r\n  /**\r\n   * Met à jour le profil d'un utilisateur\r\n   */\r\n  async updateProfile(profileId: string, updates: Partial<Profile>): Promise<Profile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('id', profileId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du profil:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Récupère le profil d'un utilisateur\r\n   */\r\n  async getProfile(profileId: string): Promise<Profile | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', profileId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du profil:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Export de l'instance unique du service\r\nexport const databaseService = new DatabaseService();\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\profileService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[907,910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[907,910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1457,1460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1457,1460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1942,1945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1942,1945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2413,2416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2413,2416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4380,4382],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4774,4777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4774,4777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7882,7885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7882,7885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\r\n\r\ninterface ProfileData {\r\n  username?: string;\r\n  full_name?: string;\r\n  avatar_url?: string;\r\n  concours_type?: 'caporal' | 'lieutenant';\r\n  niveau?: 'debutant' | 'intermediaire' | 'avance';\r\n  date_concours?: string;\r\n  objectif_quotidien?: number;\r\n}\r\n\r\ninterface ProfileStats {\r\n  total_sessions: number;\r\n  total_questions: number;\r\n  questions_correctes: number;\r\n  taux_reussite: number;\r\n  temps_moyen: number;\r\n  points_total: number;\r\n  jours_consecutifs?: number;\r\n  meilleur_score?: number;\r\n}\r\n\r\nclass ProfileService {\r\n  /**\r\n   * Récupère le profil complet d'un utilisateur\r\n   */\r\n  async getProfile(userId: string) {\r\n    try {\r\n      const { data, error } = await supabase.from('profiles').select('*').eq('id', userId).single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return { data, error: null };\r\n    } catch (error: any) {\r\n      console.error('Erreur lors de la récupération du profil:', error);\r\n      return { data: null, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour le profil utilisateur\r\n   */\r\n  async updateProfile(userId: string, updates: ProfileData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('id', userId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return { data, error: null };\r\n    } catch (error: any) {\r\n      console.error('Erreur lors de la mise à jour du profil:', error);\r\n      return { data: null, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change le mot de passe de l'utilisateur\r\n   */\r\n  async updatePassword(newPassword: string) {\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({\r\n        password: newPassword,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return { success: true, error: null };\r\n    } catch (error: any) {\r\n      console.error('Erreur lors du changement de mot de passe:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change l'email de l'utilisateur\r\n   */\r\n  async updateEmail(newEmail: string) {\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({\r\n        email: newEmail,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return { success: true, error: null };\r\n    } catch (error: any) {\r\n      console.error(\"Erreur lors du changement d'email:\", error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Note: La gestion des avatars a été déplacée vers avatarService.ts\r\n   * qui utilise le localStorage pour éviter les problèmes de RLS Supabase\r\n   */\r\n\r\n  /**\r\n   * Récupère les statistiques de l'utilisateur\r\n   */\r\n  async getUserStats(userId: string): Promise<ProfileStats | null> {\r\n    try {\r\n      // Appel de la fonction RPC pour obtenir les stats de base\r\n      const { data: statsData, error: statsError } = await supabase.rpc('get_user_stats', {\r\n        p_user_id: userId,\r\n      });\r\n\r\n      if (statsError) {\r\n        throw statsError;\r\n      }\r\n      if (!statsData || statsData.length === 0) {\r\n        return {\r\n          total_sessions: 0,\r\n          total_questions: 0,\r\n          questions_correctes: 0,\r\n          taux_reussite: 0,\r\n          temps_moyen: 0,\r\n          points_total: 0,\r\n          jours_consecutifs: 0,\r\n          meilleur_score: 0,\r\n        };\r\n      }\r\n\r\n      const stats = statsData[0];\r\n\r\n      // Récupérer des stats supplémentaires\r\n      const { data: sessionsData, error: sessionsError } = await supabase\r\n        .from('sessions')\r\n        .select('score, date_debut')\r\n        .eq('profile_id', userId)\r\n        .eq('statut', 'terminee')\r\n        .order('score', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (sessionsError) {\r\n        throw sessionsError;\r\n      }\r\n\r\n      // Calculer les jours consécutifs\r\n      const { data: recentSessions, error: recentError } = await supabase\r\n        .from('sessions')\r\n        .select('date_debut')\r\n        .eq('profile_id', userId)\r\n        .order('date_debut', { ascending: false })\r\n        .limit(30);\r\n\r\n      if (recentError) {\r\n        throw recentError;\r\n      }\r\n\r\n      const joursConsecutifs = this.calculateConsecutiveDays(recentSessions || []);\r\n      const meilleurScore = sessionsData?.[0]?.score || 0;\r\n\r\n      return {\r\n        ...stats,\r\n        jours_consecutifs: joursConsecutifs,\r\n        meilleur_score: meilleurScore,\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des statistiques:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcule le nombre de jours consécutifs de pratique\r\n   */\r\n  private calculateConsecutiveDays(sessions: any[]): number {\r\n    if (!sessions || sessions.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const dates = sessions.map(s => new Date(s.date_debut).toDateString());\r\n    const uniqueDates = [...new Set(dates)];\r\n\r\n    let consecutiveDays = 0;\r\n    const currentDate = new Date();\r\n\r\n    for (let i = 0; i < uniqueDates.length; i++) {\r\n      const sessionDate = new Date(uniqueDates[i]);\r\n      const diffTime = Math.abs(currentDate.getTime() - sessionDate.getTime());\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffDays <= i + 1) {\r\n        consecutiveDays++;\r\n      } else {\r\n        break;\r\n      }\r\n\r\n      currentDate.setDate(currentDate.getDate() - 1);\r\n    }\r\n\r\n    return consecutiveDays;\r\n  }\r\n\r\n  /**\r\n   * Récupère les badges/achievements de l'utilisateur\r\n   */\r\n  async getUserBadges(userId: string) {\r\n    const stats = await this.getUserStats(userId);\r\n    if (!stats) {\r\n      return [];\r\n    }\r\n\r\n    const badges = [];\r\n\r\n    // Badge débutant\r\n    if (stats.total_sessions >= 1) {\r\n      badges.push({\r\n        id: 'first_session',\r\n        name: 'Première fois',\r\n        description: 'Première session complétée',\r\n        icon: 'star-outline',\r\n        color: '#F59E0B',\r\n        unlocked: true,\r\n      });\r\n    }\r\n\r\n    // Badge 10 sessions\r\n    if (stats.total_sessions >= 10) {\r\n      badges.push({\r\n        id: 'ten_sessions',\r\n        name: 'Persévérant',\r\n        description: '10 sessions complétées',\r\n        icon: 'medal-outline',\r\n        color: '#8B5CF6',\r\n        unlocked: true,\r\n      });\r\n    }\r\n\r\n    // Badge taux de réussite\r\n    if (stats.taux_reussite >= 80) {\r\n      badges.push({\r\n        id: 'high_score',\r\n        name: 'Expert',\r\n        description: 'Taux de réussite supérieur à 80%',\r\n        icon: 'trophy-outline',\r\n        color: '#10B981',\r\n        unlocked: true,\r\n      });\r\n    }\r\n\r\n    // Badge régularité\r\n    if (stats.jours_consecutifs >= 7) {\r\n      badges.push({\r\n        id: 'regular',\r\n        name: 'Régulier',\r\n        description: '7 jours consécutifs',\r\n        icon: 'calendar-outline',\r\n        color: '#3B82F6',\r\n        unlocked: true,\r\n      });\r\n    }\r\n\r\n    // Badge 100 questions\r\n    if (stats.total_questions >= 100) {\r\n      badges.push({\r\n        id: 'hundred_questions',\r\n        name: 'Centurion',\r\n        description: '100 questions répondues',\r\n        icon: 'shield-checkmark-outline',\r\n        color: '#DC2626',\r\n        unlocked: true,\r\n      });\r\n    }\r\n\r\n    return badges;\r\n  }\r\n\r\n  /**\r\n   * Supprime le compte utilisateur\r\n   */\r\n  async deleteAccount(userId: string) {\r\n    try {\r\n      // Supprimer d'abord le profil (cascade supprimera les sessions, etc.)\r\n      const { error: profileError } = await supabase.from('profiles').delete().eq('id', userId);\r\n\r\n      if (profileError) {\r\n        throw profileError;\r\n      }\r\n\r\n      // Supprimer le compte auth\r\n      const { error: authError } = await supabase.auth.admin.deleteUser(userId);\r\n\r\n      if (authError) {\r\n        throw authError;\r\n      }\r\n\r\n      return { success: true, error: null };\r\n    } catch (error: any) {\r\n      console.error('Erreur lors de la suppression du compte:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport const profileService = new ProfileService();\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\progressService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5390,5393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5390,5393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\n\nexport interface ThemeStats {\n  theme_id: number;\n  theme_nom: string;\n  theme_couleur: string;\n  theme_icone: string;\n  total_questions: number;\n  questions_correctes: number;\n  taux_reussite: number;\n  derniere_session: string | null;\n  temps_total: number;\n}\n\nexport interface SessionDetailed {\n  session_id: number;\n  created_at: string;\n  type_session: string;\n  nombre_questions: number;\n  nombre_reponses_correctes: number;\n  temps_total: number;\n  score: number;\n  statut: string;\n  themes: string[];\n  sous_themes: string[];\n  niveau_moyen: number;\n}\n\nexport interface UserObjectives {\n  objectif_quotidien: number;\n  questions_aujourdhui: number;\n  temps_aujourdhui: number;\n  taux_reussite_aujourdhui: number;\n  serie_actuelle: number;\n  meilleure_serie: number;\n  total_sessions: number;\n  total_questions: number;\n  badges_gagnes: {\n    premiere_session: boolean;\n    serie_7_jours: boolean;\n    serie_30_jours: boolean;\n    centurion: boolean;\n    millionaire: boolean;\n    expert_maths: boolean;\n    expert_francais: boolean;\n    expert_metier: boolean;\n    perfectionniste: boolean;\n    marathonien: boolean;\n  };\n}\n\nexport interface WeeklyPerformance {\n  jour_semaine: number;\n  jour_nom: string;\n  score_moyen: number;\n  nombre_sessions: number;\n  nombre_questions: number;\n}\n\nexport interface SousThemeStats {\n  sous_theme_id: number;\n  sous_theme_nom: string;\n  theme_nom: string;\n  total_questions: number;\n  questions_correctes: number;\n  taux_reussite: number;\n  niveau_moyen: number;\n  derniere_pratique: string | null;\n}\n\nclass ProgressService {\n  async getUserStatsByTheme(userId: string): Promise<ThemeStats[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_user_stats_by_theme', { p_user_id: userId });\n\n      if (error) {\n        throw error;\n      }\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching theme stats:', error);\n      return [];\n    }\n  }\n\n  async getUserSessionsDetailed(userId: string, limit: number = 50): Promise<SessionDetailed[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_user_sessions_detailed', {\n        p_user_id: userId,\n        p_limit: limit,\n      });\n\n      if (error) {\n        throw error;\n      }\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching detailed sessions:', error);\n      return [];\n    }\n  }\n\n  async getUserObjectivesAndBadges(userId: string): Promise<UserObjectives | null> {\n    try {\n      const { data, error } = await supabase.rpc('get_user_objectives_and_badges', {\n        p_user_id: userId,\n      });\n\n      if (error) {\n        throw error;\n      }\n      return data?.[0] ?? null;\n    } catch (error) {\n      console.error('Error fetching objectives and badges:', error);\n      return null;\n    }\n  }\n\n  async getWeeklyPerformance(userId: string): Promise<WeeklyPerformance[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_weekly_performance', { p_user_id: userId });\n\n      if (error) {\n        throw error;\n      }\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching weekly performance:', error);\n      return [];\n    }\n  }\n\n  async getUserStatsBySousTheme(userId: string, themeId?: number): Promise<SousThemeStats[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_user_stats_by_sous_theme', {\n        p_user_id: userId,\n        p_theme_id: themeId ?? null,\n      });\n\n      if (error) {\n        throw error;\n      }\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching sous-theme stats:', error);\n      return [];\n    }\n  }\n\n  formatTimeAgo(dateString: string | null): string {\n    if (!dateString) {\n      return 'Jamais';\n    }\n\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n\n    if (diffInHours < 1) {\n      return \"Aujourd'hui\";\n    }\n    if (diffInHours < 24) {\n      return \"Aujourd'hui\";\n    }\n    if (diffInHours < 48) {\n      return 'Hier';\n    }\n    if (diffInHours < 168) {\n      return `Il y a ${Math.floor(diffInHours / 24)} jours`;\n    }\n    if (diffInHours < 720) {\n      return `Il y a ${Math.floor(diffInHours / 168)} semaines`;\n    }\n\n    return date.toLocaleDateString('fr-FR', {\n      day: 'numeric',\n      month: 'short',\n      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,\n    });\n  }\n\n  formatDuration(seconds: number): string {\n    if (seconds < 60) {\n      return `${seconds}s`;\n    }\n\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n\n    if (hours > 0) {\n      return `${hours}h ${remainingMinutes}min`;\n    }\n    return `${minutes} min`;\n  }\n\n  getIconForTheme(themeName: string): string {\n    const iconMap: { [key: string]: string } = {\n      Mathématiques: 'calculator',\n      Français: 'book',\n      Métier: 'flame',\n      'Culture Générale': 'globe',\n      'Sécurité Civile': 'shield-checkmark',\n      'Droit Public': 'document-text',\n      'Gestion Opérationnelle': 'settings',\n    };\n\n    return iconMap[themeName] ?? 'help-circle';\n  }\n\n  getBadgeInfo(badgeKey: string): {\n    name: string;\n    description: string;\n    icon: string;\n    color: string;\n  } {\n    const badges: { [key: string]: any } = {\n      premiere_session: {\n        name: 'Première session',\n        description: 'Complétez votre première session',\n        icon: 'rocket',\n        color: '#3B82F6',\n      },\n      serie_7_jours: {\n        name: 'Série de 7 jours',\n        description: 'Entraînez-vous 7 jours consécutifs',\n        icon: 'flame',\n        color: '#EF4444',\n      },\n      serie_30_jours: {\n        name: 'Série de 30 jours',\n        description: 'Entraînez-vous 30 jours consécutifs',\n        icon: 'flame-sharp',\n        color: '#DC2626',\n      },\n      centurion: {\n        name: 'Centurion',\n        description: 'Répondez à 100 questions',\n        icon: 'medal',\n        color: '#F59E0B',\n      },\n      millionaire: {\n        name: 'Millionnaire',\n        description: 'Répondez à 1000 questions',\n        icon: 'trophy',\n        color: '#FFD700',\n      },\n      expert_maths: {\n        name: 'Expert Mathématiques',\n        description: '50 bonnes réponses en Mathématiques',\n        icon: 'calculator',\n        color: '#3B82F6',\n      },\n      expert_francais: {\n        name: 'Expert Français',\n        description: '50 bonnes réponses en Français',\n        icon: 'book',\n        color: '#10B981',\n      },\n      expert_metier: {\n        name: 'Expert Métier',\n        description: '50 bonnes réponses en Métier',\n        icon: 'flame',\n        color: '#DC2626',\n      },\n      perfectionniste: {\n        name: 'Perfectionniste',\n        description: 'Obtenez 100% sur une session de 10+ questions',\n        icon: 'star',\n        color: '#8B5CF6',\n      },\n      marathonien: {\n        name: 'Marathonien',\n        description: \"Étudiez pendant plus d'une heure\",\n        icon: 'time',\n        color: '#EC4899',\n      },\n    };\n\n    return (\n      badges[badgeKey] ?? {\n        name: 'Badge inconnu',\n        description: '',\n        icon: 'help-circle',\n        color: '#6B7280',\n      }\n    );\n  }\n}\n\nexport const progressService = new ProgressService();\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\rankingService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4858,4861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4858,4861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `type·===·'hebdomadaire'·??·type·===·'mensuel'` with `(type·===·'hebdomadaire'·??·type·===·'mensuel')`","line":240,"column":9,"nodeType":null,"messageId":"replace","endLine":240,"endColumn":54,"fix":{"range":[6792,6837],"text":"(type === 'hebdomadaire' ?? type === 'mensuel')"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\n\nexport type RankingType = 'global' | 'hebdomadaire' | 'mensuel';\nexport type Evolution = 'up' | 'down' | 'stable' | 'new';\n\nexport interface RankingUser {\n  rang: number;\n  user_id: string;\n  username: string;\n  avatar_url?: string;\n  points_total?: number;\n  points_periode?: number;\n  niveau: string;\n  concours_type?: string;\n  evolution?: Evolution;\n  est_utilisateur_actuel: boolean;\n}\n\nexport interface UserPosition {\n  type_classement: string;\n  rang: number;\n  points: number;\n  total_participants: number;\n}\n\nexport interface ThemeRanking {\n  rang: number;\n  user_id: string;\n  username: string;\n  avatar_url?: string;\n  questions_reussies: number;\n  taux_reussite: number;\n  temps_moyen: number;\n  est_utilisateur_actuel: boolean;\n}\n\nclass RankingService {\n  /**\n   * Récupère le classement global\n   */\n  async getGlobalRanking(limit: number = 100, offset: number = 0): Promise<RankingUser[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_classement_global', {\n        p_limit: limit,\n        p_offset: offset,\n      });\n\n      if (error) {\n        console.error('Erreur récupération classement global:', error);\n        return [];\n      }\n\n      return data ?? [];\n    } catch (error) {\n      console.error('Erreur service classement global:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère le classement par type de concours\n   */\n  async getRankingByConcours(\n    concoursType: 'caporal' | 'lieutenant',\n    limit: number = 100,\n    offset: number = 0\n  ): Promise<RankingUser[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_classement_par_concours', {\n        p_concours_type: concoursType,\n        p_limit: limit,\n        p_offset: offset,\n      });\n\n      if (error) {\n        console.error('Erreur récupération classement par concours:', error);\n        return this.getMockRankings(concoursType);\n      }\n\n      return data ?? this.getMockRankings(concoursType);\n    } catch (error) {\n      console.error('Erreur service classement par concours:', error);\n      return this.getMockRankings(concoursType);\n    }\n  }\n\n  /**\n   * Récupère le classement hebdomadaire\n   */\n  async getWeeklyRanking(limit: number = 100, offset: number = 0): Promise<RankingUser[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_classement_hebdomadaire', {\n        p_limit: limit,\n        p_offset: offset,\n      });\n\n      if (error) {\n        console.error('Erreur récupération classement hebdomadaire:', error);\n        return [];\n      }\n\n      return data ?? [];\n    } catch (error) {\n      console.error('Erreur service classement hebdomadaire:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère le classement mensuel\n   */\n  async getMonthlyRanking(limit: number = 100, offset: number = 0): Promise<RankingUser[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_classement_mensuel', {\n        p_limit: limit,\n        p_offset: offset,\n      });\n\n      if (error) {\n        console.error('Erreur récupération classement mensuel:', error);\n        return [];\n      }\n\n      return data ?? [];\n    } catch (error) {\n      console.error('Erreur service classement mensuel:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère la position de l'utilisateur dans différents classements\n   */\n  async getUserPositions(userId?: string): Promise<UserPosition[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_position_utilisateur', {\n        p_user_id: userId ?? null,\n      });\n\n      if (error) {\n        console.error('Erreur récupération position utilisateur:', error);\n        return [];\n      }\n\n      return data ?? [];\n    } catch (error) {\n      console.error('Erreur service position utilisateur:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère le classement par thématique\n   */\n  async getRankingByTheme(\n    themeId: string,\n    limit: number = 100,\n    offset: number = 0\n  ): Promise<ThemeRanking[]> {\n    try {\n      const { data, error } = await supabase.rpc('get_classement_par_theme', {\n        p_theme_id: themeId,\n        p_limit: limit,\n        p_offset: offset,\n      });\n\n      if (error) {\n        console.error('Erreur récupération classement par thème:', error);\n        return [];\n      }\n\n      return data ?? [];\n    } catch (error) {\n      console.error('Erreur service classement par thème:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Recherche un utilisateur dans le classement\n   */\n  async searchUserInRanking(searchTerm: string): Promise<RankingUser[]> {\n    try {\n      const { data, error } = await supabase.rpc('rechercher_utilisateur_classement', {\n        p_search_term: searchTerm,\n      });\n\n      if (error) {\n        console.error('Erreur recherche utilisateur:', error);\n        return [];\n      }\n\n      return (\n        data?.map((user: any) => ({\n          rang: user.rang_global,\n          user_id: user.user_id,\n          username: user.username,\n          avatar_url: user.avatar_url,\n          points_total: user.points_total,\n          niveau: user.niveau,\n          concours_type: user.concours_type,\n          est_utilisateur_actuel: false,\n        })) ?? []\n      );\n    } catch (error) {\n      console.error('Erreur service recherche utilisateur:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Génère des données de classement fictives\n   */\n  private getMockRankings(type: RankingType): RankingUser[] {\n    const mockUsers = [\n      { name: 'Sophie Martin', avatar: '👩', points: 2850, evolution: 'up' as Evolution },\n      { name: 'Lucas Dubois', avatar: '👨', points: 2720, evolution: 'up' as Evolution },\n      { name: 'Emma Bernard', avatar: '👩‍🦰', points: 2680, evolution: 'down' as Evolution },\n      { name: 'Thomas Petit', avatar: '🧑', points: 2550, evolution: 'stable' as Evolution },\n      { name: 'Marie Durand', avatar: '👩‍🦱', points: 2480, evolution: 'up' as Evolution },\n      { name: 'Pierre Leroy', avatar: '👨‍🦱', points: 2420, evolution: 'new' as Evolution },\n      { name: 'Julie Moreau', avatar: '👩‍🦳', points: 2380, evolution: 'down' as Evolution },\n      { name: 'Alexandre Simon', avatar: '🧔', points: 2320, evolution: 'up' as Evolution },\n      { name: 'Camille Laurent', avatar: '👱‍♀️', points: 2280, evolution: 'stable' as Evolution },\n      { name: 'Nicolas Michel', avatar: '👨‍🦲', points: 2150, evolution: 'down' as Evolution },\n    ];\n\n    return mockUsers.map((user, index) => ({\n      rang: index + 1,\n      user_id: `mock-${index}`,\n      username: user.name,\n      avatar_url: user.avatar,\n      points_total:\n        type === 'hebdomadaire'\n          ? Math.floor(user.points / 10)\n          : type === 'mensuel'\n            ? Math.floor(user.points / 3)\n            : user.points,\n      points_periode:\n        type === 'hebdomadaire' ?? type === 'mensuel'\n          ? Math.floor(user.points / (type === 'hebdomadaire' ? 10 : 3))\n          : undefined,\n      niveau: index < 3 ? 'avance' : index < 6 ? 'intermediaire' : 'debutant',\n      concours_type:\n        type === 'caporal'\n          ? 'caporal'\n          : type === 'lieutenant'\n            ? 'lieutenant'\n            : index % 2 === 0\n              ? 'caporal'\n              : 'lieutenant',\n      evolution: user.evolution,\n      est_utilisateur_actuel: index === 3,\n    }));\n  }\n\n  /**\n   * Génère des positions fictives pour l'utilisateur\n   */\n  private getMockUserPositions(): UserPosition[] {\n    return [\n      {\n        type_classement: 'global',\n        rang: 42,\n        points: 1850,\n        total_participants: 523,\n      },\n      {\n        type_classement: 'hebdomadaire',\n        rang: 15,\n        points: 185,\n        total_participants: 287,\n      },\n      {\n        type_classement: 'mensuel',\n        rang: 28,\n        points: 620,\n        total_participants: 412,\n      },\n    ];\n  }\n\n  /**\n   * Génère des données de classement par thème fictives\n   */\n  private getMockThemeRankings(): ThemeRanking[] {\n    const mockUsers = [\n      { name: 'Sophie Martin', avatar: '👩', reussies: 145, taux: 92.5, temps: 35 },\n      { name: 'Lucas Dubois', avatar: '👨', reussies: 138, taux: 89.2, temps: 42 },\n      { name: 'Emma Bernard', avatar: '👩‍🦰', reussies: 132, taux: 87.8, temps: 38 },\n      { name: 'Thomas Petit', avatar: '🧑', reussies: 125, taux: 85.3, temps: 45 },\n      { name: 'Marie Durand', avatar: '👩‍🦱', reussies: 118, taux: 83.1, temps: 40 },\n    ];\n\n    return mockUsers.map((user, index) => ({\n      rang: index + 1,\n      user_id: `mock-${index}`,\n      username: user.name,\n      avatar_url: user.avatar,\n      questions_reussies: user.reussies,\n      taux_reussite: user.taux,\n      temps_moyen: user.temps,\n      est_utilisateur_actuel: index === 2,\n    }));\n  }\n\n  /**\n   * Met à jour les rangs (à appeler périodiquement)\n   */\n  async updateRanks(): Promise<boolean> {\n    try {\n      const { error } = await supabase.rpc('update_rangs');\n\n      if (error) {\n        console.error('Erreur mise à jour des rangs:', error);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erreur service mise à jour des rangs:', error);\n      return false;\n    }\n  }\n}\n\nexport const rankingService = new RankingService();\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\services\\sessionService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":221,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../config/supabase';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport interface Question {\r\n  id: number;\r\n  enonce: string;\r\n  type_question: 'QCU' | 'QCM';\r\n  niveau_difficulte: number;\r\n  temps_limite: number;\r\n  points: number;\r\n  sous_theme_id: number;\r\n  reponses: Answer[];\r\n  explication?: Explanation;\r\n}\r\n\r\nexport interface Answer {\r\n  id: number;\r\n  lettre: 'A' | 'B' | 'C' | 'D';\r\n  texte: string;\r\n  est_correcte: boolean;\r\n}\r\n\r\nexport interface Explanation {\r\n  texte_explication: string;\r\n  source?: string;\r\n  lien_ressource?: string;\r\n}\r\n\r\nexport interface SessionData {\r\n  id?: number;\r\n  profile_id: string;\r\n  questions: Question[];\r\n  currentQuestionIndex: number;\r\n  answers: UserAnswer[];\r\n  score: number;\r\n  startTime: Date;\r\n  isPaused: boolean;\r\n  settings: SessionSettings;\r\n}\r\n\r\nexport interface UserAnswer {\r\n  questionId: number;\r\n  selectedAnswers: number[];\r\n  isCorrect: boolean;\r\n  points: number;\r\n  timeSpent: number;\r\n}\r\n\r\nexport interface SessionSettings {\r\n  questionType: 'QCU' | 'QCM' | 'MIXTE';\r\n  timerEnabled: boolean;\r\n  timePerQuestion: number;\r\n  scoring: {\r\n    correct: number;\r\n    incorrect: number;\r\n    noAnswer: number;\r\n    partial: number;\r\n  };\r\n}\r\n\r\nclass SessionService {\r\n  private readonly SESSION_KEY = '@training_session_';\r\n\r\n  async loadQuestions(\r\n    sousThemeIds: number[],\r\n    questionType: 'QCU' | 'QCM' | 'MIXTE',\r\n    limit?: number\r\n  ): Promise<Question[]> {\r\n    try {\r\n      let query = supabase\r\n        .from('questions')\r\n        .select(\r\n          `\r\n          id,\r\n          enonce,\r\n          type_question,\r\n          niveau_difficulte,\r\n          temps_limite,\r\n          points,\r\n          sous_theme_id,\r\n          reponses (\r\n            id,\r\n            lettre,\r\n            texte,\r\n            est_correcte\r\n          ),\r\n          explications (\r\n            texte_explication,\r\n            source,\r\n            lien_ressource\r\n          )\r\n        `\r\n        )\r\n        .in('sous_theme_id', sousThemeIds)\r\n        .eq('actif', true);\r\n\r\n      // Filtrer par type si nécessaire\r\n      if (questionType !== 'MIXTE') {\r\n        query = query.eq('type_question', questionType);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Mélanger les questions\r\n      const shuffledQuestions = this.shuffleArray(data ?? []);\r\n\r\n      // Limiter si nécessaire\r\n      const questions = limit ? shuffledQuestions.slice(0, limit) : shuffledQuestions;\r\n\r\n      // Formatter les questions\r\n      return questions.map(q => {\r\n        // Les explications peuvent être un tableau ou un objet unique\r\n        const explicationData = Array.isArray(q.explications) ? q.explications[0] : q.explications;\r\n\r\n        const formatted = {\r\n          ...q,\r\n          explication: explicationData ?? undefined,\r\n          reponses: this.shuffleArray(q.reponses ?? []),\r\n        };\r\n        return formatted;\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des questions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async createSession(\r\n    userId: string,\r\n    questions: Question[],\r\n    settings: SessionSettings\r\n  ): Promise<SessionData> {\r\n    const sessionData: SessionData = {\r\n      profile_id: userId,\r\n      questions,\r\n      currentQuestionIndex: 0,\r\n      answers: [],\r\n      score: 0,\r\n      startTime: new Date(),\r\n      isPaused: false,\r\n      settings,\r\n    };\r\n\r\n    // Sauvegarder dans la base de données\r\n    const { data, error } = await supabase\r\n      .from('sessions')\r\n      .insert({\r\n        profile_id: userId,\r\n        type_session: 'entrainement',\r\n        score: 0,\r\n        nombre_questions: questions.length,\r\n        nombre_reponses_correctes: 0,\r\n        temps_total: 0,\r\n        statut: 'en_cours',\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Erreur lors de la création de la session:', error);\r\n    } else {\r\n      sessionData.id = data.id;\r\n    }\r\n\r\n    // Sauvegarder localement\r\n    await this.saveSessionLocally(userId, sessionData);\r\n\r\n    return sessionData;\r\n  }\r\n\r\n  async saveSessionLocally(userId: string, session: SessionData): Promise<void> {\r\n    try {\r\n      await AsyncStorage.setItem(`${this.SESSION_KEY}${userId}`, JSON.stringify(session));\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde locale:', error);\r\n    }\r\n  }\r\n\r\n  async getLocalSession(userId: string): Promise<SessionData | null> {\r\n    try {\r\n      const data = await AsyncStorage.getItem(`${this.SESSION_KEY}${userId}`);\r\n      return data ? JSON.parse(data) : null;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération de la session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async clearLocalSession(userId: string): Promise<void> {\r\n    try {\r\n      await AsyncStorage.removeItem(`${this.SESSION_KEY}${userId}`);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de la session locale:', error);\r\n    }\r\n  }\r\n\r\n  async saveAnswer(\r\n    userId: string,\r\n    sessionId: number | undefined,\r\n    answer: UserAnswer\r\n  ): Promise<void> {\r\n    try {\r\n      // Récupérer la session locale\r\n      const session = await this.getLocalSession(userId);\r\n      if (session) {\r\n        session.answers.push(answer);\r\n        session.score += answer.points;\r\n        await this.saveSessionLocally(userId, session);\r\n      }\r\n\r\n      // Sauvegarder dans la base de données si session existe\r\n      if (sessionId) {\r\n        // Pour QCM, on peut avoir plusieurs réponses sélectionnées\r\n        // On prend la première réponse sélectionnée ou null si aucune\r\n        const reponseId = answer.selectedAnswers.length > 0 ? answer.selectedAnswers[0] : null;\r\n\r\n        const { data, error } = await supabase\r\n          .from('reponses_utilisateur')\r\n          .insert({\r\n            session_id: sessionId,\r\n            question_id: answer.questionId,\r\n            reponse_id: reponseId,\r\n            est_correcte: answer.isCorrect,\r\n            temps_reponse: answer.timeSpent,\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (error) {\r\n          console.error('Erreur lors de la sauvegarde dans Supabase:', error);\r\n          throw error;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de la réponse:', error);\r\n      // Ne pas propager l'erreur pour ne pas bloquer l'utilisateur\r\n      // mais logger pour le débogage\r\n    }\r\n  }\r\n\r\n  async endSession(\r\n    userId: string,\r\n    sessionId: number | undefined,\r\n    status: 'terminee' | 'abandonnee' = 'terminee'\r\n  ): Promise<{\r\n    sessionId: number | undefined;\r\n    score: number;\r\n    totalQuestions: number;\r\n    correctAnswers: number;\r\n    totalTime: number;\r\n    answers: UserAnswer[];\r\n    questions: Question[];\r\n  } | null> {\r\n    try {\r\n      const session = await this.getLocalSession(userId);\r\n\r\n      if (!session) {\r\n        return null;\r\n      }\r\n\r\n      const totalTime = Math.floor(\r\n        (new Date().getTime() - new Date(session.startTime).getTime()) / 1000\r\n      );\r\n      const correctAnswers = session.answers.filter(a => a.isCorrect).length;\r\n\r\n      if (sessionId) {\r\n        await supabase\r\n          .from('sessions')\r\n          .update({\r\n            score: session.score,\r\n            nombre_reponses_correctes: correctAnswers,\r\n            temps_total: totalTime,\r\n            statut: status,\r\n            date_fin: new Date().toISOString(),\r\n          })\r\n          .eq('id', sessionId);\r\n      }\r\n\r\n      // Nettoyer la session locale\r\n      await AsyncStorage.removeItem(`${this.SESSION_KEY}${userId}`);\r\n\r\n      // Retourner les données de session pour l'écran de rapport\r\n      return {\r\n        sessionId,\r\n        score: session.score,\r\n        totalQuestions: session.questions.length,\r\n        correctAnswers,\r\n        totalTime,\r\n        answers: session.answers,\r\n        questions: session.questions,\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la fin de session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  calculateScore(\r\n    question: Question,\r\n    selectedAnswers: number[],\r\n    settings: SessionSettings\r\n  ): { isCorrect: boolean; points: number; isPartial?: boolean } {\r\n    const correctAnswerIds = question.reponses.filter(r => r.est_correcte).map(r => r.id);\r\n\r\n    if (selectedAnswers.length === 0) {\r\n      return {\r\n        isCorrect: false,\r\n        points: settings.scoring.noAnswer,\r\n      };\r\n    }\r\n\r\n    if (question.type_question === 'QCU') {\r\n      const isCorrect =\r\n        selectedAnswers.length === 1 && correctAnswerIds.includes(selectedAnswers[0]);\r\n      return {\r\n        isCorrect,\r\n        points: isCorrect ? settings.scoring.correct : settings.scoring.incorrect,\r\n      };\r\n    } else {\r\n      // QCM\r\n      const correctSelections = selectedAnswers.filter(id => correctAnswerIds.includes(id)).length;\r\n      const incorrectSelections = selectedAnswers.filter(\r\n        id => !correctAnswerIds.includes(id)\r\n      ).length;\r\n\r\n      if (incorrectSelections === 0 && correctSelections === correctAnswerIds.length) {\r\n        // Toutes les bonnes réponses et aucune mauvaise\r\n        return {\r\n          isCorrect: true,\r\n          points: settings.scoring.correct,\r\n        };\r\n      } else if (correctSelections > 0 && incorrectSelections === 0) {\r\n        // Réponse partielle correcte\r\n        return {\r\n          isCorrect: false,\r\n          points: settings.scoring.partial,\r\n          isPartial: true,\r\n        };\r\n      } else {\r\n        // Réponse incorrecte\r\n        return {\r\n          isCorrect: false,\r\n          points: settings.scoring.incorrect,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  async getSessionStats(sessionData: {\r\n    sessionId: number | undefined;\r\n    score: number;\r\n    totalQuestions: number;\r\n    correctAnswers: number;\r\n    totalTime: number;\r\n    answers: UserAnswer[];\r\n    questions: Question[];\r\n  }) {\r\n    try {\r\n      // Récupérer les informations des thèmes et sous-thèmes\r\n      const sousThemeIds = [...new Set(sessionData.questions.map(q => q.sous_theme_id))];\r\n\r\n      const { data: sousThemesData, error } = await supabase\r\n        .from('sous_themes')\r\n        .select(\r\n          `\r\n          id,\r\n          nom,\r\n          theme:themes (\r\n            id,\r\n            nom,\r\n            couleur\r\n          )\r\n        `\r\n        )\r\n        .in('id', sousThemeIds);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Calculer les statistiques par thème\r\n      const themeStatsMap = new Map();\r\n\r\n      sessionData.questions.forEach((question, index) => {\r\n        const answer = sessionData.answers[index];\r\n        const sousTheme = sousThemesData?.find(st => st.id === question.sous_theme_id);\r\n\r\n        if (sousTheme?.theme) {\r\n          const themeId = sousTheme.theme.id;\r\n\r\n          if (!themeStatsMap.has(themeId)) {\r\n            themeStatsMap.set(themeId, {\r\n              themeId,\r\n              themeName: sousTheme.theme.nom,\r\n              themeColor: sousTheme.theme.couleur,\r\n              totalQuestions: 0,\r\n              correctAnswers: 0,\r\n              points: 0,\r\n              sousThemes: new Map(),\r\n            });\r\n          }\r\n\r\n          const themeStat = themeStatsMap.get(themeId);\r\n          themeStat.totalQuestions++;\r\n          if (answer?.isCorrect) {\r\n            themeStat.correctAnswers++;\r\n          }\r\n          themeStat.points += answer?.points ?? 0;\r\n\r\n          // Stats par sous-thème\r\n          if (!themeStat.sousThemes.has(sousTheme.id)) {\r\n            themeStat.sousThemes.set(sousTheme.id, {\r\n              sousThemeId: sousTheme.id,\r\n              sousThemeName: sousTheme.nom,\r\n              totalQuestions: 0,\r\n              correctAnswers: 0,\r\n            });\r\n          }\r\n\r\n          const sousThemeStat = themeStat.sousThemes.get(sousTheme.id);\r\n          sousThemeStat.totalQuestions++;\r\n          if (answer?.isCorrect) {\r\n            sousThemeStat.correctAnswers++;\r\n          }\r\n        }\r\n      });\r\n\r\n      // Convertir en tableau et calculer les taux de réussite\r\n      const themeStats = Array.from(themeStatsMap.values()).map(theme => ({\r\n        ...theme,\r\n        successRate: (theme.correctAnswers / theme.totalQuestions) * 100,\r\n        sousThemes: Array.from(theme.sousThemes.values()).map(st => ({\r\n          ...st,\r\n          successRate: (st.correctAnswers / st.totalQuestions) * 100,\r\n        })),\r\n      }));\r\n\r\n      // Récupérer les questions échouées avec leurs détails\r\n      const failedQuestions = sessionData.questions\r\n        .map((question, index) => {\r\n          const answer = sessionData.answers[index];\r\n          if (!answer ?? answer.isCorrect) {\r\n            return null;\r\n          }\r\n\r\n          const sousTheme = sousThemesData?.find(st => st.id === question.sous_theme_id);\r\n          const userAnswerText =\r\n            answer.selectedAnswers.length > 0\r\n              ? question.reponses.find(r => r.id === answer.selectedAnswers[0])?.texte\r\n              : null;\r\n          const correctAnswerText = question.reponses.find(r => r.est_correcte)?.texte ?? '';\r\n\r\n          return {\r\n            questionId: question.id,\r\n            enonce: question.enonce,\r\n            themeName: sousTheme?.theme?.nom ?? '',\r\n            sousThemeName: sousTheme?.nom ?? '',\r\n            userAnswer: userAnswerText,\r\n            correctAnswer: correctAnswerText,\r\n            explication: question.explication?.texte_explication ?? '',\r\n          };\r\n        })\r\n        .filter(q => q !== null);\r\n\r\n      return {\r\n        sessionId: sessionData.sessionId,\r\n        score: sessionData.score,\r\n        totalQuestions: sessionData.totalQuestions,\r\n        correctAnswers: sessionData.correctAnswers,\r\n        successRate: (sessionData.correctAnswers / sessionData.totalQuestions) * 100,\r\n        totalTime: sessionData.totalTime,\r\n        averageTime: Math.floor(sessionData.totalTime / sessionData.totalQuestions),\r\n        themeStats,\r\n        failedQuestions,\r\n        pointsEarned: Math.round(sessionData.score),\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul des statistiques:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private shuffleArray<T>(array: T[]): T[] {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n  }\r\n}\r\n\r\nexport const sessionService = new SessionService();\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\styles\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\types\\app-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\types\\navigation.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `␍`","line":1,"column":66,"nodeType":null,"messageId":"insert","endLine":1,"endColumn":66,"fix":{"range":[65,65],"text":"\r"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Challenge' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Notification' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1320,1323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1320,1323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1346,1349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1346,1349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1697,1700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1697,1700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2656,2659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2656,2659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2682,2685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2682,2685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3033,3036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3033,3036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NavigatorScreenParams } from '@react-navigation/native';\nimport type { Badge, Challenge, Notification } from './app-types';\r\nimport { StackScreenProps } from '@react-navigation/stack';\r\nimport { BottomTabScreenProps } from '@react-navigation/bottom-tabs';\r\n\r\nexport type RootStackParamList = {\r\n  Auth: NavigatorScreenParams<AuthStackParamList>;\r\n  Main: NavigatorScreenParams<MainTabParamList>;\r\n};\r\n\r\nexport type AuthStackParamList = {\r\n  SignIn: undefined;\r\n  SignUp: undefined;\r\n  ForgotPassword: undefined;\r\n};\r\n\r\nexport type MainTabParamList = {\r\n  Home: NavigatorScreenParams<HomeStackParamList>;\r\n  Revision: NavigatorScreenParams<RevisionStackParamList>;\r\n  Progress: NavigatorScreenParams<ProgressStackParamList>;\r\n  Ranking: NavigatorScreenParams<RankingStackParamList>;\r\n};\r\n\r\nexport type HomeStackParamList = {\r\n  HomeScreen: undefined;\r\n  ProfileScreen: undefined;\r\n  TrainingConfig: undefined;\r\n  TrainingSession: {\r\n    themes: number[];\r\n    sousThemes: number[];\r\n    settings: {\r\n      questionType: 'QCU' | 'QCM' | 'MIXTE';\r\n      timerEnabled: boolean;\r\n      timePerQuestion: number;\r\n      scoring: {\r\n        correct: number;\r\n        incorrect: number;\r\n        noAnswer: number;\r\n        partial: number;\r\n      };\r\n    };\r\n  };\r\n  SessionReport: {\r\n    sessionId: number;\r\n    stats: any;\r\n    sessionParams?: any;\r\n    isAbandoned?: boolean;\r\n  };\r\n  RewardAnimation: {\r\n    rewards: Array<{\r\n      type: 'badge' | 'challenge' | 'rank';\r\n      id: number;\r\n      name: string;\r\n      description: string;\r\n      icon?: string;\r\n      color?: string;\r\n      rarity?: 'common' | 'rare' | 'epic' | 'legendary';\r\n      points?: number;\r\n    }>;\r\n    sessionStats: any;\r\n  };\r\n  ReviewQuestions: {\r\n    questions: Array<{\r\n      questionId: number;\r\n      enonce: string;\r\n      themeName: string;\r\n      sousThemeName: string;\r\n      userAnswer: string | null;\r\n      correctAnswer: string;\r\n      explication: string;\r\n    }>;\r\n  };\r\n  Announcement: { id: string };\r\n};\r\n\r\nexport type RevisionStackParamList = {\r\n  RevisionScreen: undefined;\r\n};\r\n\r\nexport type RankingStackParamList = {\r\n  RankingScreen: undefined;\r\n};\r\n\r\nexport type TrainingStackParamList = {\r\n  TrainingList: undefined;\r\n  TrainingConfig: undefined;\r\n  TrainingSession: {\r\n    themes: number[];\r\n    sousThemes: number[];\r\n    settings: {\r\n      questionType: 'QCU' | 'QCM' | 'MIXTE';\r\n      timerEnabled: boolean;\r\n      timePerQuestion: number;\r\n      scoring: {\r\n        correct: number;\r\n        incorrect: number;\r\n        noAnswer: number;\r\n        partial: number;\r\n      };\r\n    };\r\n  };\r\n  SessionReport: {\r\n    sessionId: number;\r\n    stats: any;\r\n    sessionParams?: any;\r\n    isAbandoned?: boolean;\r\n  };\r\n  RewardAnimation: {\r\n    rewards: Array<{\r\n      type: 'badge' | 'challenge' | 'rank';\r\n      id: number;\r\n      name: string;\r\n      description: string;\r\n      icon?: string;\r\n      color?: string;\r\n      rarity?: 'common' | 'rare' | 'epic' | 'legendary';\r\n      points?: number;\r\n    }>;\r\n    sessionStats: any;\r\n  };\r\n  ReviewQuestions: {\r\n    questions: Array<{\r\n      questionId: number;\r\n      enonce: string;\r\n      themeName: string;\r\n      sousThemeName: string;\r\n      userAnswer: string | null;\r\n      correctAnswer: string;\r\n      explication: string;\r\n    }>;\r\n  };\r\n  TrainingDetail: { id: string };\r\n  TrainingProgress: { trainingId: string };\r\n};\r\n\r\nexport type ProgressStackParamList = {\r\n  ProgressScreen: undefined;\r\n};\r\n\r\nexport type ProfileStackParamList = {\r\n  ProfileScreen: undefined;\r\n  EditProfile: undefined;\r\n  Settings: undefined;\r\n};\r\n\r\nexport type RootStackScreenProps<T extends keyof RootStackParamList> = StackScreenProps<\r\n  RootStackParamList,\r\n  T\r\n>;\r\n\r\nexport type AuthStackScreenProps<T extends keyof AuthStackParamList> = StackScreenProps<\r\n  AuthStackParamList,\r\n  T\r\n>;\r\n\r\nexport type MainTabScreenProps<T extends keyof MainTabParamList> = BottomTabScreenProps<\r\n  MainTabParamList,\r\n  T\r\n>;\r\n\r\nexport type HomeStackScreenProps<T extends keyof HomeStackParamList> = StackScreenProps<\r\n  HomeStackParamList,\r\n  T\r\n>;\r\n\r\nexport type TrainingStackScreenProps<T extends keyof TrainingStackParamList> = StackScreenProps<\r\n  TrainingStackParamList,\r\n  T\r\n>;\r\n\r\nexport type RevisionStackScreenProps<T extends keyof RevisionStackParamList> = StackScreenProps<\r\n  RevisionStackParamList,\r\n  T\r\n>;\r\n\r\nexport type ProgressStackScreenProps<T extends keyof ProgressStackParamList> = StackScreenProps<\r\n  ProgressStackParamList,\r\n  T\r\n>;\r\n\r\nexport type RankingStackScreenProps<T extends keyof RankingStackParamList> = StackScreenProps<\r\n  RankingStackParamList,\r\n  T\r\n>;\r\n\r\nexport type ProfileStackScreenProps<T extends keyof ProfileStackParamList> = StackScreenProps<\r\n  ProfileStackParamList,\r\n  T\r\n>;\r\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\utils\\fontFix.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1190,1193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1190,1193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Platform } from 'react-native';\n\n// Fix pour les fonts sur React Navigation\nexport const configureFonts = () => {\n  if (Platform.OS === 'ios' || Platform.OS === 'android') {\n    // Assure que les fonts par défaut sont disponibles\n    const defaultFonts = {\n      regular: {\n        fontFamily: Platform.select({\n          ios: 'System',\n          android: 'Roboto',\n          default: 'System',\n        }),\n        fontWeight: '400' as const,\n      },\n      medium: {\n        fontFamily: Platform.select({\n          ios: 'System',\n          android: 'Roboto-Medium',\n          default: 'System',\n        }),\n        fontWeight: '500' as const,\n      },\n      light: {\n        fontFamily: Platform.select({\n          ios: 'System',\n          android: 'Roboto-Light',\n          default: 'System',\n        }),\n        fontWeight: '300' as const,\n      },\n      thin: {\n        fontFamily: Platform.select({\n          ios: 'System',\n          android: 'Roboto-Thin',\n          default: 'System',\n        }),\n        fontWeight: '100' as const,\n      },\n    };\n\n    // Patch global pour s'assurer que les fonts sont disponibles\n    if (typeof global !== 'undefined') {\n      (global as any).__REACT_NAVIGATION_FONTS__ = defaultFonts;\n    }\n\n    return defaultFonts;\n  }\n\n  return {};\n};\n\n// Initialise les fonts au démarrage\nconfigureFonts();\n","usedDeprecatedRules":[]},{"filePath":"c:\\Users\\jonat\\Desktop\\Projet\\CasqueEnMain\\src\\utils\\navigationPatch.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":21,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":50,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":50,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogBox, YellowBox } from 'react-native';\n\n// Ignore les warnings spécifiques de React Navigation\n// C'est un bug connu qui n'affecte pas le fonctionnement\nLogBox.ignoreLogs([\n  \"TypeError: Cannot read property 'medium' of undefined\",\n  \"Cannot read properties of undefined (reading 'medium')\",\n  \"Warning: TypeError: Cannot read property 'medium' of undefined\",\n  'Warning: TypeError:',\n]);\n\n// Désactive complètement YellowBox si disponible\nif (YellowBox) {\n  YellowBox.ignoreWarnings([\"TypeError: Cannot read property 'medium' of undefined\"]);\n}\n\n// Patch plus agressif pour supprimer complètement ces warnings\nconst originalError = console.error;\nconst originalWarn = console.warn;\nconst originalLog = console.log;\n\nconsole.error = (...args) => {\n  if (args[0] && typeof args[0] === 'string') {\n    const message = args[0].toString();\n    if (\n      message.includes('medium') ||\n      message.includes('TypeError') ||\n      message.includes('Cannot read property')\n    ) {\n      return;\n    }\n  }\n  originalError.apply(console, args);\n};\n\nconsole.warn = (...args) => {\n  if (args[0] && typeof args[0] === 'string') {\n    const message = args[0].toString();\n    if (\n      message.includes('medium') ||\n      message.includes('TypeError') ||\n      message.includes('Cannot read property')\n    ) {\n      return;\n    }\n  }\n  originalWarn.apply(console, args);\n};\n\nconsole.log = (...args) => {\n  if (args[0] && typeof args[0] === 'string') {\n    const message = args[0].toString();\n    if (\n      message.includes('Warning: TypeError') ||\n      message.includes(\"Cannot read property 'medium'\")\n    ) {\n      return;\n    }\n  }\n  originalLog.apply(console, args);\n};\n\nexport {};\n","usedDeprecatedRules":[]}]
